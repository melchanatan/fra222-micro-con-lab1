
micro_con_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000561c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080057f4  080057f4  000157f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005834  08005834  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800583c  0800583c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800583c  0800583c  0001583c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005840  08005840  00015840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  2000000c  08005850  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08005850  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016fb1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029dd  00000000  00000000  00037030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  00039a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe5  00000000  00000000  0003ae68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003be4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c42  00000000  00000000  00063887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e99d  00000000  00000000  0007a4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005864  00000000  00000000  00188e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018e6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080057dc 	.word	0x080057dc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080057dc 	.word	0x080057dc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fbf5 	bl	8000d06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f81a 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f9c0 	bl	80008a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f994 	bl	8000850 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f8fa 	bl	8000720 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f942 	bl	80007b4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000530:	f000 f85c 	bl	80005ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 300);
 8000534:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000538:	4903      	ldr	r1, [pc, #12]	; (8000548 <main+0x34>)
 800053a:	4804      	ldr	r0, [pc, #16]	; (800054c <main+0x38>)
 800053c:	f001 f82e 	bl	800159c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <main+0x3c>)
 8000542:	f003 fd7d 	bl	8004040 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000546:	e7fe      	b.n	8000546 <main+0x32>
 8000548:	200001d4 	.word	0x200001d4
 800054c:	20000028 	.word	0x20000028
 8000550:	20000188 	.word	0x20000188

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	2238      	movs	r2, #56	; 0x38
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f005 f90e 	bl	8005784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000576:	2000      	movs	r0, #0
 8000578:	f002 fcda 	bl	8002f30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2340      	movs	r3, #64	; 0x40
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000592:	2304      	movs	r3, #4
 8000594:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000596:	2355      	movs	r3, #85	; 0x55
 8000598:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fd74 	bl	8003098 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005b6:	f000 f9e3 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 f872 	bl	80036bc <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005de:	f000 f9cf 	bl	8000980 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f005 f8bd 	bl	8005784 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b41      	ldr	r3, [pc, #260]	; (8000710 <MX_ADC1_Init+0x124>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b3f      	ldr	r3, [pc, #252]	; (8000710 <MX_ADC1_Init+0x124>)
 8000614:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <MX_ADC1_Init+0x124>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <MX_ADC1_Init+0x124>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b3a      	ldr	r3, [pc, #232]	; (8000710 <MX_ADC1_Init+0x124>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062c:	4b38      	ldr	r3, [pc, #224]	; (8000710 <MX_ADC1_Init+0x124>)
 800062e:	2201      	movs	r2, #1
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b37      	ldr	r3, [pc, #220]	; (8000710 <MX_ADC1_Init+0x124>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b35      	ldr	r3, [pc, #212]	; (8000710 <MX_ADC1_Init+0x124>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063e:	4b34      	ldr	r3, [pc, #208]	; (8000710 <MX_ADC1_Init+0x124>)
 8000640:	2200      	movs	r2, #0
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000644:	4b32      	ldr	r3, [pc, #200]	; (8000710 <MX_ADC1_Init+0x124>)
 8000646:	2203      	movs	r2, #3
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b31      	ldr	r3, [pc, #196]	; (8000710 <MX_ADC1_Init+0x124>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000652:	4b2f      	ldr	r3, [pc, #188]	; (8000710 <MX_ADC1_Init+0x124>)
 8000654:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000658:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800065a:	4b2d      	ldr	r3, [pc, #180]	; (8000710 <MX_ADC1_Init+0x124>)
 800065c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000660:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000662:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <MX_ADC1_Init+0x124>)
 8000664:	2201      	movs	r2, #1
 8000666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066a:	4b29      	ldr	r3, [pc, #164]	; (8000710 <MX_ADC1_Init+0x124>)
 800066c:	2200      	movs	r2, #0
 800066e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <MX_ADC1_Init+0x124>)
 8000672:	2200      	movs	r2, #0
 8000674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000678:	4825      	ldr	r0, [pc, #148]	; (8000710 <MX_ADC1_Init+0x124>)
 800067a:	f000 fdd3 	bl	8001224 <HAL_ADC_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000684:	f000 f97c 	bl	8000980 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000690:	4619      	mov	r1, r3
 8000692:	481f      	ldr	r0, [pc, #124]	; (8000710 <MX_ADC1_Init+0x124>)
 8000694:	f001 fe04 	bl	80022a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800069e:	f000 f96f 	bl	8000980 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_ADC1_Init+0x128>)
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a6:	2306      	movs	r3, #6
 80006a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ae:	237f      	movs	r3, #127	; 0x7f
 80006b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4619      	mov	r1, r3
 80006be:	4814      	ldr	r0, [pc, #80]	; (8000710 <MX_ADC1_Init+0x124>)
 80006c0:	f001 f85e 	bl	8001780 <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006ca:	f000 f959 	bl	8000980 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_ADC1_Init+0x12c>)
 80006d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006d2:	230c      	movs	r3, #12
 80006d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_ADC1_Init+0x124>)
 80006dc:	f001 f850 	bl	8001780 <HAL_ADC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80006e6:	f000 f94b 	bl	8000980 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_ADC1_Init+0x130>)
 80006ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006ee:	2312      	movs	r3, #18
 80006f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_ADC1_Init+0x124>)
 80006f8:	f001 f842 	bl	8001780 <HAL_ADC_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000702:	f000 f93d 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	3730      	adds	r7, #48	; 0x30
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000028 	.word	0x20000028
 8000714:	04300002 	.word	0x04300002
 8000718:	08600004 	.word	0x08600004
 800071c:	3ef08000 	.word	0x3ef08000

08000720 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000726:	4a22      	ldr	r2, [pc, #136]	; (80007b0 <MX_LPUART1_UART_Init+0x90>)
 8000728:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 800075e:	2200      	movs	r2, #0
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000762:	4812      	ldr	r0, [pc, #72]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000764:	f004 f9a0 	bl	8004aa8 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800076e:	f000 f907 	bl	8000980 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000772:	2100      	movs	r1, #0
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000776:	f004 ff3b 	bl	80055f0 <HAL_UARTEx_SetTxFifoThreshold>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000780:	f000 f8fe 	bl	8000980 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000784:	2100      	movs	r1, #0
 8000786:	4809      	ldr	r0, [pc, #36]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000788:	f004 ff70 	bl	800566c <HAL_UARTEx_SetRxFifoThreshold>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000792:	f000 f8f5 	bl	8000980 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000798:	f004 fef1 	bl	800557e <HAL_UARTEx_DisableFifoMode>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007a2:	f000 f8ed 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000f4 	.word	0x200000f4
 80007b0:	40008000 	.word	0x40008000

080007b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_TIM2_Init+0x98>)
 80007d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16999;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_TIM2_Init+0x98>)
 80007dc:	f244 2267 	movw	r2, #16999	; 0x4267
 80007e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_TIM2_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_TIM2_Init+0x98>)
 80007ea:	2209      	movs	r2, #9
 80007ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_TIM2_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_TIM2_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007fa:	4814      	ldr	r0, [pc, #80]	; (800084c <MX_TIM2_Init+0x98>)
 80007fc:	f003 fbc8 	bl	8003f90 <HAL_TIM_Base_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000806:	f000 f8bb 	bl	8000980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_TIM2_Init+0x98>)
 8000818:	f003 fdd2 	bl	80043c0 <HAL_TIM_ConfigClockSource>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000822:	f000 f8ad 	bl	8000980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000826:	2320      	movs	r3, #32
 8000828:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4806      	ldr	r0, [pc, #24]	; (800084c <MX_TIM2_Init+0x98>)
 8000834:	f004 f85c 	bl	80048f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800083e:	f000 f89f 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	3720      	adds	r7, #32
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000188 	.word	0x20000188

08000850 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_DMA_Init+0x50>)
 8000858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800085a:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <MX_DMA_Init+0x50>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6493      	str	r3, [r2, #72]	; 0x48
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_DMA_Init+0x50>)
 8000864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_DMA_Init+0x50>)
 8000870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <MX_DMA_Init+0x50>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6493      	str	r3, [r2, #72]	; 0x48
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_DMA_Init+0x50>)
 800087c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	200b      	movs	r0, #11
 800088c:	f001 feeb 	bl	8002666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000890:	200b      	movs	r0, #11
 8000892:	f001 ff02 	bl	800269a <HAL_NVIC_EnableIRQ>

}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <MX_GPIO_Init+0xd4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a2e      	ldr	r2, [pc, #184]	; (8000978 <MX_GPIO_Init+0xd4>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <MX_GPIO_Init+0xd4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d2:	4b29      	ldr	r3, [pc, #164]	; (8000978 <MX_GPIO_Init+0xd4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a28      	ldr	r2, [pc, #160]	; (8000978 <MX_GPIO_Init+0xd4>)
 80008d8:	f043 0320 	orr.w	r3, r3, #32
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <MX_GPIO_Init+0xd4>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0320 	and.w	r3, r3, #32
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b23      	ldr	r3, [pc, #140]	; (8000978 <MX_GPIO_Init+0xd4>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a22      	ldr	r2, [pc, #136]	; (8000978 <MX_GPIO_Init+0xd4>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <MX_GPIO_Init+0xd4>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_GPIO_Init+0xd4>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <MX_GPIO_Init+0xd4>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_GPIO_Init+0xd4>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000922:	f002 fac9 	bl	8002eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	480f      	ldr	r0, [pc, #60]	; (800097c <MX_GPIO_Init+0xd8>)
 800093e:	f002 f939 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000942:	2320      	movs	r3, #32
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f002 f92a 	bl	8002bb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	2028      	movs	r0, #40	; 0x28
 8000966:	f001 fe7e 	bl	8002666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800096a:	2028      	movs	r0, #40	; 0x28
 800096c:	f001 fe95 	bl	800269a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40021000 	.word	0x40021000
 800097c:	48000800 	.word	0x48000800

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <HAL_MspInit+0x44>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <HAL_MspInit+0x44>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6613      	str	r3, [r2, #96]	; 0x60
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <HAL_MspInit+0x44>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_MspInit+0x44>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x44>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6593      	str	r3, [r2, #88]	; 0x58
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x44>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009c2:	f002 fb59 	bl	8003078 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b0a0      	sub	sp, #128	; 0x80
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ec:	f107 0318 	add.w	r3, r7, #24
 80009f0:	2254      	movs	r2, #84	; 0x54
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f004 fec5 	bl	8005784 <memset>
  if(hadc->Instance==ADC1)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a02:	d177      	bne.n	8000af4 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a08:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	f107 0318 	add.w	r3, r7, #24
 8000a14:	4618      	mov	r0, r3
 8000a16:	f003 f86d 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a20:	f7ff ffae 	bl	8000980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a24:	4b35      	ldr	r3, [pc, #212]	; (8000afc <HAL_ADC_MspInit+0x128>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a28:	4a34      	ldr	r2, [pc, #208]	; (8000afc <HAL_ADC_MspInit+0x128>)
 8000a2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a30:	4b32      	ldr	r3, [pc, #200]	; (8000afc <HAL_ADC_MspInit+0x128>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <HAL_ADC_MspInit+0x128>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a40:	4a2e      	ldr	r2, [pc, #184]	; (8000afc <HAL_ADC_MspInit+0x128>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a48:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <HAL_ADC_MspInit+0x128>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <HAL_ADC_MspInit+0x128>)
 8000a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a58:	4a28      	ldr	r2, [pc, #160]	; (8000afc <HAL_ADC_MspInit+0x128>)
 8000a5a:	f043 0302 	orr.w	r3, r3, #2
 8000a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a60:	4b26      	ldr	r3, [pc, #152]	; (8000afc <HAL_ADC_MspInit+0x128>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a70:	2303      	movs	r3, #3
 8000a72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a82:	f002 f897 	bl	8002bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a86:	2301      	movs	r3, #1
 8000a88:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a96:	4619      	mov	r1, r3
 8000a98:	4819      	ldr	r0, [pc, #100]	; (8000b00 <HAL_ADC_MspInit+0x12c>)
 8000a9a:	f002 f88b 	bl	8002bb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <HAL_ADC_MspInit+0x130>)
 8000aa0:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <HAL_ADC_MspInit+0x134>)
 8000aa2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <HAL_ADC_MspInit+0x130>)
 8000aa6:	2205      	movs	r2, #5
 8000aa8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_ADC_MspInit+0x130>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <HAL_ADC_MspInit+0x130>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <HAL_ADC_MspInit+0x130>)
 8000ab8:	2280      	movs	r2, #128	; 0x80
 8000aba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_ADC_MspInit+0x130>)
 8000abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_ADC_MspInit+0x130>)
 8000ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aca:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_ADC_MspInit+0x130>)
 8000ace:	2220      	movs	r2, #32
 8000ad0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_ADC_MspInit+0x130>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ad8:	480a      	ldr	r0, [pc, #40]	; (8000b04 <HAL_ADC_MspInit+0x130>)
 8000ada:	f001 fdf9 	bl	80026d0 <HAL_DMA_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000ae4:	f7ff ff4c 	bl	8000980 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <HAL_ADC_MspInit+0x130>)
 8000aec:	655a      	str	r2, [r3, #84]	; 0x54
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <HAL_ADC_MspInit+0x130>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000af4:	bf00      	nop
 8000af6:	3780      	adds	r7, #128	; 0x80
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40021000 	.word	0x40021000
 8000b00:	48000400 	.word	0x48000400
 8000b04:	20000094 	.word	0x20000094
 8000b08:	40020008 	.word	0x40020008

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b09e      	sub	sp, #120	; 0x78
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	2254      	movs	r2, #84	; 0x54
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f004 fe29 	bl	8005784 <memset>
  if(huart->Instance==LPUART1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a1f      	ldr	r2, [pc, #124]	; (8000bb4 <HAL_UART_MspInit+0xa8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d136      	bne.n	8000baa <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 ffd3 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b54:	f7ff ff14 	bl	8000980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b5c:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b74:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b88:	230c      	movs	r3, #12
 8000b8a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b98:	230c      	movs	r3, #12
 8000b9a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba6:	f002 f805 	bl	8002bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3778      	adds	r7, #120	; 0x78
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40008000 	.word	0x40008000
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bcc:	d113      	bne.n	8000bf6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <HAL_TIM_Base_MspInit+0x44>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <HAL_TIM_Base_MspInit+0x44>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_TIM_Base_MspInit+0x44>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	201c      	movs	r0, #28
 8000bec:	f001 fd3b 	bl	8002666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bf0:	201c      	movs	r0, #28
 8000bf2:	f001 fd52 	bl	800269a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f8ac 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <DMA1_Channel1_IRQHandler+0x10>)
 8000c5e:	f001 fe5a 	bl	8002916 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000094 	.word	0x20000094

08000c6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <TIM2_IRQHandler+0x10>)
 8000c72:	f003 fa55 	bl	8004120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000188 	.word	0x20000188

08000c80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c88:	f002 f92e 	bl	8002ee8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb8:	f7ff ffea 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	; (8000cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <LoopForever+0xe>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	; (8000d00 <LoopForever+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f004 fd57 	bl	8005794 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce6:	f7ff fc15 	bl	8000514 <main>

08000cea <LoopForever>:

LoopForever:
    b LoopForever
 8000cea:	e7fe      	b.n	8000cea <LoopForever>
  ldr   r0, =_estack
 8000cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cf8:	08005844 	.word	0x08005844
  ldr r2, =_sbss
 8000cfc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d00:	20000430 	.word	0x20000430

08000d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC1_2_IRQHandler>

08000d06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f001 fc9d 	bl	8002650 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 f80e 	bl	8000d38 <HAL_InitTick>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	e001      	b.n	8000d2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d28:	f7ff fe30 	bl	800098c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]

}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_InitTick+0x68>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d022      	beq.n	8000d92 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_InitTick+0x6c>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <HAL_InitTick+0x68>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d58:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d60:	4618      	mov	r0, r3
 8000d62:	f001 fca8 	bl	80026b6 <HAL_SYSTICK_Config>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10f      	bne.n	8000d8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b0f      	cmp	r3, #15
 8000d70:	d809      	bhi.n	8000d86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d72:	2200      	movs	r2, #0
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d7a:	f001 fc74 	bl	8002666 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_InitTick+0x70>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	e007      	b.n	8000d96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	73fb      	strb	r3, [r7, #15]
 8000d8a:	e004      	b.n	8000d96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
 8000d90:	e001      	b.n	8000d96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_IncTick+0x1c>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_IncTick+0x20>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <HAL_IncTick+0x1c>)
 8000dbc:	6013      	str	r3, [r2, #0]
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	2000042c 	.word	0x2000042c
 8000dcc:	20000008 	.word	0x20000008

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2000042c 	.word	0x2000042c

08000de8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	609a      	str	r2, [r3, #8]
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	609a      	str	r2, [r3, #8]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	3360      	adds	r3, #96	; 0x60
 8000e62:	461a      	mov	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <LL_ADC_SetOffset+0x44>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e88:	bf00      	nop
 8000e8a:	371c      	adds	r7, #28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	03fff000 	.word	0x03fff000

08000e98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3360      	adds	r3, #96	; 0x60
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3360      	adds	r3, #96	; 0x60
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000eee:	bf00      	nop
 8000ef0:	371c      	adds	r7, #28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b087      	sub	sp, #28
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3360      	adds	r3, #96	; 0x60
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000f24:	bf00      	nop
 8000f26:	371c      	adds	r7, #28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	3360      	adds	r3, #96	; 0x60
 8000f40:	461a      	mov	r2, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	431a      	orrs	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000f5a:	bf00      	nop
 8000f5c:	371c      	adds	r7, #28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	615a      	str	r2, [r3, #20]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b087      	sub	sp, #28
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3330      	adds	r3, #48	; 0x30
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	4413      	add	r3, r2
 8000fd0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	f003 031f 	and.w	r3, r3, #31
 8000fdc:	211f      	movs	r1, #31
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	0e9b      	lsrs	r3, r3, #26
 8000fea:	f003 011f 	and.w	r1, r3, #31
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	f003 031f 	and.w	r3, r3, #31
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ffe:	bf00      	nop
 8001000:	371c      	adds	r7, #28
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800100a:	b480      	push	{r7}
 800100c:	b087      	sub	sp, #28
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3314      	adds	r3, #20
 800101a:	461a      	mov	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	0e5b      	lsrs	r3, r3, #25
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	0d1b      	lsrs	r3, r3, #20
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	2107      	movs	r1, #7
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	401a      	ands	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	0d1b      	lsrs	r3, r3, #20
 8001044:	f003 031f 	and.w	r3, r3, #31
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	431a      	orrs	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001054:	bf00      	nop
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001078:	43db      	mvns	r3, r3
 800107a:	401a      	ands	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0318 	and.w	r3, r3, #24
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001084:	40d9      	lsrs	r1, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	400b      	ands	r3, r1
 800108a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800108e:	431a      	orrs	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	0007ffff 	.word	0x0007ffff

080010a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 031f 	and.w	r3, r3, #31
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	6093      	str	r3, [r2, #8]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010fc:	d101      	bne.n	8001102 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001120:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001124:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800114c:	d101      	bne.n	8001152 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001170:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001174:	f043 0201 	orr.w	r2, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b01      	cmp	r3, #1
 800119a:	d101      	bne.n	80011a0 <LL_ADC_IsEnabled+0x18>
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <LL_ADC_IsEnabled+0x1a>
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011c2:	f043 0204 	orr.w	r2, r3, #4
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d101      	bne.n	80011ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0308 	and.w	r3, r3, #8
 800120c:	2b08      	cmp	r3, #8
 800120e:	d101      	bne.n	8001214 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e1a9      	b.n	8001592 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001248:	2b00      	cmp	r3, #0
 800124a:	d109      	bne.n	8001260 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fbc1 	bl	80009d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff3f 	bl	80010e8 <LL_ADC_IsDeepPowerDownEnabled>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff25 	bl	80010c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff5a 	bl	8001138 <LL_ADC_IsInternalRegulatorEnabled>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d115      	bne.n	80012b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff3e 	bl	8001110 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001294:	4b9c      	ldr	r3, [pc, #624]	; (8001508 <HAL_ADC_Init+0x2e4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	099b      	lsrs	r3, r3, #6
 800129a:	4a9c      	ldr	r2, [pc, #624]	; (800150c <HAL_ADC_Init+0x2e8>)
 800129c:	fba2 2303 	umull	r2, r3, r2, r3
 80012a0:	099b      	lsrs	r3, r3, #6
 80012a2:	3301      	adds	r3, #1
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012a8:	e002      	b.n	80012b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f9      	bne.n	80012aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff3c 	bl	8001138 <LL_ADC_IsInternalRegulatorEnabled>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10d      	bne.n	80012e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ca:	f043 0210 	orr.w	r2, r3, #16
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d6:	f043 0201 	orr.w	r2, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff75 	bl	80011d6 <LL_ADC_REG_IsConversionOngoing>
 80012ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 8142 	bne.w	8001580 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f040 813e 	bne.w	8001580 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001308:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800130c:	f043 0202 	orr.w	r2, r3, #2
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff35 	bl	8001188 <LL_ADC_IsEnabled>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d141      	bne.n	80013a8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800132c:	d004      	beq.n	8001338 <HAL_ADC_Init+0x114>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a77      	ldr	r2, [pc, #476]	; (8001510 <HAL_ADC_Init+0x2ec>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d10f      	bne.n	8001358 <HAL_ADC_Init+0x134>
 8001338:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800133c:	f7ff ff24 	bl	8001188 <LL_ADC_IsEnabled>
 8001340:	4604      	mov	r4, r0
 8001342:	4873      	ldr	r0, [pc, #460]	; (8001510 <HAL_ADC_Init+0x2ec>)
 8001344:	f7ff ff20 	bl	8001188 <LL_ADC_IsEnabled>
 8001348:	4603      	mov	r3, r0
 800134a:	4323      	orrs	r3, r4
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	e012      	b.n	800137e <HAL_ADC_Init+0x15a>
 8001358:	486e      	ldr	r0, [pc, #440]	; (8001514 <HAL_ADC_Init+0x2f0>)
 800135a:	f7ff ff15 	bl	8001188 <LL_ADC_IsEnabled>
 800135e:	4604      	mov	r4, r0
 8001360:	486d      	ldr	r0, [pc, #436]	; (8001518 <HAL_ADC_Init+0x2f4>)
 8001362:	f7ff ff11 	bl	8001188 <LL_ADC_IsEnabled>
 8001366:	4603      	mov	r3, r0
 8001368:	431c      	orrs	r4, r3
 800136a:	486c      	ldr	r0, [pc, #432]	; (800151c <HAL_ADC_Init+0x2f8>)
 800136c:	f7ff ff0c 	bl	8001188 <LL_ADC_IsEnabled>
 8001370:	4603      	mov	r3, r0
 8001372:	4323      	orrs	r3, r4
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf0c      	ite	eq
 8001378:	2301      	moveq	r3, #1
 800137a:	2300      	movne	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d012      	beq.n	80013a8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800138a:	d004      	beq.n	8001396 <HAL_ADC_Init+0x172>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a5f      	ldr	r2, [pc, #380]	; (8001510 <HAL_ADC_Init+0x2ec>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_ADC_Init+0x176>
 8001396:	4a62      	ldr	r2, [pc, #392]	; (8001520 <HAL_ADC_Init+0x2fc>)
 8001398:	e000      	b.n	800139c <HAL_ADC_Init+0x178>
 800139a:	4a62      	ldr	r2, [pc, #392]	; (8001524 <HAL_ADC_Init+0x300>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4619      	mov	r1, r3
 80013a2:	4610      	mov	r0, r2
 80013a4:	f7ff fd20 	bl	8000de8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7f5b      	ldrb	r3, [r3, #29]
 80013ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80013b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80013be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d106      	bne.n	80013e4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	3b01      	subs	r3, #1
 80013dc:	045b      	lsls	r3, r3, #17
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d009      	beq.n	8001400 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	4b48      	ldr	r3, [pc, #288]	; (8001528 <HAL_ADC_Init+0x304>)
 8001408:	4013      	ands	r3, r2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	69b9      	ldr	r1, [r7, #24]
 8001410:	430b      	orrs	r3, r1
 8001412:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fee4 	bl	80011fc <LL_ADC_INJ_IsConversionOngoing>
 8001434:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d17f      	bne.n	800153c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d17c      	bne.n	800153c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001446:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800144e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800145e:	f023 0302 	bic.w	r3, r3, #2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	69b9      	ldr	r1, [r7, #24]
 8001468:	430b      	orrs	r3, r1
 800146a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d017      	beq.n	80014a4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001482:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800148c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001490:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6911      	ldr	r1, [r2, #16]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	430b      	orrs	r3, r1
 800149e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80014a2:	e013      	b.n	80014cc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d12a      	bne.n	800152c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014e0:	f023 0304 	bic.w	r3, r3, #4
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014ec:	4311      	orrs	r1, r2
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80014f2:	4311      	orrs	r1, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014f8:	430a      	orrs	r2, r1
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 0201 	orr.w	r2, r2, #1
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	e019      	b.n	800153c <HAL_ADC_Init+0x318>
 8001508:	20000000 	.word	0x20000000
 800150c:	053e2d63 	.word	0x053e2d63
 8001510:	50000100 	.word	0x50000100
 8001514:	50000400 	.word	0x50000400
 8001518:	50000500 	.word	0x50000500
 800151c:	50000600 	.word	0x50000600
 8001520:	50000300 	.word	0x50000300
 8001524:	50000700 	.word	0x50000700
 8001528:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	691a      	ldr	r2, [r3, #16]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0201 	bic.w	r2, r2, #1
 800153a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d10c      	bne.n	800155e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f023 010f 	bic.w	r1, r3, #15
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	1e5a      	subs	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	631a      	str	r2, [r3, #48]	; 0x30
 800155c:	e007      	b.n	800156e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 020f 	bic.w	r2, r2, #15
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001572:	f023 0303 	bic.w	r3, r3, #3
 8001576:	f043 0201 	orr.w	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	65da      	str	r2, [r3, #92]	; 0x5c
 800157e:	e007      	b.n	8001590 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001584:	f043 0210 	orr.w	r2, r3, #16
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001590:	7ffb      	ldrb	r3, [r7, #31]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd90      	pop	{r4, r7, pc}
 800159a:	bf00      	nop

0800159c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015b0:	d004      	beq.n	80015bc <HAL_ADC_Start_DMA+0x20>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a5a      	ldr	r2, [pc, #360]	; (8001720 <HAL_ADC_Start_DMA+0x184>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d101      	bne.n	80015c0 <HAL_ADC_Start_DMA+0x24>
 80015bc:	4b59      	ldr	r3, [pc, #356]	; (8001724 <HAL_ADC_Start_DMA+0x188>)
 80015be:	e000      	b.n	80015c2 <HAL_ADC_Start_DMA+0x26>
 80015c0:	4b59      	ldr	r3, [pc, #356]	; (8001728 <HAL_ADC_Start_DMA+0x18c>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fd70 	bl	80010a8 <LL_ADC_GetMultimode>
 80015c8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fe01 	bl	80011d6 <LL_ADC_REG_IsConversionOngoing>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f040 809b 	bne.w	8001712 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_Start_DMA+0x4e>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e096      	b.n	8001718 <HAL_ADC_Start_DMA+0x17c>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a4d      	ldr	r2, [pc, #308]	; (800172c <HAL_ADC_Start_DMA+0x190>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d008      	beq.n	800160e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2b05      	cmp	r3, #5
 8001606:	d002      	beq.n	800160e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	2b09      	cmp	r3, #9
 800160c:	d17a      	bne.n	8001704 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f000 fcf6 	bl	8002000 <ADC_Enable>
 8001614:	4603      	mov	r3, r0
 8001616:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d16d      	bne.n	80016fa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a3a      	ldr	r2, [pc, #232]	; (8001720 <HAL_ADC_Start_DMA+0x184>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d009      	beq.n	8001650 <HAL_ADC_Start_DMA+0xb4>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a3b      	ldr	r2, [pc, #236]	; (8001730 <HAL_ADC_Start_DMA+0x194>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d002      	beq.n	800164c <HAL_ADC_Start_DMA+0xb0>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	e003      	b.n	8001654 <HAL_ADC_Start_DMA+0xb8>
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_ADC_Start_DMA+0x198>)
 800164e:	e001      	b.n	8001654 <HAL_ADC_Start_DMA+0xb8>
 8001650:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	4293      	cmp	r3, r2
 800165a:	d002      	beq.n	8001662 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d105      	bne.n	800166e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001666:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001672:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167e:	f023 0206 	bic.w	r2, r3, #6
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	661a      	str	r2, [r3, #96]	; 0x60
 8001686:	e002      	b.n	800168e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001692:	4a29      	ldr	r2, [pc, #164]	; (8001738 <HAL_ADC_Start_DMA+0x19c>)
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169a:	4a28      	ldr	r2, [pc, #160]	; (800173c <HAL_ADC_Start_DMA+0x1a0>)
 800169c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a2:	4a27      	ldr	r2, [pc, #156]	; (8001740 <HAL_ADC_Start_DMA+0x1a4>)
 80016a4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	221c      	movs	r2, #28
 80016ac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0210 	orr.w	r2, r2, #16
 80016c4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 0201 	orr.w	r2, r2, #1
 80016d4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3340      	adds	r3, #64	; 0x40
 80016e0:	4619      	mov	r1, r3
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f001 f89b 	bl	8002820 <HAL_DMA_Start_IT>
 80016ea:	4603      	mov	r3, r0
 80016ec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd5b 	bl	80011ae <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80016f8:	e00d      	b.n	8001716 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001702:	e008      	b.n	8001716 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001710:	e001      	b.n	8001716 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001712:	2302      	movs	r3, #2
 8001714:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001716:	7dfb      	ldrb	r3, [r7, #23]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	50000100 	.word	0x50000100
 8001724:	50000300 	.word	0x50000300
 8001728:	50000700 	.word	0x50000700
 800172c:	50000600 	.word	0x50000600
 8001730:	50000500 	.word	0x50000500
 8001734:	50000400 	.word	0x50000400
 8001738:	0800212d 	.word	0x0800212d
 800173c:	08002205 	.word	0x08002205
 8001740:	08002221 	.word	0x08002221

08001744 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0b6      	sub	sp, #216	; 0xd8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800179a:	2b01      	cmp	r3, #1
 800179c:	d102      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x24>
 800179e:	2302      	movs	r3, #2
 80017a0:	f000 bc13 	b.w	8001fca <HAL_ADC_ConfigChannel+0x84a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fd10 	bl	80011d6 <LL_ADC_REG_IsConversionOngoing>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 83f3 	bne.w	8001fa4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	6859      	ldr	r1, [r3, #4]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	f7ff fbf1 	bl	8000fb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fcfe 	bl	80011d6 <LL_ADC_REG_IsConversionOngoing>
 80017da:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fd0a 	bl	80011fc <LL_ADC_INJ_IsConversionOngoing>
 80017e8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f040 81d9 	bne.w	8001ba8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 81d4 	bne.w	8001ba8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001808:	d10f      	bne.n	800182a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2200      	movs	r2, #0
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff fbf8 	bl	800100a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fb9f 	bl	8000f66 <LL_ADC_SetSamplingTimeCommonConfig>
 8001828:	e00e      	b.n	8001848 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	6819      	ldr	r1, [r3, #0]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	461a      	mov	r2, r3
 8001838:	f7ff fbe7 	bl	800100a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fb8f 	bl	8000f66 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	08db      	lsrs	r3, r3, #3
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	2b04      	cmp	r3, #4
 8001868:	d022      	beq.n	80018b0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	6919      	ldr	r1, [r3, #16]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800187a:	f7ff fae9 	bl	8000e50 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	6919      	ldr	r1, [r3, #16]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	461a      	mov	r2, r3
 800188c:	f7ff fb35 	bl	8000efa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800189c:	2b01      	cmp	r3, #1
 800189e:	d102      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x126>
 80018a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018a4:	e000      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x128>
 80018a6:	2300      	movs	r3, #0
 80018a8:	461a      	mov	r2, r3
 80018aa:	f7ff fb41 	bl	8000f30 <LL_ADC_SetOffsetSaturation>
 80018ae:	e17b      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff faee 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10a      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x15c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fae3 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	0e9b      	lsrs	r3, r3, #26
 80018d6:	f003 021f 	and.w	r2, r3, #31
 80018da:	e01e      	b.n	800191a <HAL_ADC_ConfigChannel+0x19a>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fad8 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001902:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800190a:	2320      	movs	r3, #32
 800190c:	e004      	b.n	8001918 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800190e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001922:	2b00      	cmp	r3, #0
 8001924:	d105      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x1b2>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0e9b      	lsrs	r3, r3, #26
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	e018      	b.n	8001964 <HAL_ADC_ConfigChannel+0x1e4>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800194a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800194e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001956:	2320      	movs	r3, #32
 8001958:	e004      	b.n	8001964 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800195a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001964:	429a      	cmp	r2, r3
 8001966:	d106      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff faa7 	bl	8000ec4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2101      	movs	r1, #1
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fa8b 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10a      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x222>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fa80 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	0e9b      	lsrs	r3, r3, #26
 800199c:	f003 021f 	and.w	r2, r3, #31
 80019a0:	e01e      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x260>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2101      	movs	r1, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fa75 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019b8:	fa93 f3a3 	rbit	r3, r3
 80019bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80019c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80019c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80019d0:	2320      	movs	r3, #32
 80019d2:	e004      	b.n	80019de <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80019d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d105      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x278>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0e9b      	lsrs	r3, r3, #26
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	e018      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x2aa>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001a1c:	2320      	movs	r3, #32
 8001a1e:	e004      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d106      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	2101      	movs	r1, #1
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fa44 	bl	8000ec4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2102      	movs	r1, #2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fa28 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10a      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x2e8>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2102      	movs	r1, #2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fa1d 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	0e9b      	lsrs	r3, r3, #26
 8001a62:	f003 021f 	and.w	r2, r3, #31
 8001a66:	e01e      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x326>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fa12 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001a96:	2320      	movs	r3, #32
 8001a98:	e004      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001a9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d105      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x33e>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	0e9b      	lsrs	r3, r3, #26
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	e016      	b.n	8001aec <HAL_ADC_ConfigChannel+0x36c>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001aca:	fa93 f3a3 	rbit	r3, r3
 8001ace:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001ad0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ad2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001ade:	2320      	movs	r3, #32
 8001ae0:	e004      	b.n	8001aec <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d106      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2200      	movs	r2, #0
 8001af6:	2102      	movs	r1, #2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f9e3 	bl	8000ec4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2103      	movs	r1, #3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f9c7 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10a      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x3aa>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2103      	movs	r1, #3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f9bc 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	0e9b      	lsrs	r3, r3, #26
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	e017      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x3da>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2103      	movs	r1, #3
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff f9b1 	bl	8000e98 <LL_ADC_GetOffsetChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b44:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	e003      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x3f2>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	0e9b      	lsrs	r3, r3, #26
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	e011      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x416>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b82:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	e003      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b90:	fab3 f383 	clz	r3, r3
 8001b94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d106      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2103      	movs	r1, #3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f98e 	bl	8000ec4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff faeb 	bl	8001188 <LL_ADC_IsEnabled>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f040 813d 	bne.w	8001e34 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	6819      	ldr	r1, [r3, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f7ff fa4a 	bl	8001060 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4aa2      	ldr	r2, [pc, #648]	; (8001e5c <HAL_ADC_ConfigChannel+0x6dc>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	f040 812e 	bne.w	8001e34 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10b      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x480>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0e9b      	lsrs	r3, r3, #26
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	2b09      	cmp	r3, #9
 8001bf6:	bf94      	ite	ls
 8001bf8:	2301      	movls	r3, #1
 8001bfa:	2300      	movhi	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	e019      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x4b4>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c10:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001c18:	2320      	movs	r3, #32
 8001c1a:	e003      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	2b09      	cmp	r3, #9
 8001c2c:	bf94      	ite	ls
 8001c2e:	2301      	movls	r3, #1
 8001c30:	2300      	movhi	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d079      	beq.n	8001d2c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d107      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x4d4>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0e9b      	lsrs	r3, r3, #26
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	069b      	lsls	r3, r3, #26
 8001c4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c52:	e015      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x500>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c64:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	e003      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	069b      	lsls	r3, r3, #26
 8001c7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d109      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x520>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0e9b      	lsrs	r3, r3, #26
 8001c92:	3301      	adds	r3, #1
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2101      	movs	r1, #1
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	e017      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x550>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cb0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	e003      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	ea42 0103 	orr.w	r1, r2, r3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10a      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x576>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0e9b      	lsrs	r3, r3, #26
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	051b      	lsls	r3, r3, #20
 8001cf4:	e018      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x5a8>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001d0e:	2320      	movs	r3, #32
 8001d10:	e003      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	e07e      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d107      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x5c8>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0e9b      	lsrs	r3, r3, #26
 8001d3e:	3301      	adds	r3, #1
 8001d40:	069b      	lsls	r3, r3, #26
 8001d42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d46:	e015      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x5f4>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001d60:	2320      	movs	r3, #32
 8001d62:	e003      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	069b      	lsls	r3, r3, #26
 8001d70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x614>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0e9b      	lsrs	r3, r3, #26
 8001d86:	3301      	adds	r3, #1
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	e017      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x644>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	61fb      	str	r3, [r7, #28]
  return result;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001dac:	2320      	movs	r3, #32
 8001dae:	e003      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	ea42 0103 	orr.w	r1, r2, r3
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10d      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x670>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	0e9b      	lsrs	r3, r3, #26
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	3b1e      	subs	r3, #30
 8001de8:	051b      	lsls	r3, r3, #20
 8001dea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dee:	e01b      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x6a8>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	613b      	str	r3, [r7, #16]
  return result;
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001e08:	2320      	movs	r3, #32
 8001e0a:	e003      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	3301      	adds	r3, #1
 8001e16:	f003 021f 	and.w	r2, r3, #31
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	3b1e      	subs	r3, #30
 8001e22:	051b      	lsls	r3, r3, #20
 8001e24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e28:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f7ff f8eb 	bl	800100a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_ADC_ConfigChannel+0x6e0>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80be 	beq.w	8001fbe <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e4a:	d004      	beq.n	8001e56 <HAL_ADC_ConfigChannel+0x6d6>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_ADC_ConfigChannel+0x6e4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10a      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x6ec>
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <HAL_ADC_ConfigChannel+0x6e8>)
 8001e58:	e009      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x6ee>
 8001e5a:	bf00      	nop
 8001e5c:	407f0000 	.word	0x407f0000
 8001e60:	80080000 	.word	0x80080000
 8001e64:	50000100 	.word	0x50000100
 8001e68:	50000300 	.word	0x50000300
 8001e6c:	4b59      	ldr	r3, [pc, #356]	; (8001fd4 <HAL_ADC_ConfigChannel+0x854>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe ffe0 	bl	8000e34 <LL_ADC_GetCommonPathInternalCh>
 8001e74:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a56      	ldr	r2, [pc, #344]	; (8001fd8 <HAL_ADC_ConfigChannel+0x858>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d004      	beq.n	8001e8c <HAL_ADC_ConfigChannel+0x70c>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a55      	ldr	r2, [pc, #340]	; (8001fdc <HAL_ADC_ConfigChannel+0x85c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d13a      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d134      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ea0:	d005      	beq.n	8001eae <HAL_ADC_ConfigChannel+0x72e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a4e      	ldr	r2, [pc, #312]	; (8001fe0 <HAL_ADC_ConfigChannel+0x860>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	f040 8085 	bne.w	8001fb8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eb6:	d004      	beq.n	8001ec2 <HAL_ADC_ConfigChannel+0x742>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a49      	ldr	r2, [pc, #292]	; (8001fe4 <HAL_ADC_ConfigChannel+0x864>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x746>
 8001ec2:	4a49      	ldr	r2, [pc, #292]	; (8001fe8 <HAL_ADC_ConfigChannel+0x868>)
 8001ec4:	e000      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x748>
 8001ec6:	4a43      	ldr	r2, [pc, #268]	; (8001fd4 <HAL_ADC_ConfigChannel+0x854>)
 8001ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ecc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	f7fe ff9b 	bl	8000e0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ed8:	4b44      	ldr	r3, [pc, #272]	; (8001fec <HAL_ADC_ConfigChannel+0x86c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	4a44      	ldr	r2, [pc, #272]	; (8001ff0 <HAL_ADC_ConfigChannel+0x870>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ef2:	e002      	b.n	8001efa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f9      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f00:	e05a      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a3b      	ldr	r2, [pc, #236]	; (8001ff4 <HAL_ADC_ConfigChannel+0x874>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d125      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d11f      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a31      	ldr	r2, [pc, #196]	; (8001fe4 <HAL_ADC_ConfigChannel+0x864>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d104      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x7ac>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a34      	ldr	r2, [pc, #208]	; (8001ff8 <HAL_ADC_ConfigChannel+0x878>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d047      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f34:	d004      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x7c0>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a2a      	ldr	r2, [pc, #168]	; (8001fe4 <HAL_ADC_ConfigChannel+0x864>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x7c4>
 8001f40:	4a29      	ldr	r2, [pc, #164]	; (8001fe8 <HAL_ADC_ConfigChannel+0x868>)
 8001f42:	e000      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x7c6>
 8001f44:	4a23      	ldr	r2, [pc, #140]	; (8001fd4 <HAL_ADC_ConfigChannel+0x854>)
 8001f46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4610      	mov	r0, r2
 8001f52:	f7fe ff5c 	bl	8000e0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f56:	e031      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a27      	ldr	r2, [pc, #156]	; (8001ffc <HAL_ADC_ConfigChannel+0x87c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d12d      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d127      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <HAL_ADC_ConfigChannel+0x864>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d022      	beq.n	8001fbe <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f80:	d004      	beq.n	8001f8c <HAL_ADC_ConfigChannel+0x80c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_ADC_ConfigChannel+0x864>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x810>
 8001f8c:	4a16      	ldr	r2, [pc, #88]	; (8001fe8 <HAL_ADC_ConfigChannel+0x868>)
 8001f8e:	e000      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x812>
 8001f90:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <HAL_ADC_ConfigChannel+0x854>)
 8001f92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	f7fe ff36 	bl	8000e0e <LL_ADC_SetCommonPathInternalCh>
 8001fa2:	e00c      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa8:	f043 0220 	orr.w	r2, r3, #32
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001fb6:	e002      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fb8:	bf00      	nop
 8001fba:	e000      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fbc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001fc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	37d8      	adds	r7, #216	; 0xd8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	50000700 	.word	0x50000700
 8001fd8:	c3210000 	.word	0xc3210000
 8001fdc:	90c00010 	.word	0x90c00010
 8001fe0:	50000600 	.word	0x50000600
 8001fe4:	50000100 	.word	0x50000100
 8001fe8:	50000300 	.word	0x50000300
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	053e2d63 	.word	0x053e2d63
 8001ff4:	c7520000 	.word	0xc7520000
 8001ff8:	50000500 	.word	0x50000500
 8001ffc:	cb840000 	.word	0xcb840000

08002000 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff f8b9 	bl	8001188 <LL_ADC_IsEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d176      	bne.n	800210a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	4b3c      	ldr	r3, [pc, #240]	; (8002114 <ADC_Enable+0x114>)
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00d      	beq.n	8002046 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202e:	f043 0210 	orr.w	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e062      	b.n	800210c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff f888 	bl	8001160 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002058:	d004      	beq.n	8002064 <ADC_Enable+0x64>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a2e      	ldr	r2, [pc, #184]	; (8002118 <ADC_Enable+0x118>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <ADC_Enable+0x68>
 8002064:	4b2d      	ldr	r3, [pc, #180]	; (800211c <ADC_Enable+0x11c>)
 8002066:	e000      	b.n	800206a <ADC_Enable+0x6a>
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <ADC_Enable+0x120>)
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fee2 	bl	8000e34 <LL_ADC_GetCommonPathInternalCh>
 8002070:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002072:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002076:	2b00      	cmp	r3, #0
 8002078:	d013      	beq.n	80020a2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800207a:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <ADC_Enable+0x124>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	4a29      	ldr	r2, [pc, #164]	; (8002128 <ADC_Enable+0x128>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	099b      	lsrs	r3, r3, #6
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002094:	e002      	b.n	800209c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3b01      	subs	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f9      	bne.n	8002096 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80020a2:	f7fe fe95 	bl	8000dd0 <HAL_GetTick>
 80020a6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020a8:	e028      	b.n	80020fc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f86a 	bl	8001188 <LL_ADC_IsEnabled>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d104      	bne.n	80020c4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff f84e 	bl	8001160 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020c4:	f7fe fe84 	bl	8000dd0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d914      	bls.n	80020fc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d00d      	beq.n	80020fc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e4:	f043 0210 	orr.w	r2, r3, #16
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f0:	f043 0201 	orr.w	r2, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e007      	b.n	800210c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b01      	cmp	r3, #1
 8002108:	d1cf      	bne.n	80020aa <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	8000003f 	.word	0x8000003f
 8002118:	50000100 	.word	0x50000100
 800211c:	50000300 	.word	0x50000300
 8002120:	50000700 	.word	0x50000700
 8002124:	20000000 	.word	0x20000000
 8002128:	053e2d63 	.word	0x053e2d63

0800212c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002142:	2b00      	cmp	r3, #0
 8002144:	d14b      	bne.n	80021de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d021      	beq.n	80021a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe ff11 	bl	8000f8c <LL_ADC_REG_IsTriggerSourceSWStart>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d032      	beq.n	80021d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d12b      	bne.n	80021d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d11f      	bne.n	80021d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219a:	f043 0201 	orr.w	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80021a2:	e018      	b.n	80021d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d111      	bne.n	80021d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d105      	bne.n	80021d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f7ff fab4 	bl	8001744 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021dc:	e00e      	b.n	80021fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f7ff fabe 	bl	800176c <HAL_ADC_ErrorCallback>
}
 80021f0:	e004      	b.n	80021fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f7ff faa0 	bl	8001758 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223e:	f043 0204 	orr.w	r2, r3, #4
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f7ff fa90 	bl	800176c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <LL_ADC_IsEnabled>:
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <LL_ADC_IsEnabled+0x18>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <LL_ADC_IsEnabled+0x1a>
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_ADC_REG_IsConversionOngoing>:
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b04      	cmp	r3, #4
 800228c:	d101      	bne.n	8002292 <LL_ADC_REG_IsConversionOngoing+0x18>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b0a1      	sub	sp, #132	; 0x84
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e0e7      	b.n	800248e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80022c6:	2300      	movs	r3, #0
 80022c8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80022ca:	2300      	movs	r3, #0
 80022cc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022d6:	d102      	bne.n	80022de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80022d8:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	e009      	b.n	80022f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a6e      	ldr	r2, [pc, #440]	; (800249c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d102      	bne.n	80022ee <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80022e8:	4b6d      	ldr	r3, [pc, #436]	; (80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	e001      	b.n	80022f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10b      	bne.n	8002310 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	f043 0220 	orr.w	r2, r3, #32
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0be      	b.n	800248e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ffb1 	bl	800227a <LL_ADC_REG_IsConversionOngoing>
 8002318:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ffab 	bl	800227a <LL_ADC_REG_IsConversionOngoing>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 80a0 	bne.w	800246c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800232c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 809c 	bne.w	800246c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800233c:	d004      	beq.n	8002348 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a55      	ldr	r2, [pc, #340]	; (8002498 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002348:	4b56      	ldr	r3, [pc, #344]	; (80024a4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800234a:	e000      	b.n	800234e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800234c:	4b56      	ldr	r3, [pc, #344]	; (80024a8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800234e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d04b      	beq.n	80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800236a:	035b      	lsls	r3, r3, #13
 800236c:	430b      	orrs	r3, r1
 800236e:	431a      	orrs	r2, r3
 8002370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002372:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800237c:	d004      	beq.n	8002388 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a45      	ldr	r2, [pc, #276]	; (8002498 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d10f      	bne.n	80023a8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002388:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800238c:	f7ff ff62 	bl	8002254 <LL_ADC_IsEnabled>
 8002390:	4604      	mov	r4, r0
 8002392:	4841      	ldr	r0, [pc, #260]	; (8002498 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002394:	f7ff ff5e 	bl	8002254 <LL_ADC_IsEnabled>
 8002398:	4603      	mov	r3, r0
 800239a:	4323      	orrs	r3, r4
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e012      	b.n	80023ce <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80023a8:	483c      	ldr	r0, [pc, #240]	; (800249c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80023aa:	f7ff ff53 	bl	8002254 <LL_ADC_IsEnabled>
 80023ae:	4604      	mov	r4, r0
 80023b0:	483b      	ldr	r0, [pc, #236]	; (80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80023b2:	f7ff ff4f 	bl	8002254 <LL_ADC_IsEnabled>
 80023b6:	4603      	mov	r3, r0
 80023b8:	431c      	orrs	r4, r3
 80023ba:	483c      	ldr	r0, [pc, #240]	; (80024ac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80023bc:	f7ff ff4a 	bl	8002254 <LL_ADC_IsEnabled>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4323      	orrs	r3, r4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d056      	beq.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023da:	f023 030f 	bic.w	r3, r3, #15
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	6811      	ldr	r1, [r2, #0]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	6892      	ldr	r2, [r2, #8]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	431a      	orrs	r2, r3
 80023ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ec:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023ee:	e047      	b.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023fa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002404:	d004      	beq.n	8002410 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a23      	ldr	r2, [pc, #140]	; (8002498 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d10f      	bne.n	8002430 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002410:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002414:	f7ff ff1e 	bl	8002254 <LL_ADC_IsEnabled>
 8002418:	4604      	mov	r4, r0
 800241a:	481f      	ldr	r0, [pc, #124]	; (8002498 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800241c:	f7ff ff1a 	bl	8002254 <LL_ADC_IsEnabled>
 8002420:	4603      	mov	r3, r0
 8002422:	4323      	orrs	r3, r4
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	e012      	b.n	8002456 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002430:	481a      	ldr	r0, [pc, #104]	; (800249c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002432:	f7ff ff0f 	bl	8002254 <LL_ADC_IsEnabled>
 8002436:	4604      	mov	r4, r0
 8002438:	4819      	ldr	r0, [pc, #100]	; (80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800243a:	f7ff ff0b 	bl	8002254 <LL_ADC_IsEnabled>
 800243e:	4603      	mov	r3, r0
 8002440:	431c      	orrs	r4, r3
 8002442:	481a      	ldr	r0, [pc, #104]	; (80024ac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002444:	f7ff ff06 	bl	8002254 <LL_ADC_IsEnabled>
 8002448:	4603      	mov	r3, r0
 800244a:	4323      	orrs	r3, r4
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d012      	beq.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800245a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002462:	f023 030f 	bic.w	r3, r3, #15
 8002466:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002468:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800246a:	e009      	b.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800247e:	e000      	b.n	8002482 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002480:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800248a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800248e:	4618      	mov	r0, r3
 8002490:	3784      	adds	r7, #132	; 0x84
 8002492:	46bd      	mov	sp, r7
 8002494:	bd90      	pop	{r4, r7, pc}
 8002496:	bf00      	nop
 8002498:	50000100 	.word	0x50000100
 800249c:	50000400 	.word	0x50000400
 80024a0:	50000500 	.word	0x50000500
 80024a4:	50000300 	.word	0x50000300
 80024a8:	50000700 	.word	0x50000700
 80024ac:	50000600 	.word	0x50000600

080024b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <__NVIC_SetPriorityGrouping+0x44>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024cc:	4013      	ands	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024e2:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <__NVIC_SetPriorityGrouping+0x44>)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	60d3      	str	r3, [r2, #12]
}
 80024e8:	bf00      	nop
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024fc:	4b04      	ldr	r3, [pc, #16]	; (8002510 <__NVIC_GetPriorityGrouping+0x18>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	f003 0307 	and.w	r3, r3, #7
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	2b00      	cmp	r3, #0
 8002524:	db0b      	blt.n	800253e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	4907      	ldr	r1, [pc, #28]	; (800254c <__NVIC_EnableIRQ+0x38>)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	2001      	movs	r0, #1
 8002536:	fa00 f202 	lsl.w	r2, r0, r2
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000e100 	.word	0xe000e100

08002550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	2b00      	cmp	r3, #0
 8002562:	db0a      	blt.n	800257a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	490c      	ldr	r1, [pc, #48]	; (800259c <__NVIC_SetPriority+0x4c>)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	0112      	lsls	r2, r2, #4
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	440b      	add	r3, r1
 8002574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002578:	e00a      	b.n	8002590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4908      	ldr	r1, [pc, #32]	; (80025a0 <__NVIC_SetPriority+0x50>)
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	3b04      	subs	r3, #4
 8002588:	0112      	lsls	r2, r2, #4
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	440b      	add	r3, r1
 800258e:	761a      	strb	r2, [r3, #24]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000e100 	.word	0xe000e100
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f1c3 0307 	rsb	r3, r3, #7
 80025be:	2b04      	cmp	r3, #4
 80025c0:	bf28      	it	cs
 80025c2:	2304      	movcs	r3, #4
 80025c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3304      	adds	r3, #4
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d902      	bls.n	80025d4 <NVIC_EncodePriority+0x30>
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3b03      	subs	r3, #3
 80025d2:	e000      	b.n	80025d6 <NVIC_EncodePriority+0x32>
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43da      	mvns	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	401a      	ands	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	43d9      	mvns	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	4313      	orrs	r3, r2
         );
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3724      	adds	r7, #36	; 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3b01      	subs	r3, #1
 8002618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800261c:	d301      	bcc.n	8002622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800261e:	2301      	movs	r3, #1
 8002620:	e00f      	b.n	8002642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <SysTick_Config+0x40>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800262a:	210f      	movs	r1, #15
 800262c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002630:	f7ff ff8e 	bl	8002550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <SysTick_Config+0x40>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <SysTick_Config+0x40>)
 800263c:	2207      	movs	r2, #7
 800263e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	e000e010 	.word	0xe000e010

08002650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ff29 	bl	80024b0 <__NVIC_SetPriorityGrouping>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b086      	sub	sp, #24
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002674:	f7ff ff40 	bl	80024f8 <__NVIC_GetPriorityGrouping>
 8002678:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff ff90 	bl	80025a4 <NVIC_EncodePriority>
 8002684:	4602      	mov	r2, r0
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff5f 	bl	8002550 <__NVIC_SetPriority>
}
 8002692:	bf00      	nop
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff33 	bl	8002514 <__NVIC_EnableIRQ>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff ffa4 	bl	800260c <SysTick_Config>
 80026c4:	4603      	mov	r3, r0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e08d      	b.n	80027fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	4b47      	ldr	r3, [pc, #284]	; (8002808 <HAL_DMA_Init+0x138>)
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d80f      	bhi.n	800270e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	4b45      	ldr	r3, [pc, #276]	; (800280c <HAL_DMA_Init+0x13c>)
 80026f6:	4413      	add	r3, r2
 80026f8:	4a45      	ldr	r2, [pc, #276]	; (8002810 <HAL_DMA_Init+0x140>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	009a      	lsls	r2, r3, #2
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a42      	ldr	r2, [pc, #264]	; (8002814 <HAL_DMA_Init+0x144>)
 800270a:	641a      	str	r2, [r3, #64]	; 0x40
 800270c:	e00e      	b.n	800272c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	4b40      	ldr	r3, [pc, #256]	; (8002818 <HAL_DMA_Init+0x148>)
 8002716:	4413      	add	r3, r2
 8002718:	4a3d      	ldr	r2, [pc, #244]	; (8002810 <HAL_DMA_Init+0x140>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	009a      	lsls	r2, r3, #2
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a3c      	ldr	r2, [pc, #240]	; (800281c <HAL_DMA_Init+0x14c>)
 800272a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002746:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f9b6 	bl	8002af0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800278c:	d102      	bne.n	8002794 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d010      	beq.n	80027d4 <HAL_DMA_Init+0x104>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d80c      	bhi.n	80027d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f9d6 	bl	8002b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	e008      	b.n	80027e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40020407 	.word	0x40020407
 800280c:	bffdfff8 	.word	0xbffdfff8
 8002810:	cccccccd 	.word	0xcccccccd
 8002814:	40020000 	.word	0x40020000
 8002818:	bffdfbf8 	.word	0xbffdfbf8
 800281c:	40020400 	.word	0x40020400

08002820 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_DMA_Start_IT+0x20>
 800283c:	2302      	movs	r3, #2
 800283e:	e066      	b.n	800290e <HAL_DMA_Start_IT+0xee>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d155      	bne.n	8002900 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f8fb 	bl	8002a74 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 020e 	orr.w	r2, r2, #14
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e00f      	b.n	80028b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0204 	bic.w	r2, r2, #4
 80028a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 020a 	orr.w	r2, r2, #10
 80028b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d007      	beq.n	80028ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	e005      	b.n	800290c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002908:	2302      	movs	r3, #2
 800290a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800290c:	7dfb      	ldrb	r3, [r7, #23]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	2204      	movs	r2, #4
 8002938:	409a      	lsls	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d026      	beq.n	8002990 <HAL_DMA_IRQHandler+0x7a>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d021      	beq.n	8002990 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d107      	bne.n	800296a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0204 	bic.w	r2, r2, #4
 8002968:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f003 021f 	and.w	r2, r3, #31
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2104      	movs	r1, #4
 8002978:	fa01 f202 	lsl.w	r2, r1, r2
 800297c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	2b00      	cmp	r3, #0
 8002984:	d071      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800298e:	e06c      	b.n	8002a6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2202      	movs	r2, #2
 800299a:	409a      	lsls	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d02e      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d029      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10b      	bne.n	80029d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 020a 	bic.w	r2, r2, #10
 80029ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	f003 021f 	and.w	r2, r3, #31
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	2102      	movs	r1, #2
 80029e2:	fa01 f202 	lsl.w	r2, r1, r2
 80029e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d038      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a00:	e033      	b.n	8002a6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d02a      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d025      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 020e 	bic.w	r2, r2, #14
 8002a2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a6a:	bf00      	nop
 8002a6c:	bf00      	nop
}
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a8a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d004      	beq.n	8002a9e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a9c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f003 021f 	and.w	r2, r3, #31
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2101      	movs	r1, #1
 8002aac:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b10      	cmp	r3, #16
 8002ac0:	d108      	bne.n	8002ad4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ad2:	e007      	b.n	8002ae4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d802      	bhi.n	8002b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e001      	b.n	8002b0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002b0c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	3b08      	subs	r3, #8
 8002b1a:	4a12      	ldr	r2, [pc, #72]	; (8002b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	089b      	lsrs	r3, r3, #2
 8002b2a:	009a      	lsls	r2, r3, #2
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a0b      	ldr	r2, [pc, #44]	; (8002b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002b3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	2201      	movs	r2, #1
 8002b44:	409a      	lsls	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40020407 	.word	0x40020407
 8002b5c:	40020800 	.word	0x40020800
 8002b60:	40020820 	.word	0x40020820
 8002b64:	cccccccd 	.word	0xcccccccd
 8002b68:	40020880 	.word	0x40020880

08002b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	461a      	mov	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002b8e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	2201      	movs	r2, #1
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	1000823f 	.word	0x1000823f
 8002bb0:	40020940 	.word	0x40020940

08002bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bc2:	e15a      	b.n	8002e7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 814c 	beq.w	8002e74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d005      	beq.n	8002bf4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d130      	bne.n	8002c56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	f003 0201 	and.w	r2, r3, #1
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d017      	beq.n	8002c92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d123      	bne.n	8002ce6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	08da      	lsrs	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3208      	adds	r2, #8
 8002ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	08da      	lsrs	r2, r3, #3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3208      	adds	r2, #8
 8002ce0:	6939      	ldr	r1, [r7, #16]
 8002ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0203 	and.w	r2, r3, #3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80a6 	beq.w	8002e74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d28:	4b5b      	ldr	r3, [pc, #364]	; (8002e98 <HAL_GPIO_Init+0x2e4>)
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2c:	4a5a      	ldr	r2, [pc, #360]	; (8002e98 <HAL_GPIO_Init+0x2e4>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6613      	str	r3, [r2, #96]	; 0x60
 8002d34:	4b58      	ldr	r3, [pc, #352]	; (8002e98 <HAL_GPIO_Init+0x2e4>)
 8002d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d40:	4a56      	ldr	r2, [pc, #344]	; (8002e9c <HAL_GPIO_Init+0x2e8>)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	3302      	adds	r3, #2
 8002d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	220f      	movs	r2, #15
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4013      	ands	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d6a:	d01f      	beq.n	8002dac <HAL_GPIO_Init+0x1f8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a4c      	ldr	r2, [pc, #304]	; (8002ea0 <HAL_GPIO_Init+0x2ec>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d019      	beq.n	8002da8 <HAL_GPIO_Init+0x1f4>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a4b      	ldr	r2, [pc, #300]	; (8002ea4 <HAL_GPIO_Init+0x2f0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d013      	beq.n	8002da4 <HAL_GPIO_Init+0x1f0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a4a      	ldr	r2, [pc, #296]	; (8002ea8 <HAL_GPIO_Init+0x2f4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00d      	beq.n	8002da0 <HAL_GPIO_Init+0x1ec>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a49      	ldr	r2, [pc, #292]	; (8002eac <HAL_GPIO_Init+0x2f8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d007      	beq.n	8002d9c <HAL_GPIO_Init+0x1e8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a48      	ldr	r2, [pc, #288]	; (8002eb0 <HAL_GPIO_Init+0x2fc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_GPIO_Init+0x1e4>
 8002d94:	2305      	movs	r3, #5
 8002d96:	e00a      	b.n	8002dae <HAL_GPIO_Init+0x1fa>
 8002d98:	2306      	movs	r3, #6
 8002d9a:	e008      	b.n	8002dae <HAL_GPIO_Init+0x1fa>
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	e006      	b.n	8002dae <HAL_GPIO_Init+0x1fa>
 8002da0:	2303      	movs	r3, #3
 8002da2:	e004      	b.n	8002dae <HAL_GPIO_Init+0x1fa>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e002      	b.n	8002dae <HAL_GPIO_Init+0x1fa>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_GPIO_Init+0x1fa>
 8002dac:	2300      	movs	r3, #0
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	f002 0203 	and.w	r2, r2, #3
 8002db4:	0092      	lsls	r2, r2, #2
 8002db6:	4093      	lsls	r3, r2
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dbe:	4937      	ldr	r1, [pc, #220]	; (8002e9c <HAL_GPIO_Init+0x2e8>)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dcc:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <HAL_GPIO_Init+0x300>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002df0:	4a30      	ldr	r2, [pc, #192]	; (8002eb4 <HAL_GPIO_Init+0x300>)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002df6:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <HAL_GPIO_Init+0x300>)
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e1a:	4a26      	ldr	r2, [pc, #152]	; (8002eb4 <HAL_GPIO_Init+0x300>)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e20:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <HAL_GPIO_Init+0x300>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e44:	4a1b      	ldr	r2, [pc, #108]	; (8002eb4 <HAL_GPIO_Init+0x300>)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_GPIO_Init+0x300>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e6e:	4a11      	ldr	r2, [pc, #68]	; (8002eb4 <HAL_GPIO_Init+0x300>)
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	3301      	adds	r3, #1
 8002e78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f47f ae9d 	bne.w	8002bc4 <HAL_GPIO_Init+0x10>
  }
}
 8002e8a:	bf00      	nop
 8002e8c:	bf00      	nop
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40010000 	.word	0x40010000
 8002ea0:	48000400 	.word	0x48000400
 8002ea4:	48000800 	.word	0x48000800
 8002ea8:	48000c00 	.word	0x48000c00
 8002eac:	48001000 	.word	0x48001000
 8002eb0:	48001400 	.word	0x48001400
 8002eb4:	40010400 	.word	0x40010400

08002eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ec8:	787b      	ldrb	r3, [r7, #1]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ece:	887a      	ldrh	r2, [r7, #2]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ed4:	e002      	b.n	8002edc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ed6:	887a      	ldrh	r2, [r7, #2]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d006      	beq.n	8002f0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002efe:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f806 	bl	8002f18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40010400 	.word	0x40010400

08002f18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d141      	bne.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f3e:	4b4b      	ldr	r3, [pc, #300]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4a:	d131      	bne.n	8002fb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f4c:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f52:	4a46      	ldr	r2, [pc, #280]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f5c:	4b43      	ldr	r3, [pc, #268]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f64:	4a41      	ldr	r2, [pc, #260]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f6c:	4b40      	ldr	r3, [pc, #256]	; (8003070 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2232      	movs	r2, #50	; 0x32
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	4a3f      	ldr	r2, [pc, #252]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	0c9b      	lsrs	r3, r3, #18
 8002f7e:	3301      	adds	r3, #1
 8002f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f82:	e002      	b.n	8002f8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f8a:	4b38      	ldr	r3, [pc, #224]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f96:	d102      	bne.n	8002f9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f2      	bne.n	8002f84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f9e:	4b33      	ldr	r3, [pc, #204]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002faa:	d158      	bne.n	800305e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e057      	b.n	8003060 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fb0:	4b2e      	ldr	r3, [pc, #184]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb6:	4a2d      	ldr	r2, [pc, #180]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fc0:	e04d      	b.n	800305e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc8:	d141      	bne.n	800304e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fca:	4b28      	ldr	r3, [pc, #160]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd6:	d131      	bne.n	800303c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fde:	4a23      	ldr	r2, [pc, #140]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fe8:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ff0:	4a1e      	ldr	r2, [pc, #120]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ff8:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2232      	movs	r2, #50	; 0x32
 8002ffe:	fb02 f303 	mul.w	r3, r2, r3
 8003002:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	0c9b      	lsrs	r3, r3, #18
 800300a:	3301      	adds	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800300e:	e002      	b.n	8003016 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3b01      	subs	r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003022:	d102      	bne.n	800302a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f2      	bne.n	8003010 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003036:	d112      	bne.n	800305e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e011      	b.n	8003060 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003048:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800304c:	e007      	b.n	800305e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800304e:	4b07      	ldr	r3, [pc, #28]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003056:	4a05      	ldr	r2, [pc, #20]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003058:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800305c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	40007000 	.word	0x40007000
 8003070:	20000000 	.word	0x20000000
 8003074:	431bde83 	.word	0x431bde83

08003078 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a04      	ldr	r2, [pc, #16]	; (8003094 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003086:	6093      	str	r3, [r2, #8]
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40007000 	.word	0x40007000

08003098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e2fe      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d075      	beq.n	80031a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030b6:	4b97      	ldr	r3, [pc, #604]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030c0:	4b94      	ldr	r3, [pc, #592]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b0c      	cmp	r3, #12
 80030ce:	d102      	bne.n	80030d6 <HAL_RCC_OscConfig+0x3e>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d002      	beq.n	80030dc <HAL_RCC_OscConfig+0x44>
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d10b      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	4b8d      	ldr	r3, [pc, #564]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d05b      	beq.n	80031a0 <HAL_RCC_OscConfig+0x108>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d157      	bne.n	80031a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e2d9      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fc:	d106      	bne.n	800310c <HAL_RCC_OscConfig+0x74>
 80030fe:	4b85      	ldr	r3, [pc, #532]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a84      	ldr	r2, [pc, #528]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e01d      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x98>
 8003116:	4b7f      	ldr	r3, [pc, #508]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a7e      	ldr	r2, [pc, #504]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 800311c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b7c      	ldr	r3, [pc, #496]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a7b      	ldr	r2, [pc, #492]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 8003130:	4b78      	ldr	r3, [pc, #480]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a77      	ldr	r2, [pc, #476]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b75      	ldr	r3, [pc, #468]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a74      	ldr	r2, [pc, #464]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fd fe3e 	bl	8000dd0 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003158:	f7fd fe3a 	bl	8000dd0 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e29e      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800316a:	4b6a      	ldr	r3, [pc, #424]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0xc0>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fd fe2a 	bl	8000dd0 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003180:	f7fd fe26 	bl	8000dd0 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	; 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e28a      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003192:	4b60      	ldr	r3, [pc, #384]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0xe8>
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d075      	beq.n	800329a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ae:	4b59      	ldr	r3, [pc, #356]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031b8:	4b56      	ldr	r3, [pc, #344]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b0c      	cmp	r3, #12
 80031c6:	d102      	bne.n	80031ce <HAL_RCC_OscConfig+0x136>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d002      	beq.n	80031d4 <HAL_RCC_OscConfig+0x13c>
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d11f      	bne.n	8003214 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d4:	4b4f      	ldr	r3, [pc, #316]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_OscConfig+0x154>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e25d      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b49      	ldr	r3, [pc, #292]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	4946      	ldr	r1, [pc, #280]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003200:	4b45      	ldr	r3, [pc, #276]	; (8003318 <HAL_RCC_OscConfig+0x280>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd fd97 	bl	8000d38 <HAL_InitTick>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d043      	beq.n	8003298 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e249      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d023      	beq.n	8003264 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800321c:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a3c      	ldr	r2, [pc, #240]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fd fdd2 	bl	8000dd0 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003230:	f7fd fdce 	bl	8000dd0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e232      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003242:	4b34      	ldr	r3, [pc, #208]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b31      	ldr	r3, [pc, #196]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	061b      	lsls	r3, r3, #24
 800325c:	492d      	ldr	r1, [pc, #180]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
 8003262:	e01a      	b.n	800329a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003264:	4b2b      	ldr	r3, [pc, #172]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2a      	ldr	r2, [pc, #168]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 800326a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800326e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fd fdae 	bl	8000dd0 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003278:	f7fd fdaa 	bl	8000dd0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e20e      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800328a:	4b22      	ldr	r3, [pc, #136]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x1e0>
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003298:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d041      	beq.n	800332a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d01c      	beq.n	80032e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ae:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 80032b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b4:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7fd fd87 	bl	8000dd0 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c6:	f7fd fd83 	bl	8000dd0 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e1e7      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 80032da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0ef      	beq.n	80032c6 <HAL_RCC_OscConfig+0x22e>
 80032e6:	e020      	b.n	800332a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e8:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 80032ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ee:	4a09      	ldr	r2, [pc, #36]	; (8003314 <HAL_RCC_OscConfig+0x27c>)
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fd fd6a 	bl	8000dd0 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032fe:	e00d      	b.n	800331c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003300:	f7fd fd66 	bl	8000dd0 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d906      	bls.n	800331c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e1ca      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
 8003318:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800331c:	4b8c      	ldr	r3, [pc, #560]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 800331e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1ea      	bne.n	8003300 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 80a6 	beq.w	8003484 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003338:	2300      	movs	r3, #0
 800333a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800333c:	4b84      	ldr	r3, [pc, #528]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_OscConfig+0x2b4>
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x2b6>
 800334c:	2300      	movs	r3, #0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00d      	beq.n	800336e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	4b7f      	ldr	r3, [pc, #508]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	4a7e      	ldr	r2, [pc, #504]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335c:	6593      	str	r3, [r2, #88]	; 0x58
 800335e:	4b7c      	ldr	r3, [pc, #496]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800336a:	2301      	movs	r3, #1
 800336c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800336e:	4b79      	ldr	r3, [pc, #484]	; (8003554 <HAL_RCC_OscConfig+0x4bc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d118      	bne.n	80033ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800337a:	4b76      	ldr	r3, [pc, #472]	; (8003554 <HAL_RCC_OscConfig+0x4bc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a75      	ldr	r2, [pc, #468]	; (8003554 <HAL_RCC_OscConfig+0x4bc>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003386:	f7fd fd23 	bl	8000dd0 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338e:	f7fd fd1f 	bl	8000dd0 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e183      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a0:	4b6c      	ldr	r3, [pc, #432]	; (8003554 <HAL_RCC_OscConfig+0x4bc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d108      	bne.n	80033c6 <HAL_RCC_OscConfig+0x32e>
 80033b4:	4b66      	ldr	r3, [pc, #408]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	4a65      	ldr	r2, [pc, #404]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033c4:	e024      	b.n	8003410 <HAL_RCC_OscConfig+0x378>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d110      	bne.n	80033f0 <HAL_RCC_OscConfig+0x358>
 80033ce:	4b60      	ldr	r3, [pc, #384]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	4a5e      	ldr	r2, [pc, #376]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033d6:	f043 0304 	orr.w	r3, r3, #4
 80033da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033de:	4b5c      	ldr	r3, [pc, #368]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e4:	4a5a      	ldr	r2, [pc, #360]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033ee:	e00f      	b.n	8003410 <HAL_RCC_OscConfig+0x378>
 80033f0:	4b57      	ldr	r3, [pc, #348]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	4a56      	ldr	r2, [pc, #344]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003400:	4b53      	ldr	r3, [pc, #332]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	4a52      	ldr	r2, [pc, #328]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003408:	f023 0304 	bic.w	r3, r3, #4
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d016      	beq.n	8003446 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fd fcda 	bl	8000dd0 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341e:	e00a      	b.n	8003436 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7fd fcd6 	bl	8000dd0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e138      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003436:	4b46      	ldr	r3, [pc, #280]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0ed      	beq.n	8003420 <HAL_RCC_OscConfig+0x388>
 8003444:	e015      	b.n	8003472 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7fd fcc3 	bl	8000dd0 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800344c:	e00a      	b.n	8003464 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344e:	f7fd fcbf 	bl	8000dd0 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	; 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e121      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003464:	4b3a      	ldr	r3, [pc, #232]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1ed      	bne.n	800344e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003472:	7ffb      	ldrb	r3, [r7, #31]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003478:	4b35      	ldr	r3, [pc, #212]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	4a34      	ldr	r2, [pc, #208]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003482:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d03c      	beq.n	800350a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01c      	beq.n	80034d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003498:	4b2d      	ldr	r3, [pc, #180]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 800349a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800349e:	4a2c      	ldr	r2, [pc, #176]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7fd fc92 	bl	8000dd0 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034b0:	f7fd fc8e 	bl	8000dd0 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0f2      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034c2:	4b23      	ldr	r3, [pc, #140]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80034c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0ef      	beq.n	80034b0 <HAL_RCC_OscConfig+0x418>
 80034d0:	e01b      	b.n	800350a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034d2:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80034d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034d8:	4a1d      	ldr	r2, [pc, #116]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e2:	f7fd fc75 	bl	8000dd0 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ea:	f7fd fc71 	bl	8000dd0 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0d5      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034fc:	4b14      	ldr	r3, [pc, #80]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 80034fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1ef      	bne.n	80034ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80c9 	beq.w	80036a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b0c      	cmp	r3, #12
 800351e:	f000 8083 	beq.w	8003628 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d15e      	bne.n	80035e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a08      	ldr	r2, [pc, #32]	; (8003550 <HAL_RCC_OscConfig+0x4b8>)
 8003530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7fd fc4b 	bl	8000dd0 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800353c:	e00c      	b.n	8003558 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353e:	f7fd fc47 	bl	8000dd0 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d905      	bls.n	8003558 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e0ab      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
 8003550:	40021000 	.word	0x40021000
 8003554:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003558:	4b55      	ldr	r3, [pc, #340]	; (80036b0 <HAL_RCC_OscConfig+0x618>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ec      	bne.n	800353e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003564:	4b52      	ldr	r3, [pc, #328]	; (80036b0 <HAL_RCC_OscConfig+0x618>)
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	4b52      	ldr	r3, [pc, #328]	; (80036b4 <HAL_RCC_OscConfig+0x61c>)
 800356a:	4013      	ands	r3, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6a11      	ldr	r1, [r2, #32]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003574:	3a01      	subs	r2, #1
 8003576:	0112      	lsls	r2, r2, #4
 8003578:	4311      	orrs	r1, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800357e:	0212      	lsls	r2, r2, #8
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003586:	0852      	lsrs	r2, r2, #1
 8003588:	3a01      	subs	r2, #1
 800358a:	0552      	lsls	r2, r2, #21
 800358c:	4311      	orrs	r1, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003592:	0852      	lsrs	r2, r2, #1
 8003594:	3a01      	subs	r2, #1
 8003596:	0652      	lsls	r2, r2, #25
 8003598:	4311      	orrs	r1, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800359e:	06d2      	lsls	r2, r2, #27
 80035a0:	430a      	orrs	r2, r1
 80035a2:	4943      	ldr	r1, [pc, #268]	; (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a8:	4b41      	ldr	r3, [pc, #260]	; (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a40      	ldr	r2, [pc, #256]	; (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035b4:	4b3e      	ldr	r3, [pc, #248]	; (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4a3d      	ldr	r2, [pc, #244]	; (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fd fc06 	bl	8000dd0 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fd fc02 	bl	8000dd0 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e066      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035da:	4b35      	ldr	r3, [pc, #212]	; (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x530>
 80035e6:	e05e      	b.n	80036a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e8:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a30      	ldr	r2, [pc, #192]	; (80036b0 <HAL_RCC_OscConfig+0x618>)
 80035ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fd fbec 	bl	8000dd0 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fd fbe8 	bl	8000dd0 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e04c      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360e:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <HAL_RCC_OscConfig+0x618>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800361a:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <HAL_RCC_OscConfig+0x618>)
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	4924      	ldr	r1, [pc, #144]	; (80036b0 <HAL_RCC_OscConfig+0x618>)
 8003620:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <HAL_RCC_OscConfig+0x620>)
 8003622:	4013      	ands	r3, r2
 8003624:	60cb      	str	r3, [r1, #12]
 8003626:	e03e      	b.n	80036a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e039      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003634:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <HAL_RCC_OscConfig+0x618>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 0203 	and.w	r2, r3, #3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	429a      	cmp	r2, r3
 8003646:	d12c      	bne.n	80036a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	3b01      	subs	r3, #1
 8003654:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d123      	bne.n	80036a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d11b      	bne.n	80036a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d113      	bne.n	80036a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	085b      	lsrs	r3, r3, #1
 8003686:	3b01      	subs	r3, #1
 8003688:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d109      	bne.n	80036a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	3b01      	subs	r3, #1
 800369c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3720      	adds	r7, #32
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	019f800c 	.word	0x019f800c
 80036b8:	feeefffc 	.word	0xfeeefffc

080036bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e11e      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d4:	4b91      	ldr	r3, [pc, #580]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d910      	bls.n	8003704 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b8e      	ldr	r3, [pc, #568]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 020f 	bic.w	r2, r3, #15
 80036ea:	498c      	ldr	r1, [pc, #560]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	4b8a      	ldr	r3, [pc, #552]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e106      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d073      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d129      	bne.n	800376c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003718:	4b81      	ldr	r3, [pc, #516]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0f4      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003728:	f000 f99e 	bl	8003a68 <RCC_GetSysClockFreqFromPLLSource>
 800372c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4a7c      	ldr	r2, [pc, #496]	; (8003924 <HAL_RCC_ClockConfig+0x268>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d93f      	bls.n	80037b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003736:	4b7a      	ldr	r3, [pc, #488]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800374a:	2b00      	cmp	r3, #0
 800374c:	d033      	beq.n	80037b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003752:	2b00      	cmp	r3, #0
 8003754:	d12f      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003756:	4b72      	ldr	r3, [pc, #456]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800375e:	4a70      	ldr	r2, [pc, #448]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003764:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	e024      	b.n	80037b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d107      	bne.n	8003784 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003774:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0c6      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003784:	4b66      	ldr	r3, [pc, #408]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0be      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003794:	f000 f8ce 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 8003798:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4a61      	ldr	r2, [pc, #388]	; (8003924 <HAL_RCC_ClockConfig+0x268>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d909      	bls.n	80037b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037a2:	4b5f      	ldr	r3, [pc, #380]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037aa:	4a5d      	ldr	r2, [pc, #372]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80037ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037b6:	4b5a      	ldr	r3, [pc, #360]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 0203 	bic.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4957      	ldr	r1, [pc, #348]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c8:	f7fd fb02 	bl	8000dd0 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d0:	f7fd fafe 	bl	8000dd0 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e095      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	4b4e      	ldr	r3, [pc, #312]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 020c 	and.w	r2, r3, #12
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d1eb      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d023      	beq.n	800384c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003810:	4b43      	ldr	r3, [pc, #268]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a42      	ldr	r2, [pc, #264]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003816:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800381a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003828:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003830:	4a3b      	ldr	r2, [pc, #236]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003832:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003836:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003838:	4b39      	ldr	r3, [pc, #228]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4936      	ldr	r1, [pc, #216]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
 800384a:	e008      	b.n	800385e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2b80      	cmp	r3, #128	; 0x80
 8003850:	d105      	bne.n	800385e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003852:	4b33      	ldr	r3, [pc, #204]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4a32      	ldr	r2, [pc, #200]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 8003858:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800385c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800385e:	4b2f      	ldr	r3, [pc, #188]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d21d      	bcs.n	80038a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386c:	4b2b      	ldr	r3, [pc, #172]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f023 020f 	bic.w	r2, r3, #15
 8003874:	4929      	ldr	r1, [pc, #164]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800387c:	f7fd faa8 	bl	8000dd0 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fd faa4 	bl	8000dd0 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e03b      	b.n	8003912 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <HAL_RCC_ClockConfig+0x260>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1ed      	bne.n	8003884 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4917      	ldr	r1, [pc, #92]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038d2:	4b13      	ldr	r3, [pc, #76]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	490f      	ldr	r1, [pc, #60]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038e6:	f000 f825 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80038ea:	4602      	mov	r2, r0
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <HAL_RCC_ClockConfig+0x264>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	490c      	ldr	r1, [pc, #48]	; (8003928 <HAL_RCC_ClockConfig+0x26c>)
 80038f8:	5ccb      	ldrb	r3, [r1, r3]
 80038fa:	f003 031f 	and.w	r3, r3, #31
 80038fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003902:	4a0a      	ldr	r2, [pc, #40]	; (800392c <HAL_RCC_ClockConfig+0x270>)
 8003904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003906:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <HAL_RCC_ClockConfig+0x274>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd fa14 	bl	8000d38 <HAL_InitTick>
 8003910:	4603      	mov	r3, r0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40022000 	.word	0x40022000
 8003920:	40021000 	.word	0x40021000
 8003924:	04c4b400 	.word	0x04c4b400
 8003928:	080057f4 	.word	0x080057f4
 800392c:	20000000 	.word	0x20000000
 8003930:	20000004 	.word	0x20000004

08003934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800393a:	4b2c      	ldr	r3, [pc, #176]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b04      	cmp	r3, #4
 8003944:	d102      	bne.n	800394c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003946:	4b2a      	ldr	r3, [pc, #168]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	e047      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800394c:	4b27      	ldr	r3, [pc, #156]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b08      	cmp	r3, #8
 8003956:	d102      	bne.n	800395e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003958:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	e03e      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800395e:	4b23      	ldr	r3, [pc, #140]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b0c      	cmp	r3, #12
 8003968:	d136      	bne.n	80039d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003974:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	3301      	adds	r3, #1
 8003980:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d10c      	bne.n	80039a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003988:	4a1a      	ldr	r2, [pc, #104]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	4a16      	ldr	r2, [pc, #88]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003992:	68d2      	ldr	r2, [r2, #12]
 8003994:	0a12      	lsrs	r2, r2, #8
 8003996:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	617b      	str	r3, [r7, #20]
      break;
 80039a0:	e00c      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039a2:	4a13      	ldr	r2, [pc, #76]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	4a10      	ldr	r2, [pc, #64]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	0a12      	lsrs	r2, r2, #8
 80039b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]
      break;
 80039ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0e5b      	lsrs	r3, r3, #25
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	3301      	adds	r3, #1
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	e001      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039dc:	693b      	ldr	r3, [r7, #16]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
 80039f0:	00f42400 	.word	0x00f42400
 80039f4:	016e3600 	.word	0x016e3600

080039f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000000 	.word	0x20000000

08003a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a14:	f7ff fff0 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4904      	ldr	r1, [pc, #16]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000
 8003a38:	08005804 	.word	0x08005804

08003a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a40:	f7ff ffda 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a44:	4602      	mov	r2, r0
 8003a46:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	0adb      	lsrs	r3, r3, #11
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	4904      	ldr	r1, [pc, #16]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a52:	5ccb      	ldrb	r3, [r1, r3]
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	08005804 	.word	0x08005804

08003a68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a78:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	3301      	adds	r3, #1
 8003a84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d10c      	bne.n	8003aa6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a8c:	4a17      	ldr	r2, [pc, #92]	; (8003aec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a96:	68d2      	ldr	r2, [r2, #12]
 8003a98:	0a12      	lsrs	r2, r2, #8
 8003a9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	617b      	str	r3, [r7, #20]
    break;
 8003aa4:	e00c      	b.n	8003ac0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003aa6:	4a12      	ldr	r2, [pc, #72]	; (8003af0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aae:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ab0:	68d2      	ldr	r2, [r2, #12]
 8003ab2:	0a12      	lsrs	r2, r2, #8
 8003ab4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ab8:	fb02 f303 	mul.w	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]
    break;
 8003abe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	0e5b      	lsrs	r3, r3, #25
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	3301      	adds	r3, #1
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ada:	687b      	ldr	r3, [r7, #4]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	371c      	adds	r7, #28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	016e3600 	.word	0x016e3600
 8003af0:	00f42400 	.word	0x00f42400

08003af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003afc:	2300      	movs	r3, #0
 8003afe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b00:	2300      	movs	r3, #0
 8003b02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8098 	beq.w	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b16:	4b43      	ldr	r3, [pc, #268]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10d      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b22:	4b40      	ldr	r3, [pc, #256]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	4a3f      	ldr	r2, [pc, #252]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b2e:	4b3d      	ldr	r3, [pc, #244]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b3e:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a39      	ldr	r2, [pc, #228]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b4a:	f7fd f941 	bl	8000dd0 <HAL_GetTick>
 8003b4e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b50:	e009      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b52:	f7fd f93d 	bl	8000dd0 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d902      	bls.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	74fb      	strb	r3, [r7, #19]
        break;
 8003b64:	e005      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b66:	4b30      	ldr	r3, [pc, #192]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0ef      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b72:	7cfb      	ldrb	r3, [r7, #19]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d159      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b78:	4b2a      	ldr	r3, [pc, #168]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b82:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d01e      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d019      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b94:	4b23      	ldr	r3, [pc, #140]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ba0:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bb0:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bc0:	4a18      	ldr	r2, [pc, #96]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d016      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd2:	f7fd f8fd 	bl	8000dd0 <HAL_GetTick>
 8003bd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd8:	e00b      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fd f8f9 	bl	8000dd0 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d902      	bls.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	74fb      	strb	r3, [r7, #19]
            break;
 8003bf0:	e006      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ec      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c00:	7cfb      	ldrb	r3, [r7, #19]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10b      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c06:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c14:	4903      	ldr	r1, [pc, #12]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c1c:	e008      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c1e:	7cfb      	ldrb	r3, [r7, #19]
 8003c20:	74bb      	strb	r3, [r7, #18]
 8003c22:	e005      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c30:	7c7b      	ldrb	r3, [r7, #17]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d105      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c36:	4ba7      	ldr	r3, [pc, #668]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3a:	4aa6      	ldr	r2, [pc, #664]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c4e:	4ba1      	ldr	r3, [pc, #644]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c54:	f023 0203 	bic.w	r2, r3, #3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	499d      	ldr	r1, [pc, #628]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c70:	4b98      	ldr	r3, [pc, #608]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	f023 020c 	bic.w	r2, r3, #12
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	4995      	ldr	r1, [pc, #596]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c92:	4b90      	ldr	r3, [pc, #576]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	498c      	ldr	r1, [pc, #560]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cb4:	4b87      	ldr	r3, [pc, #540]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	4984      	ldr	r1, [pc, #528]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cd6:	4b7f      	ldr	r3, [pc, #508]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	497b      	ldr	r1, [pc, #492]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cf8:	4b76      	ldr	r3, [pc, #472]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	4973      	ldr	r1, [pc, #460]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d1a:	4b6e      	ldr	r3, [pc, #440]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	496a      	ldr	r1, [pc, #424]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d3c:	4b65      	ldr	r3, [pc, #404]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	4962      	ldr	r1, [pc, #392]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d5e:	4b5d      	ldr	r3, [pc, #372]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	4959      	ldr	r1, [pc, #356]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d80:	4b54      	ldr	r3, [pc, #336]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d86:	f023 0203 	bic.w	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	4951      	ldr	r1, [pc, #324]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003da2:	4b4c      	ldr	r3, [pc, #304]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	4948      	ldr	r1, [pc, #288]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d015      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dc4:	4b43      	ldr	r3, [pc, #268]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	4940      	ldr	r1, [pc, #256]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de2:	d105      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de4:	4b3b      	ldr	r3, [pc, #236]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4a3a      	ldr	r2, [pc, #232]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d015      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dfc:	4b35      	ldr	r3, [pc, #212]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0a:	4932      	ldr	r1, [pc, #200]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e1a:	d105      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e1c:	4b2d      	ldr	r3, [pc, #180]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4a2c      	ldr	r2, [pc, #176]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e26:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d015      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e34:	4b27      	ldr	r3, [pc, #156]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	4924      	ldr	r1, [pc, #144]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e52:	d105      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e54:	4b1f      	ldr	r3, [pc, #124]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4a1e      	ldr	r2, [pc, #120]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d015      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e6c:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7a:	4916      	ldr	r1, [pc, #88]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e8a:	d105      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8c:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4a10      	ldr	r2, [pc, #64]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d019      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	4908      	ldr	r1, [pc, #32]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ec2:	d109      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4a02      	ldr	r2, [pc, #8]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ece:	60d3      	str	r3, [r2, #12]
 8003ed0:	e002      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003ed2:	bf00      	nop
 8003ed4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d015      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ee4:	4b29      	ldr	r3, [pc, #164]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	4926      	ldr	r1, [pc, #152]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f02:	d105      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f04:	4b21      	ldr	r3, [pc, #132]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4a20      	ldr	r2, [pc, #128]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d015      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2a:	4918      	ldr	r1, [pc, #96]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3a:	d105      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f3c:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f46:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d015      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f54:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f62:	490a      	ldr	r1, [pc, #40]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f72:	d105      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f80:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000

08003f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e049      	b.n	8004036 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fc fe00 	bl	8000bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	f000 fb3e 	bl	8004650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	d001      	beq.n	8004058 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e04c      	b.n	80040f2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a26      	ldr	r2, [pc, #152]	; (8004100 <HAL_TIM_Base_Start+0xc0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d022      	beq.n	80040b0 <HAL_TIM_Base_Start+0x70>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004072:	d01d      	beq.n	80040b0 <HAL_TIM_Base_Start+0x70>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a22      	ldr	r2, [pc, #136]	; (8004104 <HAL_TIM_Base_Start+0xc4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d018      	beq.n	80040b0 <HAL_TIM_Base_Start+0x70>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a21      	ldr	r2, [pc, #132]	; (8004108 <HAL_TIM_Base_Start+0xc8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <HAL_TIM_Base_Start+0x70>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1f      	ldr	r2, [pc, #124]	; (800410c <HAL_TIM_Base_Start+0xcc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00e      	beq.n	80040b0 <HAL_TIM_Base_Start+0x70>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1e      	ldr	r2, [pc, #120]	; (8004110 <HAL_TIM_Base_Start+0xd0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d009      	beq.n	80040b0 <HAL_TIM_Base_Start+0x70>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1c      	ldr	r2, [pc, #112]	; (8004114 <HAL_TIM_Base_Start+0xd4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <HAL_TIM_Base_Start+0x70>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1b      	ldr	r2, [pc, #108]	; (8004118 <HAL_TIM_Base_Start+0xd8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d115      	bne.n	80040dc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_TIM_Base_Start+0xdc>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b06      	cmp	r3, #6
 80040c0:	d015      	beq.n	80040ee <HAL_TIM_Base_Start+0xae>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c8:	d011      	beq.n	80040ee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040da:	e008      	b.n	80040ee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e000      	b.n	80040f0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800
 800410c:	40000c00 	.word	0x40000c00
 8004110:	40013400 	.word	0x40013400
 8004114:	40014000 	.word	0x40014000
 8004118:	40015000 	.word	0x40015000
 800411c:	00010007 	.word	0x00010007

08004120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d020      	beq.n	8004184 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01b      	beq.n	8004184 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0202 	mvn.w	r2, #2
 8004154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fa52 	bl	8004614 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fa44 	bl	8004600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fa55 	bl	8004628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d020      	beq.n	80041d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01b      	beq.n	80041d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0204 	mvn.w	r2, #4
 80041a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fa2c 	bl	8004614 <HAL_TIM_IC_CaptureCallback>
 80041bc:	e005      	b.n	80041ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fa1e 	bl	8004600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fa2f 	bl	8004628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d020      	beq.n	800421c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01b      	beq.n	800421c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0208 	mvn.w	r2, #8
 80041ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2204      	movs	r2, #4
 80041f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fa06 	bl	8004614 <HAL_TIM_IC_CaptureCallback>
 8004208:	e005      	b.n	8004216 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f9f8 	bl	8004600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fa09 	bl	8004628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b00      	cmp	r3, #0
 8004224:	d020      	beq.n	8004268 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01b      	beq.n	8004268 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0210 	mvn.w	r2, #16
 8004238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2208      	movs	r2, #8
 800423e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f9e0 	bl	8004614 <HAL_TIM_IC_CaptureCallback>
 8004254:	e005      	b.n	8004262 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f9d2 	bl	8004600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f9e3 	bl	8004628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00c      	beq.n	800428c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0201 	mvn.w	r2, #1
 8004284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f9b0 	bl	80045ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004292:	2b00      	cmp	r3, #0
 8004294:	d104      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00c      	beq.n	80042ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80042b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fbbb 	bl	8004a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00c      	beq.n	80042de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fbb3 	bl	8004a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00c      	beq.n	8004302 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f99d 	bl	800463c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00c      	beq.n	8004326 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f06f 0220 	mvn.w	r2, #32
 800431e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fb7b 	bl	8004a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00c      	beq.n	800434a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d007      	beq.n	800434a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fb87 	bl	8004a58 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00c      	beq.n	800436e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fb7f 	bl	8004a6c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00c      	beq.n	8004392 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800438a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fb77 	bl	8004a80 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00c      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80043ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fb6f 	bl	8004a94 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_TIM_ConfigClockSource+0x1c>
 80043d8:	2302      	movs	r3, #2
 80043da:	e0f6      	b.n	80045ca <HAL_TIM_ConfigClockSource+0x20a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80043fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004406:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a6f      	ldr	r2, [pc, #444]	; (80045d4 <HAL_TIM_ConfigClockSource+0x214>)
 8004416:	4293      	cmp	r3, r2
 8004418:	f000 80c1 	beq.w	800459e <HAL_TIM_ConfigClockSource+0x1de>
 800441c:	4a6d      	ldr	r2, [pc, #436]	; (80045d4 <HAL_TIM_ConfigClockSource+0x214>)
 800441e:	4293      	cmp	r3, r2
 8004420:	f200 80c6 	bhi.w	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004424:	4a6c      	ldr	r2, [pc, #432]	; (80045d8 <HAL_TIM_ConfigClockSource+0x218>)
 8004426:	4293      	cmp	r3, r2
 8004428:	f000 80b9 	beq.w	800459e <HAL_TIM_ConfigClockSource+0x1de>
 800442c:	4a6a      	ldr	r2, [pc, #424]	; (80045d8 <HAL_TIM_ConfigClockSource+0x218>)
 800442e:	4293      	cmp	r3, r2
 8004430:	f200 80be 	bhi.w	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004434:	4a69      	ldr	r2, [pc, #420]	; (80045dc <HAL_TIM_ConfigClockSource+0x21c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	f000 80b1 	beq.w	800459e <HAL_TIM_ConfigClockSource+0x1de>
 800443c:	4a67      	ldr	r2, [pc, #412]	; (80045dc <HAL_TIM_ConfigClockSource+0x21c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	f200 80b6 	bhi.w	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004444:	4a66      	ldr	r2, [pc, #408]	; (80045e0 <HAL_TIM_ConfigClockSource+0x220>)
 8004446:	4293      	cmp	r3, r2
 8004448:	f000 80a9 	beq.w	800459e <HAL_TIM_ConfigClockSource+0x1de>
 800444c:	4a64      	ldr	r2, [pc, #400]	; (80045e0 <HAL_TIM_ConfigClockSource+0x220>)
 800444e:	4293      	cmp	r3, r2
 8004450:	f200 80ae 	bhi.w	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004454:	4a63      	ldr	r2, [pc, #396]	; (80045e4 <HAL_TIM_ConfigClockSource+0x224>)
 8004456:	4293      	cmp	r3, r2
 8004458:	f000 80a1 	beq.w	800459e <HAL_TIM_ConfigClockSource+0x1de>
 800445c:	4a61      	ldr	r2, [pc, #388]	; (80045e4 <HAL_TIM_ConfigClockSource+0x224>)
 800445e:	4293      	cmp	r3, r2
 8004460:	f200 80a6 	bhi.w	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004464:	4a60      	ldr	r2, [pc, #384]	; (80045e8 <HAL_TIM_ConfigClockSource+0x228>)
 8004466:	4293      	cmp	r3, r2
 8004468:	f000 8099 	beq.w	800459e <HAL_TIM_ConfigClockSource+0x1de>
 800446c:	4a5e      	ldr	r2, [pc, #376]	; (80045e8 <HAL_TIM_ConfigClockSource+0x228>)
 800446e:	4293      	cmp	r3, r2
 8004470:	f200 809e 	bhi.w	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004474:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004478:	f000 8091 	beq.w	800459e <HAL_TIM_ConfigClockSource+0x1de>
 800447c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004480:	f200 8096 	bhi.w	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004484:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004488:	f000 8089 	beq.w	800459e <HAL_TIM_ConfigClockSource+0x1de>
 800448c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004490:	f200 808e 	bhi.w	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004498:	d03e      	beq.n	8004518 <HAL_TIM_ConfigClockSource+0x158>
 800449a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800449e:	f200 8087 	bhi.w	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80044a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a6:	f000 8086 	beq.w	80045b6 <HAL_TIM_ConfigClockSource+0x1f6>
 80044aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ae:	d87f      	bhi.n	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80044b0:	2b70      	cmp	r3, #112	; 0x70
 80044b2:	d01a      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0x12a>
 80044b4:	2b70      	cmp	r3, #112	; 0x70
 80044b6:	d87b      	bhi.n	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80044b8:	2b60      	cmp	r3, #96	; 0x60
 80044ba:	d050      	beq.n	800455e <HAL_TIM_ConfigClockSource+0x19e>
 80044bc:	2b60      	cmp	r3, #96	; 0x60
 80044be:	d877      	bhi.n	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80044c0:	2b50      	cmp	r3, #80	; 0x50
 80044c2:	d03c      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x17e>
 80044c4:	2b50      	cmp	r3, #80	; 0x50
 80044c6:	d873      	bhi.n	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80044c8:	2b40      	cmp	r3, #64	; 0x40
 80044ca:	d058      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x1be>
 80044cc:	2b40      	cmp	r3, #64	; 0x40
 80044ce:	d86f      	bhi.n	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80044d0:	2b30      	cmp	r3, #48	; 0x30
 80044d2:	d064      	beq.n	800459e <HAL_TIM_ConfigClockSource+0x1de>
 80044d4:	2b30      	cmp	r3, #48	; 0x30
 80044d6:	d86b      	bhi.n	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d060      	beq.n	800459e <HAL_TIM_ConfigClockSource+0x1de>
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d867      	bhi.n	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d05c      	beq.n	800459e <HAL_TIM_ConfigClockSource+0x1de>
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d05a      	beq.n	800459e <HAL_TIM_ConfigClockSource+0x1de>
 80044e8:	e062      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044fa:	f000 f9d9 	bl	80048b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800450c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	609a      	str	r2, [r3, #8]
      break;
 8004516:	e04f      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004528:	f000 f9c2 	bl	80048b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800453a:	609a      	str	r2, [r3, #8]
      break;
 800453c:	e03c      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800454a:	461a      	mov	r2, r3
 800454c:	f000 f934 	bl	80047b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2150      	movs	r1, #80	; 0x50
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f98d 	bl	8004876 <TIM_ITRx_SetConfig>
      break;
 800455c:	e02c      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800456a:	461a      	mov	r2, r3
 800456c:	f000 f953 	bl	8004816 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2160      	movs	r1, #96	; 0x60
 8004576:	4618      	mov	r0, r3
 8004578:	f000 f97d 	bl	8004876 <TIM_ITRx_SetConfig>
      break;
 800457c:	e01c      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800458a:	461a      	mov	r2, r3
 800458c:	f000 f914 	bl	80047b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2140      	movs	r1, #64	; 0x40
 8004596:	4618      	mov	r0, r3
 8004598:	f000 f96d 	bl	8004876 <TIM_ITRx_SetConfig>
      break;
 800459c:	e00c      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4619      	mov	r1, r3
 80045a8:	4610      	mov	r0, r2
 80045aa:	f000 f964 	bl	8004876 <TIM_ITRx_SetConfig>
      break;
 80045ae:	e003      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
      break;
 80045b4:	e000      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80045b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	00100070 	.word	0x00100070
 80045d8:	00100060 	.word	0x00100060
 80045dc:	00100050 	.word	0x00100050
 80045e0:	00100040 	.word	0x00100040
 80045e4:	00100030 	.word	0x00100030
 80045e8:	00100020 	.word	0x00100020

080045ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a4c      	ldr	r2, [pc, #304]	; (8004794 <TIM_Base_SetConfig+0x144>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d017      	beq.n	8004698 <TIM_Base_SetConfig+0x48>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466e:	d013      	beq.n	8004698 <TIM_Base_SetConfig+0x48>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a49      	ldr	r2, [pc, #292]	; (8004798 <TIM_Base_SetConfig+0x148>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00f      	beq.n	8004698 <TIM_Base_SetConfig+0x48>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a48      	ldr	r2, [pc, #288]	; (800479c <TIM_Base_SetConfig+0x14c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00b      	beq.n	8004698 <TIM_Base_SetConfig+0x48>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a47      	ldr	r2, [pc, #284]	; (80047a0 <TIM_Base_SetConfig+0x150>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d007      	beq.n	8004698 <TIM_Base_SetConfig+0x48>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a46      	ldr	r2, [pc, #280]	; (80047a4 <TIM_Base_SetConfig+0x154>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d003      	beq.n	8004698 <TIM_Base_SetConfig+0x48>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a45      	ldr	r2, [pc, #276]	; (80047a8 <TIM_Base_SetConfig+0x158>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d108      	bne.n	80046aa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a39      	ldr	r2, [pc, #228]	; (8004794 <TIM_Base_SetConfig+0x144>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d023      	beq.n	80046fa <TIM_Base_SetConfig+0xaa>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b8:	d01f      	beq.n	80046fa <TIM_Base_SetConfig+0xaa>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a36      	ldr	r2, [pc, #216]	; (8004798 <TIM_Base_SetConfig+0x148>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d01b      	beq.n	80046fa <TIM_Base_SetConfig+0xaa>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a35      	ldr	r2, [pc, #212]	; (800479c <TIM_Base_SetConfig+0x14c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d017      	beq.n	80046fa <TIM_Base_SetConfig+0xaa>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a34      	ldr	r2, [pc, #208]	; (80047a0 <TIM_Base_SetConfig+0x150>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <TIM_Base_SetConfig+0xaa>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a33      	ldr	r2, [pc, #204]	; (80047a4 <TIM_Base_SetConfig+0x154>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00f      	beq.n	80046fa <TIM_Base_SetConfig+0xaa>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a33      	ldr	r2, [pc, #204]	; (80047ac <TIM_Base_SetConfig+0x15c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00b      	beq.n	80046fa <TIM_Base_SetConfig+0xaa>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a32      	ldr	r2, [pc, #200]	; (80047b0 <TIM_Base_SetConfig+0x160>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d007      	beq.n	80046fa <TIM_Base_SetConfig+0xaa>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a31      	ldr	r2, [pc, #196]	; (80047b4 <TIM_Base_SetConfig+0x164>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <TIM_Base_SetConfig+0xaa>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2c      	ldr	r2, [pc, #176]	; (80047a8 <TIM_Base_SetConfig+0x158>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d108      	bne.n	800470c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a18      	ldr	r2, [pc, #96]	; (8004794 <TIM_Base_SetConfig+0x144>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d013      	beq.n	8004760 <TIM_Base_SetConfig+0x110>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a1a      	ldr	r2, [pc, #104]	; (80047a4 <TIM_Base_SetConfig+0x154>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00f      	beq.n	8004760 <TIM_Base_SetConfig+0x110>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a1a      	ldr	r2, [pc, #104]	; (80047ac <TIM_Base_SetConfig+0x15c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d00b      	beq.n	8004760 <TIM_Base_SetConfig+0x110>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <TIM_Base_SetConfig+0x160>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d007      	beq.n	8004760 <TIM_Base_SetConfig+0x110>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <TIM_Base_SetConfig+0x164>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d003      	beq.n	8004760 <TIM_Base_SetConfig+0x110>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a13      	ldr	r2, [pc, #76]	; (80047a8 <TIM_Base_SetConfig+0x158>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d103      	bne.n	8004768 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b01      	cmp	r3, #1
 8004778:	d105      	bne.n	8004786 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f023 0201 	bic.w	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	611a      	str	r2, [r3, #16]
  }
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40013400 	.word	0x40013400
 80047a8:	40015000 	.word	0x40015000
 80047ac:	40014000 	.word	0x40014000
 80047b0:	40014400 	.word	0x40014400
 80047b4:	40014800 	.word	0x40014800

080047b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f023 0201 	bic.w	r2, r3, #1
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f023 030a 	bic.w	r3, r3, #10
 80047f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004816:	b480      	push	{r7}
 8004818:	b087      	sub	sp, #28
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f023 0210 	bic.w	r2, r3, #16
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004840:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	031b      	lsls	r3, r3, #12
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004852:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	621a      	str	r2, [r3, #32]
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004876:	b480      	push	{r7}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800488c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004890:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	f043 0307 	orr.w	r3, r3, #7
 800489c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	609a      	str	r2, [r3, #8]
}
 80048a4:	bf00      	nop
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	021a      	lsls	r2, r3, #8
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	609a      	str	r2, [r3, #8]
}
 80048e4:	bf00      	nop
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004904:	2302      	movs	r3, #2
 8004906:	e074      	b.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a34      	ldr	r2, [pc, #208]	; (8004a00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d009      	beq.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a33      	ldr	r2, [pc, #204]	; (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d004      	beq.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a31      	ldr	r2, [pc, #196]	; (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d108      	bne.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800494c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800495e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a21      	ldr	r2, [pc, #132]	; (8004a00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d022      	beq.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004988:	d01d      	beq.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1f      	ldr	r2, [pc, #124]	; (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d018      	beq.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1d      	ldr	r2, [pc, #116]	; (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1c      	ldr	r2, [pc, #112]	; (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00e      	beq.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a15      	ldr	r2, [pc, #84]	; (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d009      	beq.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d004      	beq.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a11      	ldr	r2, [pc, #68]	; (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d10c      	bne.n	80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40012c00 	.word	0x40012c00
 8004a04:	40013400 	.word	0x40013400
 8004a08:	40015000 	.word	0x40015000
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40014000 	.word	0x40014000

08004a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e042      	b.n	8004b40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7fc f81d 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2224      	movs	r2, #36	; 0x24
 8004ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0201 	bic.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fb24 	bl	8005140 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f825 	bl	8004b48 <UART_SetConfig>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e01b      	b.n	8004b40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fba3 	bl	8005284 <UART_CheckIdleState>
 8004b3e:	4603      	mov	r3, r0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b4c:	b08c      	sub	sp, #48	; 0x30
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	431a      	orrs	r2, r3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4baa      	ldr	r3, [pc, #680]	; (8004e20 <UART_SetConfig+0x2d8>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b80:	430b      	orrs	r3, r1
 8004b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a9f      	ldr	r2, [pc, #636]	; (8004e24 <UART_SetConfig+0x2dc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004bbe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	f023 010f 	bic.w	r1, r3, #15
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a90      	ldr	r2, [pc, #576]	; (8004e28 <UART_SetConfig+0x2e0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d125      	bne.n	8004c38 <UART_SetConfig+0xf0>
 8004bec:	4b8f      	ldr	r3, [pc, #572]	; (8004e2c <UART_SetConfig+0x2e4>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d81a      	bhi.n	8004c30 <UART_SetConfig+0xe8>
 8004bfa:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <UART_SetConfig+0xb8>)
 8004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c00:	08004c11 	.word	0x08004c11
 8004c04:	08004c21 	.word	0x08004c21
 8004c08:	08004c19 	.word	0x08004c19
 8004c0c:	08004c29 	.word	0x08004c29
 8004c10:	2301      	movs	r3, #1
 8004c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c16:	e116      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c1e:	e112      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004c20:	2304      	movs	r3, #4
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c26:	e10e      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004c28:	2308      	movs	r3, #8
 8004c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c2e:	e10a      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004c30:	2310      	movs	r3, #16
 8004c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c36:	e106      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a7c      	ldr	r2, [pc, #496]	; (8004e30 <UART_SetConfig+0x2e8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d138      	bne.n	8004cb4 <UART_SetConfig+0x16c>
 8004c42:	4b7a      	ldr	r3, [pc, #488]	; (8004e2c <UART_SetConfig+0x2e4>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c48:	f003 030c 	and.w	r3, r3, #12
 8004c4c:	2b0c      	cmp	r3, #12
 8004c4e:	d82d      	bhi.n	8004cac <UART_SetConfig+0x164>
 8004c50:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <UART_SetConfig+0x110>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004c8d 	.word	0x08004c8d
 8004c5c:	08004cad 	.word	0x08004cad
 8004c60:	08004cad 	.word	0x08004cad
 8004c64:	08004cad 	.word	0x08004cad
 8004c68:	08004c9d 	.word	0x08004c9d
 8004c6c:	08004cad 	.word	0x08004cad
 8004c70:	08004cad 	.word	0x08004cad
 8004c74:	08004cad 	.word	0x08004cad
 8004c78:	08004c95 	.word	0x08004c95
 8004c7c:	08004cad 	.word	0x08004cad
 8004c80:	08004cad 	.word	0x08004cad
 8004c84:	08004cad 	.word	0x08004cad
 8004c88:	08004ca5 	.word	0x08004ca5
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c92:	e0d8      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004c94:	2302      	movs	r3, #2
 8004c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c9a:	e0d4      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca2:	e0d0      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004ca4:	2308      	movs	r3, #8
 8004ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004caa:	e0cc      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004cac:	2310      	movs	r3, #16
 8004cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb2:	e0c8      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a5e      	ldr	r2, [pc, #376]	; (8004e34 <UART_SetConfig+0x2ec>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d125      	bne.n	8004d0a <UART_SetConfig+0x1c2>
 8004cbe:	4b5b      	ldr	r3, [pc, #364]	; (8004e2c <UART_SetConfig+0x2e4>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cc8:	2b30      	cmp	r3, #48	; 0x30
 8004cca:	d016      	beq.n	8004cfa <UART_SetConfig+0x1b2>
 8004ccc:	2b30      	cmp	r3, #48	; 0x30
 8004cce:	d818      	bhi.n	8004d02 <UART_SetConfig+0x1ba>
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d00a      	beq.n	8004cea <UART_SetConfig+0x1a2>
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d814      	bhi.n	8004d02 <UART_SetConfig+0x1ba>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <UART_SetConfig+0x19a>
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d008      	beq.n	8004cf2 <UART_SetConfig+0x1aa>
 8004ce0:	e00f      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce8:	e0ad      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004cea:	2302      	movs	r3, #2
 8004cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf0:	e0a9      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004cf2:	2304      	movs	r3, #4
 8004cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf8:	e0a5      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004cfa:	2308      	movs	r3, #8
 8004cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d00:	e0a1      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004d02:	2310      	movs	r3, #16
 8004d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d08:	e09d      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a4a      	ldr	r2, [pc, #296]	; (8004e38 <UART_SetConfig+0x2f0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d125      	bne.n	8004d60 <UART_SetConfig+0x218>
 8004d14:	4b45      	ldr	r3, [pc, #276]	; (8004e2c <UART_SetConfig+0x2e4>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d1e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d20:	d016      	beq.n	8004d50 <UART_SetConfig+0x208>
 8004d22:	2bc0      	cmp	r3, #192	; 0xc0
 8004d24:	d818      	bhi.n	8004d58 <UART_SetConfig+0x210>
 8004d26:	2b80      	cmp	r3, #128	; 0x80
 8004d28:	d00a      	beq.n	8004d40 <UART_SetConfig+0x1f8>
 8004d2a:	2b80      	cmp	r3, #128	; 0x80
 8004d2c:	d814      	bhi.n	8004d58 <UART_SetConfig+0x210>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <UART_SetConfig+0x1f0>
 8004d32:	2b40      	cmp	r3, #64	; 0x40
 8004d34:	d008      	beq.n	8004d48 <UART_SetConfig+0x200>
 8004d36:	e00f      	b.n	8004d58 <UART_SetConfig+0x210>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d3e:	e082      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004d40:	2302      	movs	r3, #2
 8004d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d46:	e07e      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d4e:	e07a      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004d50:	2308      	movs	r3, #8
 8004d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d56:	e076      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d5e:	e072      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a35      	ldr	r2, [pc, #212]	; (8004e3c <UART_SetConfig+0x2f4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d12a      	bne.n	8004dc0 <UART_SetConfig+0x278>
 8004d6a:	4b30      	ldr	r3, [pc, #192]	; (8004e2c <UART_SetConfig+0x2e4>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d78:	d01a      	beq.n	8004db0 <UART_SetConfig+0x268>
 8004d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d7e:	d81b      	bhi.n	8004db8 <UART_SetConfig+0x270>
 8004d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d84:	d00c      	beq.n	8004da0 <UART_SetConfig+0x258>
 8004d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8a:	d815      	bhi.n	8004db8 <UART_SetConfig+0x270>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <UART_SetConfig+0x250>
 8004d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d94:	d008      	beq.n	8004da8 <UART_SetConfig+0x260>
 8004d96:	e00f      	b.n	8004db8 <UART_SetConfig+0x270>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d9e:	e052      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004da0:	2302      	movs	r3, #2
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da6:	e04e      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004da8:	2304      	movs	r3, #4
 8004daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dae:	e04a      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004db0:	2308      	movs	r3, #8
 8004db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004db6:	e046      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004db8:	2310      	movs	r3, #16
 8004dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dbe:	e042      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <UART_SetConfig+0x2dc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d13a      	bne.n	8004e40 <UART_SetConfig+0x2f8>
 8004dca:	4b18      	ldr	r3, [pc, #96]	; (8004e2c <UART_SetConfig+0x2e4>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004dd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dd8:	d01a      	beq.n	8004e10 <UART_SetConfig+0x2c8>
 8004dda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dde:	d81b      	bhi.n	8004e18 <UART_SetConfig+0x2d0>
 8004de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de4:	d00c      	beq.n	8004e00 <UART_SetConfig+0x2b8>
 8004de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dea:	d815      	bhi.n	8004e18 <UART_SetConfig+0x2d0>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <UART_SetConfig+0x2b0>
 8004df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df4:	d008      	beq.n	8004e08 <UART_SetConfig+0x2c0>
 8004df6:	e00f      	b.n	8004e18 <UART_SetConfig+0x2d0>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dfe:	e022      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004e00:	2302      	movs	r3, #2
 8004e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e06:	e01e      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e0e:	e01a      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004e10:	2308      	movs	r3, #8
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e16:	e016      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e1e:	e012      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004e20:	cfff69f3 	.word	0xcfff69f3
 8004e24:	40008000 	.word	0x40008000
 8004e28:	40013800 	.word	0x40013800
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40004400 	.word	0x40004400
 8004e34:	40004800 	.word	0x40004800
 8004e38:	40004c00 	.word	0x40004c00
 8004e3c:	40005000 	.word	0x40005000
 8004e40:	2310      	movs	r3, #16
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4aae      	ldr	r2, [pc, #696]	; (8005104 <UART_SetConfig+0x5bc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	f040 8097 	bne.w	8004f80 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d823      	bhi.n	8004ea2 <UART_SetConfig+0x35a>
 8004e5a:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <UART_SetConfig+0x318>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004ea3 	.word	0x08004ea3
 8004e68:	08004e8d 	.word	0x08004e8d
 8004e6c:	08004ea3 	.word	0x08004ea3
 8004e70:	08004e93 	.word	0x08004e93
 8004e74:	08004ea3 	.word	0x08004ea3
 8004e78:	08004ea3 	.word	0x08004ea3
 8004e7c:	08004ea3 	.word	0x08004ea3
 8004e80:	08004e9b 	.word	0x08004e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7fe fdc4 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8004e88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e8a:	e010      	b.n	8004eae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e8c:	4b9e      	ldr	r3, [pc, #632]	; (8005108 <UART_SetConfig+0x5c0>)
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e90:	e00d      	b.n	8004eae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e92:	f7fe fd4f 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 8004e96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e98:	e009      	b.n	8004eae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ea0:	e005      	b.n	8004eae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004eac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 8130 	beq.w	8005116 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	4a94      	ldr	r2, [pc, #592]	; (800510c <UART_SetConfig+0x5c4>)
 8004ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	4413      	add	r3, r2
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d305      	bcc.n	8004ee6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d903      	bls.n	8004eee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004eec:	e113      	b.n	8005116 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	60fa      	str	r2, [r7, #12]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	4a84      	ldr	r2, [pc, #528]	; (800510c <UART_SetConfig+0x5c4>)
 8004efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2200      	movs	r2, #0
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f10:	f7fb f982 	bl	8000218 <__aeabi_uldivmod>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	020b      	lsls	r3, r1, #8
 8004f26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f2a:	0202      	lsls	r2, r0, #8
 8004f2c:	6979      	ldr	r1, [r7, #20]
 8004f2e:	6849      	ldr	r1, [r1, #4]
 8004f30:	0849      	lsrs	r1, r1, #1
 8004f32:	2000      	movs	r0, #0
 8004f34:	460c      	mov	r4, r1
 8004f36:	4605      	mov	r5, r0
 8004f38:	eb12 0804 	adds.w	r8, r2, r4
 8004f3c:	eb43 0905 	adc.w	r9, r3, r5
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	469a      	mov	sl, r3
 8004f48:	4693      	mov	fp, r2
 8004f4a:	4652      	mov	r2, sl
 8004f4c:	465b      	mov	r3, fp
 8004f4e:	4640      	mov	r0, r8
 8004f50:	4649      	mov	r1, r9
 8004f52:	f7fb f961 	bl	8000218 <__aeabi_uldivmod>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f64:	d308      	bcc.n	8004f78 <UART_SetConfig+0x430>
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f6c:	d204      	bcs.n	8004f78 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6a3a      	ldr	r2, [r7, #32]
 8004f74:	60da      	str	r2, [r3, #12]
 8004f76:	e0ce      	b.n	8005116 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f7e:	e0ca      	b.n	8005116 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f88:	d166      	bne.n	8005058 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004f8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d827      	bhi.n	8004fe2 <UART_SetConfig+0x49a>
 8004f92:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <UART_SetConfig+0x450>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fbd 	.word	0x08004fbd
 8004f9c:	08004fc5 	.word	0x08004fc5
 8004fa0:	08004fcd 	.word	0x08004fcd
 8004fa4:	08004fe3 	.word	0x08004fe3
 8004fa8:	08004fd3 	.word	0x08004fd3
 8004fac:	08004fe3 	.word	0x08004fe3
 8004fb0:	08004fe3 	.word	0x08004fe3
 8004fb4:	08004fe3 	.word	0x08004fe3
 8004fb8:	08004fdb 	.word	0x08004fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fbc:	f7fe fd28 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8004fc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fc2:	e014      	b.n	8004fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc4:	f7fe fd3a 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 8004fc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fca:	e010      	b.n	8004fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fcc:	4b4e      	ldr	r3, [pc, #312]	; (8005108 <UART_SetConfig+0x5c0>)
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fd0:	e00d      	b.n	8004fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd2:	f7fe fcaf 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 8004fd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fd8:	e009      	b.n	8004fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fe0:	e005      	b.n	8004fee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8090 	beq.w	8005116 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	4a44      	ldr	r2, [pc, #272]	; (800510c <UART_SetConfig+0x5c4>)
 8004ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005000:	461a      	mov	r2, r3
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	fbb3 f3f2 	udiv	r3, r3, r2
 8005008:	005a      	lsls	r2, r3, #1
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	441a      	add	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	fbb2 f3f3 	udiv	r3, r2, r3
 800501a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	2b0f      	cmp	r3, #15
 8005020:	d916      	bls.n	8005050 <UART_SetConfig+0x508>
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005028:	d212      	bcs.n	8005050 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	b29b      	uxth	r3, r3
 800502e:	f023 030f 	bic.w	r3, r3, #15
 8005032:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	b29b      	uxth	r3, r3
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	b29a      	uxth	r2, r3
 8005040:	8bfb      	ldrh	r3, [r7, #30]
 8005042:	4313      	orrs	r3, r2
 8005044:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	8bfa      	ldrh	r2, [r7, #30]
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	e062      	b.n	8005116 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005056:	e05e      	b.n	8005116 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005058:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800505c:	2b08      	cmp	r3, #8
 800505e:	d828      	bhi.n	80050b2 <UART_SetConfig+0x56a>
 8005060:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <UART_SetConfig+0x520>)
 8005062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005066:	bf00      	nop
 8005068:	0800508d 	.word	0x0800508d
 800506c:	08005095 	.word	0x08005095
 8005070:	0800509d 	.word	0x0800509d
 8005074:	080050b3 	.word	0x080050b3
 8005078:	080050a3 	.word	0x080050a3
 800507c:	080050b3 	.word	0x080050b3
 8005080:	080050b3 	.word	0x080050b3
 8005084:	080050b3 	.word	0x080050b3
 8005088:	080050ab 	.word	0x080050ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800508c:	f7fe fcc0 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8005090:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005092:	e014      	b.n	80050be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005094:	f7fe fcd2 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 8005098:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800509a:	e010      	b.n	80050be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800509c:	4b1a      	ldr	r3, [pc, #104]	; (8005108 <UART_SetConfig+0x5c0>)
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050a0:	e00d      	b.n	80050be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a2:	f7fe fc47 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80050a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050a8:	e009      	b.n	80050be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050b0:	e005      	b.n	80050be <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80050bc:	bf00      	nop
    }

    if (pclk != 0U)
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d028      	beq.n	8005116 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	4a10      	ldr	r2, [pc, #64]	; (800510c <UART_SetConfig+0x5c4>)
 80050ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050ce:	461a      	mov	r2, r3
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	441a      	add	r2, r3
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	2b0f      	cmp	r3, #15
 80050ec:	d910      	bls.n	8005110 <UART_SetConfig+0x5c8>
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f4:	d20c      	bcs.n	8005110 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60da      	str	r2, [r3, #12]
 8005100:	e009      	b.n	8005116 <UART_SetConfig+0x5ce>
 8005102:	bf00      	nop
 8005104:	40008000 	.word	0x40008000
 8005108:	00f42400 	.word	0x00f42400
 800510c:	0800580c 	.word	0x0800580c
      }
      else
      {
        ret = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2201      	movs	r2, #1
 800511a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2201      	movs	r2, #1
 8005122:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2200      	movs	r2, #0
 800512a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2200      	movs	r2, #0
 8005130:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005132:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005136:	4618      	mov	r0, r3
 8005138:	3730      	adds	r7, #48	; 0x30
 800513a:	46bd      	mov	sp, r7
 800513c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01a      	beq.n	8005256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800523e:	d10a      	bne.n	8005256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	605a      	str	r2, [r3, #4]
  }
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b098      	sub	sp, #96	; 0x60
 8005288:	af02      	add	r7, sp, #8
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005294:	f7fb fd9c 	bl	8000dd0 <HAL_GetTick>
 8005298:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d12f      	bne.n	8005308 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b0:	2200      	movs	r2, #0
 80052b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f88e 	bl	80053d8 <UART_WaitOnFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d022      	beq.n	8005308 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d6:	653b      	str	r3, [r7, #80]	; 0x50
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e0:	647b      	str	r3, [r7, #68]	; 0x44
 80052e2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e6      	bne.n	80052c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e063      	b.n	80053d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b04      	cmp	r3, #4
 8005314:	d149      	bne.n	80053aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005316:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800531e:	2200      	movs	r2, #0
 8005320:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f857 	bl	80053d8 <UART_WaitOnFlagUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d03c      	beq.n	80053aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	623b      	str	r3, [r7, #32]
   return(result);
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534e:	633b      	str	r3, [r7, #48]	; 0x30
 8005350:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e6      	bne.n	8005330 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3308      	adds	r3, #8
 8005368:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	60fb      	str	r3, [r7, #12]
   return(result);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	64bb      	str	r3, [r7, #72]	; 0x48
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3308      	adds	r3, #8
 8005380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005382:	61fa      	str	r2, [r7, #28]
 8005384:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	69b9      	ldr	r1, [r7, #24]
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	617b      	str	r3, [r7, #20]
   return(result);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e5      	bne.n	8005362 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e012      	b.n	80053d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3758      	adds	r7, #88	; 0x58
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	4613      	mov	r3, r2
 80053e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e8:	e04f      	b.n	800548a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053f0:	d04b      	beq.n	800548a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f2:	f7fb fced 	bl	8000dd0 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d302      	bcc.n	8005408 <UART_WaitOnFlagUntilTimeout+0x30>
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e04e      	b.n	80054aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	d037      	beq.n	800548a <UART_WaitOnFlagUntilTimeout+0xb2>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b80      	cmp	r3, #128	; 0x80
 800541e:	d034      	beq.n	800548a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b40      	cmp	r3, #64	; 0x40
 8005424:	d031      	beq.n	800548a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b08      	cmp	r3, #8
 8005432:	d110      	bne.n	8005456 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2208      	movs	r2, #8
 800543a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 f838 	bl	80054b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2208      	movs	r2, #8
 8005446:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e029      	b.n	80054aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005464:	d111      	bne.n	800548a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800546e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f81e 	bl	80054b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2220      	movs	r2, #32
 800547a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e00f      	b.n	80054aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4013      	ands	r3, r2
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	429a      	cmp	r2, r3
 8005498:	bf0c      	ite	eq
 800549a:	2301      	moveq	r3, #1
 800549c:	2300      	movne	r3, #0
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	461a      	mov	r2, r3
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d0a0      	beq.n	80053ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b095      	sub	sp, #84	; 0x54
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d8:	643b      	str	r3, [r7, #64]	; 0x40
 80054da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e6      	bne.n	80054ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3308      	adds	r3, #8
 80054f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	64bb      	str	r3, [r7, #72]	; 0x48
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3308      	adds	r3, #8
 800550e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005510:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e3      	bne.n	80054ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d118      	bne.n	800555e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	60bb      	str	r3, [r7, #8]
   return(result);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f023 0310 	bic.w	r3, r3, #16
 8005540:	647b      	str	r3, [r7, #68]	; 0x44
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	6979      	ldr	r1, [r7, #20]
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	613b      	str	r3, [r7, #16]
   return(result);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e6      	bne.n	800552c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005572:	bf00      	nop
 8005574:	3754      	adds	r7, #84	; 0x54
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_UARTEx_DisableFifoMode+0x16>
 8005590:	2302      	movs	r3, #2
 8005592:	e027      	b.n	80055e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2224      	movs	r2, #36	; 0x24
 80055a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0201 	bic.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005604:	2302      	movs	r3, #2
 8005606:	e02d      	b.n	8005664 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2224      	movs	r2, #36	; 0x24
 8005614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0201 	bic.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f84f 	bl	80056e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005680:	2302      	movs	r3, #2
 8005682:	e02d      	b.n	80056e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2224      	movs	r2, #36	; 0x24
 8005690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0201 	bic.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f811 	bl	80056e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d108      	bne.n	800570a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005708:	e031      	b.n	800576e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800570a:	2308      	movs	r3, #8
 800570c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800570e:	2308      	movs	r3, #8
 8005710:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	0e5b      	lsrs	r3, r3, #25
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	0f5b      	lsrs	r3, r3, #29
 800572a:	b2db      	uxtb	r3, r3
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005732:	7bbb      	ldrb	r3, [r7, #14]
 8005734:	7b3a      	ldrb	r2, [r7, #12]
 8005736:	4911      	ldr	r1, [pc, #68]	; (800577c <UARTEx_SetNbDataToProcess+0x94>)
 8005738:	5c8a      	ldrb	r2, [r1, r2]
 800573a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800573e:	7b3a      	ldrb	r2, [r7, #12]
 8005740:	490f      	ldr	r1, [pc, #60]	; (8005780 <UARTEx_SetNbDataToProcess+0x98>)
 8005742:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005744:	fb93 f3f2 	sdiv	r3, r3, r2
 8005748:	b29a      	uxth	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	7b7a      	ldrb	r2, [r7, #13]
 8005754:	4909      	ldr	r1, [pc, #36]	; (800577c <UARTEx_SetNbDataToProcess+0x94>)
 8005756:	5c8a      	ldrb	r2, [r1, r2]
 8005758:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800575c:	7b7a      	ldrb	r2, [r7, #13]
 800575e:	4908      	ldr	r1, [pc, #32]	; (8005780 <UARTEx_SetNbDataToProcess+0x98>)
 8005760:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005762:	fb93 f3f2 	sdiv	r3, r3, r2
 8005766:	b29a      	uxth	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800576e:	bf00      	nop
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	08005824 	.word	0x08005824
 8005780:	0800582c 	.word	0x0800582c

08005784 <memset>:
 8005784:	4402      	add	r2, r0
 8005786:	4603      	mov	r3, r0
 8005788:	4293      	cmp	r3, r2
 800578a:	d100      	bne.n	800578e <memset+0xa>
 800578c:	4770      	bx	lr
 800578e:	f803 1b01 	strb.w	r1, [r3], #1
 8005792:	e7f9      	b.n	8005788 <memset+0x4>

08005794 <__libc_init_array>:
 8005794:	b570      	push	{r4, r5, r6, lr}
 8005796:	4d0d      	ldr	r5, [pc, #52]	; (80057cc <__libc_init_array+0x38>)
 8005798:	4c0d      	ldr	r4, [pc, #52]	; (80057d0 <__libc_init_array+0x3c>)
 800579a:	1b64      	subs	r4, r4, r5
 800579c:	10a4      	asrs	r4, r4, #2
 800579e:	2600      	movs	r6, #0
 80057a0:	42a6      	cmp	r6, r4
 80057a2:	d109      	bne.n	80057b8 <__libc_init_array+0x24>
 80057a4:	4d0b      	ldr	r5, [pc, #44]	; (80057d4 <__libc_init_array+0x40>)
 80057a6:	4c0c      	ldr	r4, [pc, #48]	; (80057d8 <__libc_init_array+0x44>)
 80057a8:	f000 f818 	bl	80057dc <_init>
 80057ac:	1b64      	subs	r4, r4, r5
 80057ae:	10a4      	asrs	r4, r4, #2
 80057b0:	2600      	movs	r6, #0
 80057b2:	42a6      	cmp	r6, r4
 80057b4:	d105      	bne.n	80057c2 <__libc_init_array+0x2e>
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
 80057b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057bc:	4798      	blx	r3
 80057be:	3601      	adds	r6, #1
 80057c0:	e7ee      	b.n	80057a0 <__libc_init_array+0xc>
 80057c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c6:	4798      	blx	r3
 80057c8:	3601      	adds	r6, #1
 80057ca:	e7f2      	b.n	80057b2 <__libc_init_array+0x1e>
 80057cc:	0800583c 	.word	0x0800583c
 80057d0:	0800583c 	.word	0x0800583c
 80057d4:	0800583c 	.word	0x0800583c
 80057d8:	08005840 	.word	0x08005840

080057dc <_init>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	bf00      	nop
 80057e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e2:	bc08      	pop	{r3}
 80057e4:	469e      	mov	lr, r3
 80057e6:	4770      	bx	lr

080057e8 <_fini>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	bf00      	nop
 80057ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ee:	bc08      	pop	{r3}
 80057f0:	469e      	mov	lr, r3
 80057f2:	4770      	bx	lr
