
micro_con_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006248  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006420  08006420  00016420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006460  08006460  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  08006460  08006460  00016460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006468  08006468  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800646c  0800646c  0001646c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08006470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000054  080064c4  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080064c4  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016854  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027f2  00000000  00000000  0003691b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  00039110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f70  00000000  00000000  0003a4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027849  00000000  00000000  0003b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ddc  00000000  00000000  00062c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e723  00000000  00000000  00078a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055fc  00000000  00000000  00187188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018c784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000054 	.word	0x20000054
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006408 	.word	0x08006408

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000058 	.word	0x20000058
 8000214:	08006408 	.word	0x08006408

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fbf9 	bl	8000d0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f822 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f9a4 	bl	800086c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f8e2 	bl	80006ec <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000528:	f000 f868 	bl	80005fc <MX_ADC1_Init>
  MX_TIM3_Init();
 800052c:	f000 f928 	bl	8000780 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000530:	4809      	ldr	r0, [pc, #36]	; (8000558 <main+0x44>)
 8000532:	f003 fdc3 	bl	80040bc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000536:	2100      	movs	r1, #0
 8000538:	4807      	ldr	r0, [pc, #28]	; (8000558 <main+0x44>)
 800053a:	f003 fe91 	bl	8004260 <HAL_TIM_PWM_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800053e:	217f      	movs	r1, #127	; 0x7f
 8000540:	4806      	ldr	r0, [pc, #24]	; (800055c <main+0x48>)
 8000542:	f002 f8fb 	bl	800273c <HAL_ADCEx_Calibration_Start>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ADC_Read_blocking();
 8000546:	f000 f9ff 	bl	8000948 <ADC_Read_blocking>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ADC1_Channel[1].data);
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <main+0x4c>)
 800054c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000550:	4b01      	ldr	r3, [pc, #4]	; (8000558 <main+0x44>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	635a      	str	r2, [r3, #52]	; 0x34
	  ADC_Read_blocking();
 8000556:	e7f6      	b.n	8000546 <main+0x32>
 8000558:	20000170 	.word	0x20000170
 800055c:	20000070 	.word	0x20000070
 8000560:	20000000 	.word	0x20000000

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0318 	add.w	r3, r7, #24
 800056e:	2238      	movs	r2, #56	; 0x38
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f005 ff1c 	bl	80063b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000586:	2000      	movs	r0, #0
 8000588:	f002 fd10 	bl	8002fac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	2340      	movs	r3, #64	; 0x40
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005a2:	2304      	movs	r3, #4
 80005a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005a6:	2355      	movs	r3, #85	; 0x55
 80005a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0318 	add.w	r3, r7, #24
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fdaa 	bl	8003114 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005c6:	f000 fa09 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2303      	movs	r3, #3
 80005d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 f8a8 	bl	8003738 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ee:	f000 f9f5 	bl	80009dc <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	; 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08c      	sub	sp, #48	; 0x30
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2220      	movs	r2, #32
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f005 fecb 	bl	80063b0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800061a:	4b32      	ldr	r3, [pc, #200]	; (80006e4 <MX_ADC1_Init+0xe8>)
 800061c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000620:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000622:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <MX_ADC1_Init+0xe8>)
 8000624:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000628:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062a:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <MX_ADC1_Init+0xe8>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <MX_ADC1_Init+0xe8>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000636:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800063c:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <MX_ADC1_Init+0xe8>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <MX_ADC1_Init+0xe8>)
 8000644:	2204      	movs	r2, #4
 8000646:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <MX_ADC1_Init+0xe8>)
 800064a:	2200      	movs	r2, #0
 800064c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <MX_ADC1_Init+0xe8>)
 8000650:	2200      	movs	r2, #0
 8000652:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <MX_ADC1_Init+0xe8>)
 8000656:	2201      	movs	r2, #1
 8000658:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <MX_ADC1_Init+0xe8>)
 8000664:	2200      	movs	r2, #0
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_ADC1_Init+0xe8>)
 800066a:	2200      	movs	r2, #0
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <MX_ADC1_Init+0xe8>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_ADC1_Init+0xe8>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_ADC1_Init+0xe8>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	4817      	ldr	r0, [pc, #92]	; (80006e4 <MX_ADC1_Init+0xe8>)
 8000686:	f000 fe2d 	bl	80012e4 <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000690:	f000 f9a4 	bl	80009dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069c:	4619      	mov	r1, r3
 800069e:	4811      	ldr	r0, [pc, #68]	; (80006e4 <MX_ADC1_Init+0xe8>)
 80006a0:	f002 f8ae 	bl	8002800 <HAL_ADCEx_MultiModeConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006aa:	f000 f997 	bl	80009dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_ADC1_Init+0xec>)
 80006b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b2:	2306      	movs	r3, #6
 80006b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ba:	237f      	movs	r3, #127	; 0x7f
 80006bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006be:	2304      	movs	r3, #4
 80006c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	4806      	ldr	r0, [pc, #24]	; (80006e4 <MX_ADC1_Init+0xe8>)
 80006cc:	f001 f9f2 	bl	8001ab4 <HAL_ADC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006d6:	f000 f981 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	3730      	adds	r7, #48	; 0x30
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000070 	.word	0x20000070
 80006e8:	04300002 	.word	0x04300002

080006ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006f0:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 80006f2:	4a22      	ldr	r2, [pc, #136]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 80006f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800070a:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 800072a:	2200      	movs	r2, #0
 800072c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800072e:	4812      	ldr	r0, [pc, #72]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000730:	f004 ffd0 	bl	80056d4 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f94f 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800073e:	2100      	movs	r1, #0
 8000740:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000742:	f005 fd6b 	bl	800621c <HAL_UARTEx_SetTxFifoThreshold>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800074c:	f000 f946 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000750:	2100      	movs	r1, #0
 8000752:	4809      	ldr	r0, [pc, #36]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000754:	f005 fda0 	bl	8006298 <HAL_UARTEx_SetRxFifoThreshold>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800075e:	f000 f93d 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_LPUART1_UART_Init+0x8c>)
 8000764:	f005 fd21 	bl	80061aa <HAL_UARTEx_DisableFifoMode>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800076e:	f000 f935 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000dc 	.word	0x200000dc
 800077c:	40008000 	.word	0x40008000

08000780 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08e      	sub	sp, #56	; 0x38
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a0:	463b      	mov	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
 80007ae:	615a      	str	r2, [r3, #20]
 80007b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b2:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007b4:	4a2c      	ldr	r2, [pc, #176]	; (8000868 <MX_TIM3_Init+0xe8>)
 80007b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80007b8:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007ba:	22a9      	movs	r2, #169	; 0xa9
 80007bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007be:	4b29      	ldr	r3, [pc, #164]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80007c4:	4b27      	ldr	r3, [pc, #156]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007c6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80007ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007cc:	4b25      	ldr	r3, [pc, #148]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b24      	ldr	r3, [pc, #144]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007d8:	4822      	ldr	r0, [pc, #136]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007da:	f003 fc17 	bl	800400c <HAL_TIM_Base_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80007e4:	f000 f8fa 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f2:	4619      	mov	r1, r3
 80007f4:	481b      	ldr	r0, [pc, #108]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007f6:	f004 f8a9 	bl	800494c <HAL_TIM_ConfigClockSource>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000800:	f000 f8ec 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000804:	4817      	ldr	r0, [pc, #92]	; (8000864 <MX_TIM3_Init+0xe4>)
 8000806:	f003 fcc9 	bl	800419c <HAL_TIM_PWM_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000810:	f000 f8e4 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4810      	ldr	r0, [pc, #64]	; (8000864 <MX_TIM3_Init+0xe4>)
 8000824:	f004 fe7a 	bl	800551c <HAL_TIMEx_MasterConfigSynchronization>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800082e:	f000 f8d5 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000832:	2360      	movs	r3, #96	; 0x60
 8000834:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000836:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800083a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <MX_TIM3_Init+0xe4>)
 800084c:	f003 ff6a 	bl	8004724 <HAL_TIM_PWM_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000856:	f000 f8c1 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	3738      	adds	r7, #56	; 0x38
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000170 	.word	0x20000170
 8000868:	40000400 	.word	0x40000400

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <MX_GPIO_Init+0xd4>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a2e      	ldr	r2, [pc, #184]	; (8000940 <MX_GPIO_Init+0xd4>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_GPIO_Init+0xd4>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_GPIO_Init+0xd4>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a28      	ldr	r2, [pc, #160]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008a0:	f043 0320 	orr.w	r3, r3, #32
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0320 	and.w	r3, r3, #32
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a22      	ldr	r2, [pc, #136]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b20      	ldr	r3, [pc, #128]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2120      	movs	r1, #32
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ea:	f002 fb23 	bl	8002f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	480f      	ldr	r0, [pc, #60]	; (8000944 <MX_GPIO_Init+0xd8>)
 8000906:	f002 f993 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800090a:	2320      	movs	r3, #32
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000924:	f002 f984 	bl	8002c30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	2100      	movs	r1, #0
 800092c:	2028      	movs	r0, #40	; 0x28
 800092e:	f002 f94a 	bl	8002bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000932:	2028      	movs	r0, #40	; 0x28
 8000934:	f002 f961 	bl	8002bfa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	; 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000
 8000944:	48000800 	.word	0x48000800

08000948 <ADC_Read_blocking>:

/* USER CODE BEGIN 4 */
void ADC_Read_blocking()
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
	static uint32_t TimeStamp = 0;
	if( HAL_GetTick()<TimeStamp) return;
 800094e:	f000 fa43 	bl	8000dd8 <HAL_GetTick>
 8000952:	4602      	mov	r2, r0
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <ADC_Read_blocking+0x88>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	429a      	cmp	r2, r3
 800095a:	d334      	bcc.n	80009c6 <ADC_Read_blocking+0x7e>

	TimeStamp = HAL_GetTick()+500;
 800095c:	f000 fa3c 	bl	8000dd8 <HAL_GetTick>
 8000960:	4603      	mov	r3, r0
 8000962:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000966:	4a1a      	ldr	r2, [pc, #104]	; (80009d0 <ADC_Read_blocking+0x88>)
 8000968:	6013      	str	r3, [r2, #0]
	for(int i=0;i<1;i++)
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	e026      	b.n	80009be <ADC_Read_blocking+0x76>
	{
		HAL_ADC_ConfigChannel(&hadc1, &ADC1_Channel[i].Config);
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	4613      	mov	r3, r2
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	4413      	add	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <ADC_Read_blocking+0x8c>)
 800097c:	4413      	add	r3, r2
 800097e:	4619      	mov	r1, r3
 8000980:	4815      	ldr	r0, [pc, #84]	; (80009d8 <ADC_Read_blocking+0x90>)
 8000982:	f001 f897 	bl	8001ab4 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 8000986:	4814      	ldr	r0, [pc, #80]	; (80009d8 <ADC_Read_blocking+0x90>)
 8000988:	f000 fe68 	bl	800165c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 800098c:	2164      	movs	r1, #100	; 0x64
 800098e:	4812      	ldr	r0, [pc, #72]	; (80009d8 <ADC_Read_blocking+0x90>)
 8000990:	f000 ff7c 	bl	800188c <HAL_ADC_PollForConversion>
		ADC1_Channel[i].data = HAL_ADC_GetValue(&hadc1);
 8000994:	4810      	ldr	r0, [pc, #64]	; (80009d8 <ADC_Read_blocking+0x90>)
 8000996:	f001 f87f 	bl	8001a98 <HAL_ADC_GetValue>
 800099a:	4603      	mov	r3, r0
 800099c:	b298      	uxth	r0, r3
 800099e:	490d      	ldr	r1, [pc, #52]	; (80009d4 <ADC_Read_blocking+0x8c>)
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4613      	mov	r3, r2
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	4413      	add	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	440b      	add	r3, r1
 80009ac:	3320      	adds	r3, #32
 80009ae:	4602      	mov	r2, r0
 80009b0:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 80009b2:	4809      	ldr	r0, [pc, #36]	; (80009d8 <ADC_Read_blocking+0x90>)
 80009b4:	f000 ff36 	bl	8001824 <HAL_ADC_Stop>
	for(int i=0;i<1;i++)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3301      	adds	r3, #1
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	ddd5      	ble.n	8000970 <ADC_Read_blocking+0x28>
 80009c4:	e000      	b.n	80009c8 <ADC_Read_blocking+0x80>
	if( HAL_GetTick()<TimeStamp) return;
 80009c6:	bf00      	nop
	}
}
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200001bc 	.word	0x200001bc
 80009d4:	20000000 	.word	0x20000000
 80009d8:	20000070 	.word	0x20000070

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_MspInit+0x44>)
 80009f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f2:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <HAL_MspInit+0x44>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6613      	str	r3, [r2, #96]	; 0x60
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_MspInit+0x44>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x44>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x44>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6593      	str	r3, [r2, #88]	; 0x58
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x44>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a1e:	f002 fb69 	bl	80030f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b09e      	sub	sp, #120	; 0x78
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	2254      	movs	r2, #84	; 0x54
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f005 fcad 	bl	80063b0 <memset>
  if(hadc->Instance==ADC1)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a5e:	d134      	bne.n	8000aca <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a64:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a66:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a6a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4618      	mov	r0, r3
 8000a72:	f003 f87d 	bl	8003b70 <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a7c:	f7ff ffae 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_ADC_MspInit+0xa4>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a84:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <HAL_ADC_MspInit+0xa4>)
 8000a86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_ADC_MspInit+0xa4>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_ADC_MspInit+0xa4>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <HAL_ADC_MspInit+0xa4>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <HAL_ADC_MspInit+0xa4>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac6:	f002 f8b3 	bl	8002c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aca:	bf00      	nop
 8000acc:	3778      	adds	r7, #120	; 0x78
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09e      	sub	sp, #120	; 0x78
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	2254      	movs	r2, #84	; 0x54
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f005 fc59 	bl	80063b0 <memset>
  if(huart->Instance==LPUART1)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <HAL_UART_MspInit+0xa8>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d136      	bne.n	8000b76 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 f82b 	bl	8003b70 <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b20:	f7ff ff5c 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_UART_MspInit+0xac>)
 8000b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b28:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <HAL_UART_MspInit+0xac>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_UART_MspInit+0xac>)
 8000b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_UART_MspInit+0xac>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b40:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_UART_MspInit+0xac>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_UART_MspInit+0xac>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b54:	230c      	movs	r3, #12
 8000b56:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b64:	230c      	movs	r3, #12
 8000b66:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b72:	f002 f85d 	bl	8002c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3778      	adds	r7, #120	; 0x78
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40008000 	.word	0x40008000
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <HAL_TIM_Base_MspInit+0x8c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d12f      	bne.n	8000c0a <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <HAL_TIM_Base_MspInit+0x90>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <HAL_TIM_Base_MspInit+0x90>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_TIM_Base_MspInit+0x90>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_TIM_Base_MspInit+0x90>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <HAL_TIM_Base_MspInit+0x90>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_TIM_Base_MspInit+0x90>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bda:	2310      	movs	r3, #16
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bea:	2302      	movs	r3, #2
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4809      	ldr	r0, [pc, #36]	; (8000c1c <HAL_TIM_Base_MspInit+0x94>)
 8000bf6:	f002 f81b 	bl	8002c30 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	201d      	movs	r0, #29
 8000c00:	f001 ffe1 	bl	8002bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c04:	201d      	movs	r0, #29
 8000c06:	f001 fff8 	bl	8002bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40000400 	.word	0x40000400
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	48000400 	.word	0x48000400

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 f8a2 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <TIM3_IRQHandler+0x10>)
 8000c7a:	f003 fc03 	bl	8004484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000170 	.word	0x20000170

08000c88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c90:	f002 f968 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cbe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc0:	f7ff ffea 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	; (8000cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <LoopForever+0xe>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	; (8000d08 <LoopForever+0x16>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cea:	f005 fb69 	bl	80063c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cee:	f7ff fc11 	bl	8000514 <main>

08000cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   r0, =_estack
 8000cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000d00:	08006470 	.word	0x08006470
  ldr r2, =_sbss
 8000d04:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000d08:	200001c4 	.word	0x200001c4

08000d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_2_IRQHandler>

08000d0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f001 ff49 	bl	8002bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 f80e 	bl	8000d40 <HAL_InitTick>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	e001      	b.n	8000d34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d30:	f7ff fe5a 	bl	80009e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d34:	79fb      	ldrb	r3, [r7, #7]

}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_InitTick+0x68>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d022      	beq.n	8000d9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_InitTick+0x6c>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_InitTick+0x68>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 ff54 	bl	8002c16 <HAL_SYSTICK_Config>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10f      	bne.n	8000d94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b0f      	cmp	r3, #15
 8000d78:	d809      	bhi.n	8000d8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d82:	f001 ff20 	bl	8002bc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_InitTick+0x70>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	e007      	b.n	8000d9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e004      	b.n	8000d9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e001      	b.n	8000d9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000050 	.word	0x20000050
 8000dac:	20000048 	.word	0x20000048
 8000db0:	2000004c 	.word	0x2000004c

08000db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_IncTick+0x1c>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <HAL_IncTick+0x1c>)
 8000dc4:	6013      	str	r3, [r2, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	200001c0 	.word	0x200001c0
 8000dd4:	20000050 	.word	0x20000050

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200001c0 	.word	0x200001c0

08000df0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	609a      	str	r2, [r3, #8]
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3360      	adds	r3, #96	; 0x60
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <LL_ADC_SetOffset+0x44>)
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e82:	683a      	ldr	r2, [r7, #0]
 8000e84:	430a      	orrs	r2, r1
 8000e86:	4313      	orrs	r3, r2
 8000e88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e90:	bf00      	nop
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	03fff000 	.word	0x03fff000

08000ea0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3360      	adds	r3, #96	; 0x60
 8000eae:	461a      	mov	r2, r3
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	3360      	adds	r3, #96	; 0x60
 8000edc:	461a      	mov	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ef6:	bf00      	nop
 8000ef8:	371c      	adds	r7, #28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b087      	sub	sp, #28
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	3360      	adds	r3, #96	; 0x60
 8000f12:	461a      	mov	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	431a      	orrs	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000f2c:	bf00      	nop
 8000f2e:	371c      	adds	r7, #28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3360      	adds	r3, #96	; 0x60
 8000f48:	461a      	mov	r2, r3
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000f62:	bf00      	nop
 8000f64:	371c      	adds	r7, #28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	615a      	str	r2, [r3, #20]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e000      	b.n	8000fae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b087      	sub	sp, #28
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3330      	adds	r3, #48	; 0x30
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	4413      	add	r3, r2
 8000fd8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	211f      	movs	r1, #31
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	401a      	ands	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	0e9b      	lsrs	r3, r3, #26
 8000ff2:	f003 011f 	and.w	r1, r3, #31
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	f003 031f 	and.w	r3, r3, #31
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	431a      	orrs	r2, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001006:	bf00      	nop
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001012:	b480      	push	{r7}
 8001014:	b087      	sub	sp, #28
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3314      	adds	r3, #20
 8001022:	461a      	mov	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	0e5b      	lsrs	r3, r3, #25
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	4413      	add	r3, r2
 8001030:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	0d1b      	lsrs	r3, r3, #20
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	2107      	movs	r1, #7
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	401a      	ands	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	0d1b      	lsrs	r3, r3, #20
 800104c:	f003 031f 	and.w	r3, r3, #31
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	431a      	orrs	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800105c:	bf00      	nop
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001080:	43db      	mvns	r3, r3
 8001082:	401a      	ands	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0318 	and.w	r3, r3, #24
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800108c:	40d9      	lsrs	r1, r3
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	400b      	ands	r3, r1
 8001092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001096:	431a      	orrs	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	0007ffff 	.word	0x0007ffff

080010b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 031f 	and.w	r3, r3, #31
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6093      	str	r3, [r2, #8]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800111c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001120:	d101      	bne.n	8001126 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001144:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001148:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001170:	d101      	bne.n	8001176 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001194:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001198:	f043 0201 	orr.w	r2, r3, #1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011c0:	f043 0202 	orr.w	r2, r3, #2
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d101      	bne.n	80011ec <LL_ADC_IsEnabled+0x18>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <LL_ADC_IsEnabled+0x1a>
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b02      	cmp	r3, #2
 800120c:	d101      	bne.n	8001212 <LL_ADC_IsDisableOngoing+0x18>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <LL_ADC_IsDisableOngoing+0x1a>
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001230:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001234:	f043 0204 	orr.w	r2, r3, #4
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800125c:	f043 0210 	orr.w	r2, r3, #16
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b04      	cmp	r3, #4
 8001282:	d101      	bne.n	8001288 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012aa:	f043 0220 	orr.w	r2, r3, #32
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d101      	bne.n	80012d6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e1a9      	b.n	8001652 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001308:	2b00      	cmp	r3, #0
 800130a:	d109      	bne.n	8001320 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fb8f 	bl	8000a30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fef1 	bl	800110c <LL_ADC_IsDeepPowerDownEnabled>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fed7 	bl	80010e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff0c 	bl	800115c <LL_ADC_IsInternalRegulatorEnabled>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d115      	bne.n	8001376 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fef0 	bl	8001134 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001354:	4b9c      	ldr	r3, [pc, #624]	; (80015c8 <HAL_ADC_Init+0x2e4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	099b      	lsrs	r3, r3, #6
 800135a:	4a9c      	ldr	r2, [pc, #624]	; (80015cc <HAL_ADC_Init+0x2e8>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	099b      	lsrs	r3, r3, #6
 8001362:	3301      	adds	r3, #1
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001368:	e002      	b.n	8001370 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3b01      	subs	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f9      	bne.n	800136a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff feee 	bl	800115c <LL_ADC_IsInternalRegulatorEnabled>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10d      	bne.n	80013a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138a:	f043 0210 	orr.w	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001396:	f043 0201 	orr.w	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff62 	bl	8001270 <LL_ADC_REG_IsConversionOngoing>
 80013ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b2:	f003 0310 	and.w	r3, r3, #16
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f040 8142 	bne.w	8001640 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f040 813e 	bne.w	8001640 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013cc:	f043 0202 	orr.w	r2, r3, #2
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fefb 	bl	80011d4 <LL_ADC_IsEnabled>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d141      	bne.n	8001468 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013ec:	d004      	beq.n	80013f8 <HAL_ADC_Init+0x114>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a77      	ldr	r2, [pc, #476]	; (80015d0 <HAL_ADC_Init+0x2ec>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d10f      	bne.n	8001418 <HAL_ADC_Init+0x134>
 80013f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80013fc:	f7ff feea 	bl	80011d4 <LL_ADC_IsEnabled>
 8001400:	4604      	mov	r4, r0
 8001402:	4873      	ldr	r0, [pc, #460]	; (80015d0 <HAL_ADC_Init+0x2ec>)
 8001404:	f7ff fee6 	bl	80011d4 <LL_ADC_IsEnabled>
 8001408:	4603      	mov	r3, r0
 800140a:	4323      	orrs	r3, r4
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	e012      	b.n	800143e <HAL_ADC_Init+0x15a>
 8001418:	486e      	ldr	r0, [pc, #440]	; (80015d4 <HAL_ADC_Init+0x2f0>)
 800141a:	f7ff fedb 	bl	80011d4 <LL_ADC_IsEnabled>
 800141e:	4604      	mov	r4, r0
 8001420:	486d      	ldr	r0, [pc, #436]	; (80015d8 <HAL_ADC_Init+0x2f4>)
 8001422:	f7ff fed7 	bl	80011d4 <LL_ADC_IsEnabled>
 8001426:	4603      	mov	r3, r0
 8001428:	431c      	orrs	r4, r3
 800142a:	486c      	ldr	r0, [pc, #432]	; (80015dc <HAL_ADC_Init+0x2f8>)
 800142c:	f7ff fed2 	bl	80011d4 <LL_ADC_IsEnabled>
 8001430:	4603      	mov	r3, r0
 8001432:	4323      	orrs	r3, r4
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf0c      	ite	eq
 8001438:	2301      	moveq	r3, #1
 800143a:	2300      	movne	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d012      	beq.n	8001468 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800144a:	d004      	beq.n	8001456 <HAL_ADC_Init+0x172>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a5f      	ldr	r2, [pc, #380]	; (80015d0 <HAL_ADC_Init+0x2ec>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d101      	bne.n	800145a <HAL_ADC_Init+0x176>
 8001456:	4a62      	ldr	r2, [pc, #392]	; (80015e0 <HAL_ADC_Init+0x2fc>)
 8001458:	e000      	b.n	800145c <HAL_ADC_Init+0x178>
 800145a:	4a62      	ldr	r2, [pc, #392]	; (80015e4 <HAL_ADC_Init+0x300>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4619      	mov	r1, r3
 8001462:	4610      	mov	r0, r2
 8001464:	f7ff fcc4 	bl	8000df0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7f5b      	ldrb	r3, [r3, #29]
 800146c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001472:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001478:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800147e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001486:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001492:	2b01      	cmp	r3, #1
 8001494:	d106      	bne.n	80014a4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	3b01      	subs	r3, #1
 800149c:	045b      	lsls	r3, r3, #17
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d009      	beq.n	80014c0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	4b48      	ldr	r3, [pc, #288]	; (80015e8 <HAL_ADC_Init+0x304>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	69b9      	ldr	r1, [r7, #24]
 80014d0:	430b      	orrs	r3, r1
 80014d2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fee5 	bl	80012be <LL_ADC_INJ_IsConversionOngoing>
 80014f4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d17f      	bne.n	80015fc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d17c      	bne.n	80015fc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001506:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800150e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800151e:	f023 0302 	bic.w	r3, r3, #2
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	69b9      	ldr	r1, [r7, #24]
 8001528:	430b      	orrs	r3, r1
 800152a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d017      	beq.n	8001564 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001542:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800154c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001550:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6911      	ldr	r1, [r2, #16]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	430b      	orrs	r3, r1
 800155e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001562:	e013      	b.n	800158c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001572:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001584:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001588:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001592:	2b01      	cmp	r3, #1
 8001594:	d12a      	bne.n	80015ec <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015a0:	f023 0304 	bic.w	r3, r3, #4
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015ac:	4311      	orrs	r1, r2
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80015b2:	4311      	orrs	r1, r2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015b8:	430a      	orrs	r2, r1
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0201 	orr.w	r2, r2, #1
 80015c4:	611a      	str	r2, [r3, #16]
 80015c6:	e019      	b.n	80015fc <HAL_ADC_Init+0x318>
 80015c8:	20000048 	.word	0x20000048
 80015cc:	053e2d63 	.word	0x053e2d63
 80015d0:	50000100 	.word	0x50000100
 80015d4:	50000400 	.word	0x50000400
 80015d8:	50000500 	.word	0x50000500
 80015dc:	50000600 	.word	0x50000600
 80015e0:	50000300 	.word	0x50000300
 80015e4:	50000700 	.word	0x50000700
 80015e8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d10c      	bne.n	800161e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f023 010f 	bic.w	r1, r3, #15
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	1e5a      	subs	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	631a      	str	r2, [r3, #48]	; 0x30
 800161c:	e007      	b.n	800162e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 020f 	bic.w	r2, r2, #15
 800162c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001632:	f023 0303 	bic.w	r3, r3, #3
 8001636:	f043 0201 	orr.w	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	65da      	str	r2, [r3, #92]	; 0x5c
 800163e:	e007      	b.n	8001650 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001644:	f043 0210 	orr.w	r2, r3, #16
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001650:	7ffb      	ldrb	r3, [r7, #31]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3724      	adds	r7, #36	; 0x24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd90      	pop	{r4, r7, pc}
 800165a:	bf00      	nop

0800165c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800166c:	d004      	beq.n	8001678 <HAL_ADC_Start+0x1c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a67      	ldr	r2, [pc, #412]	; (8001810 <HAL_ADC_Start+0x1b4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d101      	bne.n	800167c <HAL_ADC_Start+0x20>
 8001678:	4b66      	ldr	r3, [pc, #408]	; (8001814 <HAL_ADC_Start+0x1b8>)
 800167a:	e000      	b.n	800167e <HAL_ADC_Start+0x22>
 800167c:	4b66      	ldr	r3, [pc, #408]	; (8001818 <HAL_ADC_Start+0x1bc>)
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fd16 	bl	80010b0 <LL_ADC_GetMultimode>
 8001684:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fdf0 	bl	8001270 <LL_ADC_REG_IsConversionOngoing>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 80b4 	bne.w	8001800 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_ADC_Start+0x4a>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e0af      	b.n	8001806 <HAL_ADC_Start+0x1aa>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fefc 	bl	80024ac <ADC_Enable>
 80016b4:	4603      	mov	r3, r0
 80016b6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f040 809b 	bne.w	80017f6 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a4d      	ldr	r2, [pc, #308]	; (8001810 <HAL_ADC_Start+0x1b4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d009      	beq.n	80016f2 <HAL_ADC_Start+0x96>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a4e      	ldr	r2, [pc, #312]	; (800181c <HAL_ADC_Start+0x1c0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d002      	beq.n	80016ee <HAL_ADC_Start+0x92>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	e003      	b.n	80016f6 <HAL_ADC_Start+0x9a>
 80016ee:	4b4c      	ldr	r3, [pc, #304]	; (8001820 <HAL_ADC_Start+0x1c4>)
 80016f0:	e001      	b.n	80016f6 <HAL_ADC_Start+0x9a>
 80016f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d002      	beq.n	8001704 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800171c:	d106      	bne.n	800172c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001722:	f023 0206 	bic.w	r2, r3, #6
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	661a      	str	r2, [r3, #96]	; 0x60
 800172a:	e002      	b.n	8001732 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	221c      	movs	r2, #28
 8001738:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a32      	ldr	r2, [pc, #200]	; (8001810 <HAL_ADC_Start+0x1b4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d009      	beq.n	8001760 <HAL_ADC_Start+0x104>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a32      	ldr	r2, [pc, #200]	; (800181c <HAL_ADC_Start+0x1c0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d002      	beq.n	800175c <HAL_ADC_Start+0x100>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	e003      	b.n	8001764 <HAL_ADC_Start+0x108>
 800175c:	4b30      	ldr	r3, [pc, #192]	; (8001820 <HAL_ADC_Start+0x1c4>)
 800175e:	e001      	b.n	8001764 <HAL_ADC_Start+0x108>
 8001760:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	4293      	cmp	r3, r2
 800176a:	d008      	beq.n	800177e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	2b05      	cmp	r3, #5
 8001776:	d002      	beq.n	800177e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b09      	cmp	r3, #9
 800177c:	d114      	bne.n	80017a8 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d007      	beq.n	800179c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001790:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001794:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fd3d 	bl	8001220 <LL_ADC_REG_StartConversion>
 80017a6:	e02d      	b.n	8001804 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a15      	ldr	r2, [pc, #84]	; (8001810 <HAL_ADC_Start+0x1b4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d009      	beq.n	80017d2 <HAL_ADC_Start+0x176>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a16      	ldr	r2, [pc, #88]	; (800181c <HAL_ADC_Start+0x1c0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d002      	beq.n	80017ce <HAL_ADC_Start+0x172>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	e003      	b.n	80017d6 <HAL_ADC_Start+0x17a>
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_ADC_Start+0x1c4>)
 80017d0:	e001      	b.n	80017d6 <HAL_ADC_Start+0x17a>
 80017d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017d6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00f      	beq.n	8001804 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80017f4:	e006      	b.n	8001804 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80017fe:	e001      	b.n	8001804 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001800:	2302      	movs	r3, #2
 8001802:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001804:	7dfb      	ldrb	r3, [r7, #23]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	50000100 	.word	0x50000100
 8001814:	50000300 	.word	0x50000300
 8001818:	50000700 	.word	0x50000700
 800181c:	50000500 	.word	0x50000500
 8001820:	50000400 	.word	0x50000400

08001824 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_ADC_Stop+0x16>
 8001836:	2302      	movs	r3, #2
 8001838:	e023      	b.n	8001882 <HAL_ADC_Stop+0x5e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001842:	2103      	movs	r1, #3
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fd75 	bl	8002334 <ADC_ConversionStop>
 800184a:	4603      	mov	r3, r0
 800184c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d111      	bne.n	8001878 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 febf 	bl	80025d8 <ADC_Disable>
 800185a:	4603      	mov	r3, r0
 800185c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d109      	bne.n	8001878 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001868:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	f043 0201 	orr.w	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800189e:	d004      	beq.n	80018aa <HAL_ADC_PollForConversion+0x1e>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a77      	ldr	r2, [pc, #476]	; (8001a84 <HAL_ADC_PollForConversion+0x1f8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_PollForConversion+0x22>
 80018aa:	4b77      	ldr	r3, [pc, #476]	; (8001a88 <HAL_ADC_PollForConversion+0x1fc>)
 80018ac:	e000      	b.n	80018b0 <HAL_ADC_PollForConversion+0x24>
 80018ae:	4b77      	ldr	r3, [pc, #476]	; (8001a8c <HAL_ADC_PollForConversion+0x200>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fbfd 	bl	80010b0 <LL_ADC_GetMultimode>
 80018b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d102      	bne.n	80018c6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80018c0:	2308      	movs	r3, #8
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	e037      	b.n	8001936 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2b05      	cmp	r3, #5
 80018d0:	d002      	beq.n	80018d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2b09      	cmp	r3, #9
 80018d6:	d111      	bne.n	80018fc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d007      	beq.n	80018f6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ea:	f043 0220 	orr.w	r2, r3, #32
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0c1      	b.n	8001a7a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80018f6:	2304      	movs	r3, #4
 80018f8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80018fa:	e01c      	b.n	8001936 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001904:	d004      	beq.n	8001910 <HAL_ADC_PollForConversion+0x84>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a5e      	ldr	r2, [pc, #376]	; (8001a84 <HAL_ADC_PollForConversion+0x1f8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d101      	bne.n	8001914 <HAL_ADC_PollForConversion+0x88>
 8001910:	4b5d      	ldr	r3, [pc, #372]	; (8001a88 <HAL_ADC_PollForConversion+0x1fc>)
 8001912:	e000      	b.n	8001916 <HAL_ADC_PollForConversion+0x8a>
 8001914:	4b5d      	ldr	r3, [pc, #372]	; (8001a8c <HAL_ADC_PollForConversion+0x200>)
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fbd8 	bl	80010cc <LL_ADC_GetMultiDMATransfer>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001926:	f043 0220 	orr.w	r2, r3, #32
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0a3      	b.n	8001a7a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001932:	2304      	movs	r3, #4
 8001934:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001936:	f7ff fa4f 	bl	8000dd8 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800193c:	e021      	b.n	8001982 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001944:	d01d      	beq.n	8001982 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001946:	f7ff fa47 	bl	8000dd8 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d302      	bcc.n	800195c <HAL_ADC_PollForConversion+0xd0>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d112      	bne.n	8001982 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4013      	ands	r3, r2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10b      	bne.n	8001982 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196e:	f043 0204 	orr.w	r2, r3, #4
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e07b      	b.n	8001a7a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0d6      	beq.n	800193e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001994:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff faf7 	bl	8000f94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01c      	beq.n	80019e6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	7f5b      	ldrb	r3, [r3, #29]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d118      	bne.n	80019e6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d111      	bne.n	80019e6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d105      	bne.n	80019e6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	f043 0201 	orr.w	r2, r3, #1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a26      	ldr	r2, [pc, #152]	; (8001a84 <HAL_ADC_PollForConversion+0x1f8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d009      	beq.n	8001a04 <HAL_ADC_PollForConversion+0x178>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <HAL_ADC_PollForConversion+0x204>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d002      	beq.n	8001a00 <HAL_ADC_PollForConversion+0x174>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	e003      	b.n	8001a08 <HAL_ADC_PollForConversion+0x17c>
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <HAL_ADC_PollForConversion+0x208>)
 8001a02:	e001      	b.n	8001a08 <HAL_ADC_PollForConversion+0x17c>
 8001a04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d008      	beq.n	8001a22 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d005      	beq.n	8001a22 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2b05      	cmp	r3, #5
 8001a1a:	d002      	beq.n	8001a22 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2b09      	cmp	r3, #9
 8001a20:	d104      	bne.n	8001a2c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	e014      	b.n	8001a56 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <HAL_ADC_PollForConversion+0x1f8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d009      	beq.n	8001a4a <HAL_ADC_PollForConversion+0x1be>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <HAL_ADC_PollForConversion+0x204>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d002      	beq.n	8001a46 <HAL_ADC_PollForConversion+0x1ba>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	e003      	b.n	8001a4e <HAL_ADC_PollForConversion+0x1c2>
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_ADC_PollForConversion+0x208>)
 8001a48:	e001      	b.n	8001a4e <HAL_ADC_PollForConversion+0x1c2>
 8001a4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a4e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d104      	bne.n	8001a66 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2208      	movs	r2, #8
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e008      	b.n	8001a78 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d103      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	220c      	movs	r2, #12
 8001a76:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3720      	adds	r7, #32
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	50000100 	.word	0x50000100
 8001a88:	50000300 	.word	0x50000300
 8001a8c:	50000700 	.word	0x50000700
 8001a90:	50000500 	.word	0x50000500
 8001a94:	50000400 	.word	0x50000400

08001a98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b0b6      	sub	sp, #216	; 0xd8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d102      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x24>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	f000 bc13 	b.w	80022fe <HAL_ADC_ConfigChannel+0x84a>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fbc3 	bl	8001270 <LL_ADC_REG_IsConversionOngoing>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f040 83f3 	bne.w	80022d8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6859      	ldr	r1, [r3, #4]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	f7ff fa5b 	bl	8000fba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fbb1 	bl	8001270 <LL_ADC_REG_IsConversionOngoing>
 8001b0e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fbd1 	bl	80012be <LL_ADC_INJ_IsConversionOngoing>
 8001b1c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f040 81d9 	bne.w	8001edc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 81d4 	bne.w	8001edc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b3c:	d10f      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff fa62 	bl	8001012 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fa09 	bl	8000f6e <LL_ADC_SetSamplingTimeCommonConfig>
 8001b5c:	e00e      	b.n	8001b7c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6819      	ldr	r1, [r3, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f7ff fa51 	bl	8001012 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f9f9 	bl	8000f6e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	08db      	lsrs	r3, r3, #3
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d022      	beq.n	8001be4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	6919      	ldr	r1, [r3, #16]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bae:	f7ff f953 	bl	8000e58 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6919      	ldr	r1, [r3, #16]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	f7ff f99f 	bl	8000f02 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d102      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x126>
 8001bd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd8:	e000      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x128>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f7ff f9ab 	bl	8000f38 <LL_ADC_SetOffsetSaturation>
 8001be2:	e17b      	b.n	8001edc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f958 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10a      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x15c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff f94d 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	0e9b      	lsrs	r3, r3, #26
 8001c0a:	f003 021f 	and.w	r2, r3, #31
 8001c0e:	e01e      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x19a>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f942 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e004      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001c42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d105      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x1b2>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0e9b      	lsrs	r3, r3, #26
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	e018      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x1e4>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	e004      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001c8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d106      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f911 	bl	8000ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2101      	movs	r1, #1
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f8f5 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10a      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x222>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f8ea 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	0e9b      	lsrs	r3, r3, #26
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	e01e      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x260>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2101      	movs	r1, #1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff f8df 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001cf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001cfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001d04:	2320      	movs	r3, #32
 8001d06:	e004      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001d08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d105      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x278>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0e9b      	lsrs	r3, r3, #26
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	e018      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x2aa>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001d50:	2320      	movs	r3, #32
 8001d52:	e004      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d106      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2200      	movs	r2, #0
 8001d68:	2101      	movs	r1, #1
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff f8ae 	bl	8000ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2102      	movs	r1, #2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f892 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10a      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x2e8>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff f887 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001d92:	4603      	mov	r3, r0
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	f003 021f 	and.w	r2, r3, #31
 8001d9a:	e01e      	b.n	8001dda <HAL_ADC_ConfigChannel+0x326>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2102      	movs	r1, #2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f87c 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001dba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001dc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001dca:	2320      	movs	r3, #32
 8001dcc:	e004      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001dce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d105      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x33e>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	0e9b      	lsrs	r3, r3, #26
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	e016      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x36c>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001e12:	2320      	movs	r3, #32
 8001e14:	e004      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d106      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff f84d 	bl	8000ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2103      	movs	r1, #3
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f831 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10a      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x3aa>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2103      	movs	r1, #3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff f826 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	0e9b      	lsrs	r3, r3, #26
 8001e58:	f003 021f 	and.w	r2, r3, #31
 8001e5c:	e017      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x3da>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2103      	movs	r1, #3
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff f81b 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e78:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001e80:	2320      	movs	r3, #32
 8001e82:	e003      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d105      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x3f2>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0e9b      	lsrs	r3, r3, #26
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	e011      	b.n	8001eca <HAL_ADC_ConfigChannel+0x416>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	e003      	b.n	8001eca <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d106      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fff8 	bl	8000ecc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff f977 	bl	80011d4 <LL_ADC_IsEnabled>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f040 813d 	bne.w	8002168 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6819      	ldr	r1, [r3, #0]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f7ff f8b4 	bl	8001068 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4aa2      	ldr	r2, [pc, #648]	; (8002190 <HAL_ADC_ConfigChannel+0x6dc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	f040 812e 	bne.w	8002168 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10b      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x480>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0e9b      	lsrs	r3, r3, #26
 8001f22:	3301      	adds	r3, #1
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	2b09      	cmp	r3, #9
 8001f2a:	bf94      	ite	ls
 8001f2c:	2301      	movls	r3, #1
 8001f2e:	2300      	movhi	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	e019      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x4b4>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f44:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	e003      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2b09      	cmp	r3, #9
 8001f60:	bf94      	ite	ls
 8001f62:	2301      	movls	r3, #1
 8001f64:	2300      	movhi	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d079      	beq.n	8002060 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d107      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x4d4>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0e9b      	lsrs	r3, r3, #26
 8001f7e:	3301      	adds	r3, #1
 8001f80:	069b      	lsls	r3, r3, #26
 8001f82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f86:	e015      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x500>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f98:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	e003      	b.n	8001fac <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	069b      	lsls	r3, r3, #26
 8001fb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d109      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x520>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0e9b      	lsrs	r3, r3, #26
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	2101      	movs	r1, #1
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	e017      	b.n	8002004 <HAL_ADC_ConfigChannel+0x550>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001fec:	2320      	movs	r3, #32
 8001fee:	e003      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	2101      	movs	r1, #1
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	ea42 0103 	orr.w	r1, r2, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10a      	bne.n	800202a <HAL_ADC_ConfigChannel+0x576>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0e9b      	lsrs	r3, r3, #26
 800201a:	3301      	adds	r3, #1
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	051b      	lsls	r3, r3, #20
 8002028:	e018      	b.n	800205c <HAL_ADC_ConfigChannel+0x5a8>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800203c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002042:	2320      	movs	r3, #32
 8002044:	e003      	b.n	800204e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	3301      	adds	r3, #1
 8002050:	f003 021f 	and.w	r2, r3, #31
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800205c:	430b      	orrs	r3, r1
 800205e:	e07e      	b.n	800215e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002068:	2b00      	cmp	r3, #0
 800206a:	d107      	bne.n	800207c <HAL_ADC_ConfigChannel+0x5c8>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	3301      	adds	r3, #1
 8002074:	069b      	lsls	r3, r3, #26
 8002076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800207a:	e015      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x5f4>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002094:	2320      	movs	r3, #32
 8002096:	e003      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	3301      	adds	r3, #1
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d109      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x614>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	0e9b      	lsrs	r3, r3, #26
 80020ba:	3301      	adds	r3, #1
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	2101      	movs	r1, #1
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	e017      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x644>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	61fb      	str	r3, [r7, #28]
  return result;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e003      	b.n	80020ec <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	3301      	adds	r3, #1
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	ea42 0103 	orr.w	r1, r2, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10d      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x670>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0e9b      	lsrs	r3, r3, #26
 800210e:	3301      	adds	r3, #1
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	3b1e      	subs	r3, #30
 800211c:	051b      	lsls	r3, r3, #20
 800211e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002122:	e01b      	b.n	800215c <HAL_ADC_ConfigChannel+0x6a8>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	613b      	str	r3, [r7, #16]
  return result;
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800213c:	2320      	movs	r3, #32
 800213e:	e003      	b.n	8002148 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	3301      	adds	r3, #1
 800214a:	f003 021f 	and.w	r2, r3, #31
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	3b1e      	subs	r3, #30
 8002156:	051b      	lsls	r3, r3, #20
 8002158:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800215c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002162:	4619      	mov	r1, r3
 8002164:	f7fe ff55 	bl	8001012 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_ADC_ConfigChannel+0x6e0>)
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80be 	beq.w	80022f2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800217e:	d004      	beq.n	800218a <HAL_ADC_ConfigChannel+0x6d6>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_ADC_ConfigChannel+0x6e4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d10a      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x6ec>
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <HAL_ADC_ConfigChannel+0x6e8>)
 800218c:	e009      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x6ee>
 800218e:	bf00      	nop
 8002190:	407f0000 	.word	0x407f0000
 8002194:	80080000 	.word	0x80080000
 8002198:	50000100 	.word	0x50000100
 800219c:	50000300 	.word	0x50000300
 80021a0:	4b59      	ldr	r3, [pc, #356]	; (8002308 <HAL_ADC_ConfigChannel+0x854>)
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe fe4a 	bl	8000e3c <LL_ADC_GetCommonPathInternalCh>
 80021a8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a56      	ldr	r2, [pc, #344]	; (800230c <HAL_ADC_ConfigChannel+0x858>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d004      	beq.n	80021c0 <HAL_ADC_ConfigChannel+0x70c>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a55      	ldr	r2, [pc, #340]	; (8002310 <HAL_ADC_ConfigChannel+0x85c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d13a      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d134      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d4:	d005      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x72e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a4e      	ldr	r2, [pc, #312]	; (8002314 <HAL_ADC_ConfigChannel+0x860>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	f040 8085 	bne.w	80022ec <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021ea:	d004      	beq.n	80021f6 <HAL_ADC_ConfigChannel+0x742>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a49      	ldr	r2, [pc, #292]	; (8002318 <HAL_ADC_ConfigChannel+0x864>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x746>
 80021f6:	4a49      	ldr	r2, [pc, #292]	; (800231c <HAL_ADC_ConfigChannel+0x868>)
 80021f8:	e000      	b.n	80021fc <HAL_ADC_ConfigChannel+0x748>
 80021fa:	4a43      	ldr	r2, [pc, #268]	; (8002308 <HAL_ADC_ConfigChannel+0x854>)
 80021fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002200:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f7fe fe05 	bl	8000e16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800220c:	4b44      	ldr	r3, [pc, #272]	; (8002320 <HAL_ADC_ConfigChannel+0x86c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	4a44      	ldr	r2, [pc, #272]	; (8002324 <HAL_ADC_ConfigChannel+0x870>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002226:	e002      	b.n	800222e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3b01      	subs	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f9      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002234:	e05a      	b.n	80022ec <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a3b      	ldr	r2, [pc, #236]	; (8002328 <HAL_ADC_ConfigChannel+0x874>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d125      	bne.n	800228c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d11f      	bne.n	800228c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a31      	ldr	r2, [pc, #196]	; (8002318 <HAL_ADC_ConfigChannel+0x864>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d104      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x7ac>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a34      	ldr	r2, [pc, #208]	; (800232c <HAL_ADC_ConfigChannel+0x878>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d047      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002268:	d004      	beq.n	8002274 <HAL_ADC_ConfigChannel+0x7c0>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a2a      	ldr	r2, [pc, #168]	; (8002318 <HAL_ADC_ConfigChannel+0x864>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x7c4>
 8002274:	4a29      	ldr	r2, [pc, #164]	; (800231c <HAL_ADC_ConfigChannel+0x868>)
 8002276:	e000      	b.n	800227a <HAL_ADC_ConfigChannel+0x7c6>
 8002278:	4a23      	ldr	r2, [pc, #140]	; (8002308 <HAL_ADC_ConfigChannel+0x854>)
 800227a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800227e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002282:	4619      	mov	r1, r3
 8002284:	4610      	mov	r0, r2
 8002286:	f7fe fdc6 	bl	8000e16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800228a:	e031      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a27      	ldr	r2, [pc, #156]	; (8002330 <HAL_ADC_ConfigChannel+0x87c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d12d      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800229a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d127      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a1c      	ldr	r2, [pc, #112]	; (8002318 <HAL_ADC_ConfigChannel+0x864>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d022      	beq.n	80022f2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022b4:	d004      	beq.n	80022c0 <HAL_ADC_ConfigChannel+0x80c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a17      	ldr	r2, [pc, #92]	; (8002318 <HAL_ADC_ConfigChannel+0x864>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x810>
 80022c0:	4a16      	ldr	r2, [pc, #88]	; (800231c <HAL_ADC_ConfigChannel+0x868>)
 80022c2:	e000      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x812>
 80022c4:	4a10      	ldr	r2, [pc, #64]	; (8002308 <HAL_ADC_ConfigChannel+0x854>)
 80022c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022ce:	4619      	mov	r1, r3
 80022d0:	4610      	mov	r0, r2
 80022d2:	f7fe fda0 	bl	8000e16 <LL_ADC_SetCommonPathInternalCh>
 80022d6:	e00c      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	f043 0220 	orr.w	r2, r3, #32
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80022ea:	e002      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022ec:	bf00      	nop
 80022ee:	e000      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80022fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	37d8      	adds	r7, #216	; 0xd8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	50000700 	.word	0x50000700
 800230c:	c3210000 	.word	0xc3210000
 8002310:	90c00010 	.word	0x90c00010
 8002314:	50000600 	.word	0x50000600
 8002318:	50000100 	.word	0x50000100
 800231c:	50000300 	.word	0x50000300
 8002320:	20000048 	.word	0x20000048
 8002324:	053e2d63 	.word	0x053e2d63
 8002328:	c7520000 	.word	0xc7520000
 800232c:	50000500 	.word	0x50000500
 8002330:	cb840000 	.word	0xcb840000

08002334 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe ff90 	bl	8001270 <LL_ADC_REG_IsConversionOngoing>
 8002350:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe ffb1 	bl	80012be <LL_ADC_INJ_IsConversionOngoing>
 800235c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d103      	bne.n	800236c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8098 	beq.w	800249c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d02a      	beq.n	80023d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7f5b      	ldrb	r3, [r3, #29]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d126      	bne.n	80023d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7f1b      	ldrb	r3, [r3, #28]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d122      	bne.n	80023d0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800238a:	2301      	movs	r3, #1
 800238c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800238e:	e014      	b.n	80023ba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	4a45      	ldr	r2, [pc, #276]	; (80024a8 <ADC_ConversionStop+0x174>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d90d      	bls.n	80023b4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239c:	f043 0210 	orr.w	r2, r3, #16
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a8:	f043 0201 	orr.w	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e074      	b.n	800249e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	3301      	adds	r3, #1
 80023b8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d1e3      	bne.n	8002390 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2240      	movs	r2, #64	; 0x40
 80023ce:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d014      	beq.n	8002400 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe ff48 	bl	8001270 <LL_ADC_REG_IsConversionOngoing>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00c      	beq.n	8002400 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe ff05 	bl	80011fa <LL_ADC_IsDisableOngoing>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d104      	bne.n	8002400 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe ff24 	bl	8001248 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d014      	beq.n	8002430 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe ff57 	bl	80012be <LL_ADC_INJ_IsConversionOngoing>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00c      	beq.n	8002430 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe feed 	bl	80011fa <LL_ADC_IsDisableOngoing>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d104      	bne.n	8002430 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe ff33 	bl	8001296 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d005      	beq.n	8002442 <ADC_ConversionStop+0x10e>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d105      	bne.n	8002448 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800243c:	230c      	movs	r3, #12
 800243e:	617b      	str	r3, [r7, #20]
        break;
 8002440:	e005      	b.n	800244e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002442:	2308      	movs	r3, #8
 8002444:	617b      	str	r3, [r7, #20]
        break;
 8002446:	e002      	b.n	800244e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002448:	2304      	movs	r3, #4
 800244a:	617b      	str	r3, [r7, #20]
        break;
 800244c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800244e:	f7fe fcc3 	bl	8000dd8 <HAL_GetTick>
 8002452:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002454:	e01b      	b.n	800248e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002456:	f7fe fcbf 	bl	8000dd8 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b05      	cmp	r3, #5
 8002462:	d914      	bls.n	800248e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00d      	beq.n	800248e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	f043 0210 	orr.w	r2, r3, #16
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e007      	b.n	800249e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1dc      	bne.n	8002456 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3720      	adds	r7, #32
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	a33fffff 	.word	0xa33fffff

080024ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fe89 	bl	80011d4 <LL_ADC_IsEnabled>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d176      	bne.n	80025b6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	4b3c      	ldr	r3, [pc, #240]	; (80025c0 <ADC_Enable+0x114>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00d      	beq.n	80024f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024da:	f043 0210 	orr.w	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e062      	b.n	80025b8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fe44 	bl	8001184 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002504:	d004      	beq.n	8002510 <ADC_Enable+0x64>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2e      	ldr	r2, [pc, #184]	; (80025c4 <ADC_Enable+0x118>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d101      	bne.n	8002514 <ADC_Enable+0x68>
 8002510:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <ADC_Enable+0x11c>)
 8002512:	e000      	b.n	8002516 <ADC_Enable+0x6a>
 8002514:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <ADC_Enable+0x120>)
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fc90 	bl	8000e3c <LL_ADC_GetCommonPathInternalCh>
 800251c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800251e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002522:	2b00      	cmp	r3, #0
 8002524:	d013      	beq.n	800254e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002526:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <ADC_Enable+0x124>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	099b      	lsrs	r3, r3, #6
 800252c:	4a29      	ldr	r2, [pc, #164]	; (80025d4 <ADC_Enable+0x128>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002540:	e002      	b.n	8002548 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	3b01      	subs	r3, #1
 8002546:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f9      	bne.n	8002542 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800254e:	f7fe fc43 	bl	8000dd8 <HAL_GetTick>
 8002552:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002554:	e028      	b.n	80025a8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fe3a 	bl	80011d4 <LL_ADC_IsEnabled>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d104      	bne.n	8002570 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fe0a 	bl	8001184 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002570:	f7fe fc32 	bl	8000dd8 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d914      	bls.n	80025a8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d00d      	beq.n	80025a8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002590:	f043 0210 	orr.w	r2, r3, #16
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e007      	b.n	80025b8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d1cf      	bne.n	8002556 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	8000003f 	.word	0x8000003f
 80025c4:	50000100 	.word	0x50000100
 80025c8:	50000300 	.word	0x50000300
 80025cc:	50000700 	.word	0x50000700
 80025d0:	20000048 	.word	0x20000048
 80025d4:	053e2d63 	.word	0x053e2d63

080025d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fe08 	bl	80011fa <LL_ADC_IsDisableOngoing>
 80025ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fdef 	bl	80011d4 <LL_ADC_IsEnabled>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d047      	beq.n	800268c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d144      	bne.n	800268c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 030d 	and.w	r3, r3, #13
 800260c:	2b01      	cmp	r3, #1
 800260e:	d10c      	bne.n	800262a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe fdc9 	bl	80011ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2203      	movs	r2, #3
 8002620:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002622:	f7fe fbd9 	bl	8000dd8 <HAL_GetTick>
 8002626:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002628:	e029      	b.n	800267e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e023      	b.n	800268e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002646:	f7fe fbc7 	bl	8000dd8 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d914      	bls.n	800267e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	f043 0210 	orr.w	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002672:	f043 0201 	orr.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e007      	b.n	800268e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1dc      	bne.n	8002646 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <LL_ADC_IsEnabled>:
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <LL_ADC_IsEnabled+0x18>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_ADC_IsEnabled+0x1a>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_StartCalibration>:
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80026ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026d8:	4313      	orrs	r3, r2
 80026da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	609a      	str	r2, [r3, #8]
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <LL_ADC_IsCalibrationOnGoing>:
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002702:	d101      	bne.n	8002708 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <LL_ADC_REG_IsConversionOngoing>:
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b04      	cmp	r3, #4
 8002728:	d101      	bne.n	800272e <LL_ADC_REG_IsConversionOngoing+0x18>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_ADCEx_Calibration_Start+0x1c>
 8002754:	2302      	movs	r3, #2
 8002756:	e04d      	b.n	80027f4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ff39 	bl	80025d8 <ADC_Disable>
 8002766:	4603      	mov	r3, r0
 8002768:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d136      	bne.n	80027de <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002778:	f023 0302 	bic.w	r3, r3, #2
 800277c:	f043 0202 	orr.w	r2, r3, #2
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6839      	ldr	r1, [r7, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ff96 	bl	80026bc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002790:	e014      	b.n	80027bc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	3301      	adds	r3, #1
 8002796:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4a18      	ldr	r2, [pc, #96]	; (80027fc <HAL_ADCEx_Calibration_Start+0xc0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d90d      	bls.n	80027bc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a4:	f023 0312 	bic.w	r3, r3, #18
 80027a8:	f043 0210 	orr.w	r2, r3, #16
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e01b      	b.n	80027f4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff94 	bl	80026ee <LL_ADC_IsCalibrationOnGoing>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e2      	bne.n	8002792 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	f023 0303 	bic.w	r3, r3, #3
 80027d4:	f043 0201 	orr.w	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	65da      	str	r2, [r3, #92]	; 0x5c
 80027dc:	e005      	b.n	80027ea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e2:	f043 0210 	orr.w	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	0004de01 	.word	0x0004de01

08002800 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b0a1      	sub	sp, #132	; 0x84
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800281a:	2302      	movs	r3, #2
 800281c:	e0e7      	b.n	80029ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002826:	2300      	movs	r3, #0
 8002828:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800282a:	2300      	movs	r3, #0
 800282c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002836:	d102      	bne.n	800283e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002838:	4b6f      	ldr	r3, [pc, #444]	; (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	e009      	b.n	8002852 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6e      	ldr	r2, [pc, #440]	; (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d102      	bne.n	800284e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002848:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	e001      	b.n	8002852 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10b      	bne.n	8002870 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285c:	f043 0220 	orr.w	r2, r3, #32
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0be      	b.n	80029ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff4f 	bl	8002716 <LL_ADC_REG_IsConversionOngoing>
 8002878:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff ff49 	bl	8002716 <LL_ADC_REG_IsConversionOngoing>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 80a0 	bne.w	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800288c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 809c 	bne.w	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800289c:	d004      	beq.n	80028a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a55      	ldr	r2, [pc, #340]	; (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d101      	bne.n	80028ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80028a8:	4b56      	ldr	r3, [pc, #344]	; (8002a04 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80028aa:	e000      	b.n	80028ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80028ac:	4b56      	ldr	r3, [pc, #344]	; (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80028ae:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d04b      	beq.n	8002950 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028ca:	035b      	lsls	r3, r3, #13
 80028cc:	430b      	orrs	r3, r1
 80028ce:	431a      	orrs	r2, r3
 80028d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028dc:	d004      	beq.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a45      	ldr	r2, [pc, #276]	; (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d10f      	bne.n	8002908 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80028e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80028ec:	f7ff fed3 	bl	8002696 <LL_ADC_IsEnabled>
 80028f0:	4604      	mov	r4, r0
 80028f2:	4841      	ldr	r0, [pc, #260]	; (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028f4:	f7ff fecf 	bl	8002696 <LL_ADC_IsEnabled>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4323      	orrs	r3, r4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	e012      	b.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002908:	483c      	ldr	r0, [pc, #240]	; (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800290a:	f7ff fec4 	bl	8002696 <LL_ADC_IsEnabled>
 800290e:	4604      	mov	r4, r0
 8002910:	483b      	ldr	r0, [pc, #236]	; (8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002912:	f7ff fec0 	bl	8002696 <LL_ADC_IsEnabled>
 8002916:	4603      	mov	r3, r0
 8002918:	431c      	orrs	r4, r3
 800291a:	483c      	ldr	r0, [pc, #240]	; (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800291c:	f7ff febb 	bl	8002696 <LL_ADC_IsEnabled>
 8002920:	4603      	mov	r3, r0
 8002922:	4323      	orrs	r3, r4
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf0c      	ite	eq
 8002928:	2301      	moveq	r3, #1
 800292a:	2300      	movne	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d056      	beq.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800293a:	f023 030f 	bic.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	6811      	ldr	r1, [r2, #0]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	6892      	ldr	r2, [r2, #8]
 8002946:	430a      	orrs	r2, r1
 8002948:	431a      	orrs	r2, r3
 800294a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800294c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800294e:	e047      	b.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800295a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002964:	d004      	beq.n	8002970 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a23      	ldr	r2, [pc, #140]	; (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d10f      	bne.n	8002990 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002970:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002974:	f7ff fe8f 	bl	8002696 <LL_ADC_IsEnabled>
 8002978:	4604      	mov	r4, r0
 800297a:	481f      	ldr	r0, [pc, #124]	; (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800297c:	f7ff fe8b 	bl	8002696 <LL_ADC_IsEnabled>
 8002980:	4603      	mov	r3, r0
 8002982:	4323      	orrs	r3, r4
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	e012      	b.n	80029b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002990:	481a      	ldr	r0, [pc, #104]	; (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002992:	f7ff fe80 	bl	8002696 <LL_ADC_IsEnabled>
 8002996:	4604      	mov	r4, r0
 8002998:	4819      	ldr	r0, [pc, #100]	; (8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800299a:	f7ff fe7c 	bl	8002696 <LL_ADC_IsEnabled>
 800299e:	4603      	mov	r3, r0
 80029a0:	431c      	orrs	r4, r3
 80029a2:	481a      	ldr	r0, [pc, #104]	; (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029a4:	f7ff fe77 	bl	8002696 <LL_ADC_IsEnabled>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4323      	orrs	r3, r4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d012      	beq.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029c2:	f023 030f 	bic.w	r3, r3, #15
 80029c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80029c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029ca:	e009      	b.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80029de:	e000      	b.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80029ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3784      	adds	r7, #132	; 0x84
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd90      	pop	{r4, r7, pc}
 80029f6:	bf00      	nop
 80029f8:	50000100 	.word	0x50000100
 80029fc:	50000400 	.word	0x50000400
 8002a00:	50000500 	.word	0x50000500
 8002a04:	50000300 	.word	0x50000300
 8002a08:	50000700 	.word	0x50000700
 8002a0c:	50000600 	.word	0x50000600

08002a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a20:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <__NVIC_SetPriorityGrouping+0x44>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a42:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <__NVIC_SetPriorityGrouping+0x44>)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	60d3      	str	r3, [r2, #12]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a5c:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <__NVIC_GetPriorityGrouping+0x18>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	f003 0307 	and.w	r3, r3, #7
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	db0b      	blt.n	8002a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	f003 021f 	and.w	r2, r3, #31
 8002a8c:	4907      	ldr	r1, [pc, #28]	; (8002aac <__NVIC_EnableIRQ+0x38>)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	2001      	movs	r0, #1
 8002a96:	fa00 f202 	lsl.w	r2, r0, r2
 8002a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000e100 	.word	0xe000e100

08002ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	6039      	str	r1, [r7, #0]
 8002aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	db0a      	blt.n	8002ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	490c      	ldr	r1, [pc, #48]	; (8002afc <__NVIC_SetPriority+0x4c>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	0112      	lsls	r2, r2, #4
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad8:	e00a      	b.n	8002af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	4908      	ldr	r1, [pc, #32]	; (8002b00 <__NVIC_SetPriority+0x50>)
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	3b04      	subs	r3, #4
 8002ae8:	0112      	lsls	r2, r2, #4
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	440b      	add	r3, r1
 8002aee:	761a      	strb	r2, [r3, #24]
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000e100 	.word	0xe000e100
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	; 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f1c3 0307 	rsb	r3, r3, #7
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	bf28      	it	cs
 8002b22:	2304      	movcs	r3, #4
 8002b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	2b06      	cmp	r3, #6
 8002b2c:	d902      	bls.n	8002b34 <NVIC_EncodePriority+0x30>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3b03      	subs	r3, #3
 8002b32:	e000      	b.n	8002b36 <NVIC_EncodePriority+0x32>
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43da      	mvns	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	401a      	ands	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	43d9      	mvns	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	4313      	orrs	r3, r2
         );
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3724      	adds	r7, #36	; 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b7c:	d301      	bcc.n	8002b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00f      	b.n	8002ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b82:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <SysTick_Config+0x40>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8a:	210f      	movs	r1, #15
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b90:	f7ff ff8e 	bl	8002ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <SysTick_Config+0x40>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9a:	4b04      	ldr	r3, [pc, #16]	; (8002bac <SysTick_Config+0x40>)
 8002b9c:	2207      	movs	r2, #7
 8002b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	e000e010 	.word	0xe000e010

08002bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ff29 	bl	8002a10 <__NVIC_SetPriorityGrouping>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd4:	f7ff ff40 	bl	8002a58 <__NVIC_GetPriorityGrouping>
 8002bd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f7ff ff90 	bl	8002b04 <NVIC_EncodePriority>
 8002be4:	4602      	mov	r2, r0
 8002be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff5f 	bl	8002ab0 <__NVIC_SetPriority>
}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff33 	bl	8002a74 <__NVIC_EnableIRQ>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ffa4 	bl	8002b6c <SysTick_Config>
 8002c24:	4603      	mov	r3, r0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c3e:	e15a      	b.n	8002ef6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	2101      	movs	r1, #1
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 814c 	beq.w	8002ef0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d005      	beq.n	8002c70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d130      	bne.n	8002cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4013      	ands	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	f003 0201 	and.w	r2, r3, #1
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d017      	beq.n	8002d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	2203      	movs	r2, #3
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d123      	bne.n	8002d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	08da      	lsrs	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3208      	adds	r2, #8
 8002d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	220f      	movs	r2, #15
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	08da      	lsrs	r2, r3, #3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3208      	adds	r2, #8
 8002d5c:	6939      	ldr	r1, [r7, #16]
 8002d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 0203 	and.w	r2, r3, #3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80a6 	beq.w	8002ef0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da4:	4b5b      	ldr	r3, [pc, #364]	; (8002f14 <HAL_GPIO_Init+0x2e4>)
 8002da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da8:	4a5a      	ldr	r2, [pc, #360]	; (8002f14 <HAL_GPIO_Init+0x2e4>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6613      	str	r3, [r2, #96]	; 0x60
 8002db0:	4b58      	ldr	r3, [pc, #352]	; (8002f14 <HAL_GPIO_Init+0x2e4>)
 8002db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dbc:	4a56      	ldr	r2, [pc, #344]	; (8002f18 <HAL_GPIO_Init+0x2e8>)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002de6:	d01f      	beq.n	8002e28 <HAL_GPIO_Init+0x1f8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a4c      	ldr	r2, [pc, #304]	; (8002f1c <HAL_GPIO_Init+0x2ec>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d019      	beq.n	8002e24 <HAL_GPIO_Init+0x1f4>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a4b      	ldr	r2, [pc, #300]	; (8002f20 <HAL_GPIO_Init+0x2f0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d013      	beq.n	8002e20 <HAL_GPIO_Init+0x1f0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a4a      	ldr	r2, [pc, #296]	; (8002f24 <HAL_GPIO_Init+0x2f4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00d      	beq.n	8002e1c <HAL_GPIO_Init+0x1ec>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a49      	ldr	r2, [pc, #292]	; (8002f28 <HAL_GPIO_Init+0x2f8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d007      	beq.n	8002e18 <HAL_GPIO_Init+0x1e8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a48      	ldr	r2, [pc, #288]	; (8002f2c <HAL_GPIO_Init+0x2fc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d101      	bne.n	8002e14 <HAL_GPIO_Init+0x1e4>
 8002e10:	2305      	movs	r3, #5
 8002e12:	e00a      	b.n	8002e2a <HAL_GPIO_Init+0x1fa>
 8002e14:	2306      	movs	r3, #6
 8002e16:	e008      	b.n	8002e2a <HAL_GPIO_Init+0x1fa>
 8002e18:	2304      	movs	r3, #4
 8002e1a:	e006      	b.n	8002e2a <HAL_GPIO_Init+0x1fa>
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e004      	b.n	8002e2a <HAL_GPIO_Init+0x1fa>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e002      	b.n	8002e2a <HAL_GPIO_Init+0x1fa>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_GPIO_Init+0x1fa>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	f002 0203 	and.w	r2, r2, #3
 8002e30:	0092      	lsls	r2, r2, #2
 8002e32:	4093      	lsls	r3, r2
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e3a:	4937      	ldr	r1, [pc, #220]	; (8002f18 <HAL_GPIO_Init+0x2e8>)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	3302      	adds	r3, #2
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e48:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <HAL_GPIO_Init+0x300>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e6c:	4a30      	ldr	r2, [pc, #192]	; (8002f30 <HAL_GPIO_Init+0x300>)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e72:	4b2f      	ldr	r3, [pc, #188]	; (8002f30 <HAL_GPIO_Init+0x300>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e96:	4a26      	ldr	r2, [pc, #152]	; (8002f30 <HAL_GPIO_Init+0x300>)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e9c:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_GPIO_Init+0x300>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ec0:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <HAL_GPIO_Init+0x300>)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_GPIO_Init+0x300>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eea:	4a11      	ldr	r2, [pc, #68]	; (8002f30 <HAL_GPIO_Init+0x300>)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f47f ae9d 	bne.w	8002c40 <HAL_GPIO_Init+0x10>
  }
}
 8002f06:	bf00      	nop
 8002f08:	bf00      	nop
 8002f0a:	371c      	adds	r7, #28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40010000 	.word	0x40010000
 8002f1c:	48000400 	.word	0x48000400
 8002f20:	48000800 	.word	0x48000800
 8002f24:	48000c00 	.word	0x48000c00
 8002f28:	48001000 	.word	0x48001000
 8002f2c:	48001400 	.word	0x48001400
 8002f30:	40010400 	.word	0x40010400

08002f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	807b      	strh	r3, [r7, #2]
 8002f40:	4613      	mov	r3, r2
 8002f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f44:	787b      	ldrb	r3, [r7, #1]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f50:	e002      	b.n	8002f58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d006      	beq.n	8002f88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f7a:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f806 	bl	8002f94 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40010400 	.word	0x40010400

08002f94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d141      	bne.n	800303e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fba:	4b4b      	ldr	r3, [pc, #300]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc6:	d131      	bne.n	800302c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fc8:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fce:	4a46      	ldr	r2, [pc, #280]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fd8:	4b43      	ldr	r3, [pc, #268]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fe0:	4a41      	ldr	r2, [pc, #260]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fe8:	4b40      	ldr	r3, [pc, #256]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2232      	movs	r2, #50	; 0x32
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
 8002ff2:	4a3f      	ldr	r2, [pc, #252]	; (80030f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	0c9b      	lsrs	r3, r3, #18
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ffe:	e002      	b.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3b01      	subs	r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003006:	4b38      	ldr	r3, [pc, #224]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003012:	d102      	bne.n	800301a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f2      	bne.n	8003000 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800301a:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003026:	d158      	bne.n	80030da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e057      	b.n	80030dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800302c:	4b2e      	ldr	r3, [pc, #184]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003032:	4a2d      	ldr	r2, [pc, #180]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003038:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800303c:	e04d      	b.n	80030da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003044:	d141      	bne.n	80030ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003046:	4b28      	ldr	r3, [pc, #160]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003052:	d131      	bne.n	80030b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003054:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800305a:	4a23      	ldr	r2, [pc, #140]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003060:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003064:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800306c:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003072:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003074:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2232      	movs	r2, #50	; 0x32
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	4a1c      	ldr	r2, [pc, #112]	; (80030f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	0c9b      	lsrs	r3, r3, #18
 8003086:	3301      	adds	r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800308a:	e002      	b.n	8003092 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3b01      	subs	r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003092:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309e:	d102      	bne.n	80030a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f2      	bne.n	800308c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b2:	d112      	bne.n	80030da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e011      	b.n	80030dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030be:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030c8:	e007      	b.n	80030da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030ca:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030d2:	4a05      	ldr	r2, [pc, #20]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40007000 	.word	0x40007000
 80030ec:	20000048 	.word	0x20000048
 80030f0:	431bde83 	.word	0x431bde83

080030f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003102:	6093      	str	r3, [r2, #8]
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40007000 	.word	0x40007000

08003114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e2fe      	b.n	8003724 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d075      	beq.n	800321e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003132:	4b97      	ldr	r3, [pc, #604]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800313c:	4b94      	ldr	r3, [pc, #592]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b0c      	cmp	r3, #12
 800314a:	d102      	bne.n	8003152 <HAL_RCC_OscConfig+0x3e>
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2b03      	cmp	r3, #3
 8003150:	d002      	beq.n	8003158 <HAL_RCC_OscConfig+0x44>
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b08      	cmp	r3, #8
 8003156:	d10b      	bne.n	8003170 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	4b8d      	ldr	r3, [pc, #564]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d05b      	beq.n	800321c <HAL_RCC_OscConfig+0x108>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d157      	bne.n	800321c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e2d9      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003178:	d106      	bne.n	8003188 <HAL_RCC_OscConfig+0x74>
 800317a:	4b85      	ldr	r3, [pc, #532]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a84      	ldr	r2, [pc, #528]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 8003180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e01d      	b.n	80031c4 <HAL_RCC_OscConfig+0xb0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x98>
 8003192:	4b7f      	ldr	r3, [pc, #508]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a7e      	ldr	r2, [pc, #504]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 8003198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	4b7c      	ldr	r3, [pc, #496]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a7b      	ldr	r2, [pc, #492]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e00b      	b.n	80031c4 <HAL_RCC_OscConfig+0xb0>
 80031ac:	4b78      	ldr	r3, [pc, #480]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a77      	ldr	r2, [pc, #476]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 80031b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4b75      	ldr	r3, [pc, #468]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a74      	ldr	r2, [pc, #464]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 80031be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d013      	beq.n	80031f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7fd fe04 	bl	8000dd8 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d4:	f7fd fe00 	bl	8000dd8 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	; 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e29e      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e6:	4b6a      	ldr	r3, [pc, #424]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0xc0>
 80031f2:	e014      	b.n	800321e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fd fdf0 	bl	8000dd8 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031fc:	f7fd fdec 	bl	8000dd8 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	; 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e28a      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800320e:	4b60      	ldr	r3, [pc, #384]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0xe8>
 800321a:	e000      	b.n	800321e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d075      	beq.n	8003316 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800322a:	4b59      	ldr	r3, [pc, #356]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003234:	4b56      	ldr	r3, [pc, #344]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2b0c      	cmp	r3, #12
 8003242:	d102      	bne.n	800324a <HAL_RCC_OscConfig+0x136>
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d002      	beq.n	8003250 <HAL_RCC_OscConfig+0x13c>
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b04      	cmp	r3, #4
 800324e:	d11f      	bne.n	8003290 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003250:	4b4f      	ldr	r3, [pc, #316]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_OscConfig+0x154>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e25d      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003268:	4b49      	ldr	r3, [pc, #292]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	4946      	ldr	r1, [pc, #280]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800327c:	4b45      	ldr	r3, [pc, #276]	; (8003394 <HAL_RCC_OscConfig+0x280>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7fd fd5d 	bl	8000d40 <HAL_InitTick>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d043      	beq.n	8003314 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e249      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d023      	beq.n	80032e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003298:	4b3d      	ldr	r3, [pc, #244]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a3c      	ldr	r2, [pc, #240]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fd fd98 	bl	8000dd8 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ac:	f7fd fd94 	bl	8000dd8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e232      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032be:	4b34      	ldr	r3, [pc, #208]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ca:	4b31      	ldr	r3, [pc, #196]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	061b      	lsls	r3, r3, #24
 80032d8:	492d      	ldr	r1, [pc, #180]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	604b      	str	r3, [r1, #4]
 80032de:	e01a      	b.n	8003316 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e0:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a2a      	ldr	r2, [pc, #168]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 80032e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fd fd74 	bl	8000dd8 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f4:	f7fd fd70 	bl	8000dd8 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e20e      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003306:	4b22      	ldr	r3, [pc, #136]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x1e0>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003314:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d041      	beq.n	80033a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01c      	beq.n	8003364 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332a:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 800332c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003330:	4a17      	ldr	r2, [pc, #92]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333a:	f7fd fd4d 	bl	8000dd8 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003342:	f7fd fd49 	bl	8000dd8 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e1e7      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003354:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 8003356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0ef      	beq.n	8003342 <HAL_RCC_OscConfig+0x22e>
 8003362:	e020      	b.n	80033a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003364:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 8003366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003374:	f7fd fd30 	bl	8000dd8 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800337a:	e00d      	b.n	8003398 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337c:	f7fd fd2c 	bl	8000dd8 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d906      	bls.n	8003398 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e1ca      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	2000004c 	.word	0x2000004c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003398:	4b8c      	ldr	r3, [pc, #560]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 800339a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1ea      	bne.n	800337c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80a6 	beq.w	8003500 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b4:	2300      	movs	r3, #0
 80033b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033b8:	4b84      	ldr	r3, [pc, #528]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 80033ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_OscConfig+0x2b4>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <HAL_RCC_OscConfig+0x2b6>
 80033c8:	2300      	movs	r3, #0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00d      	beq.n	80033ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ce:	4b7f      	ldr	r3, [pc, #508]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	4a7e      	ldr	r2, [pc, #504]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 80033d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d8:	6593      	str	r3, [r2, #88]	; 0x58
 80033da:	4b7c      	ldr	r3, [pc, #496]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 80033dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033e6:	2301      	movs	r3, #1
 80033e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ea:	4b79      	ldr	r3, [pc, #484]	; (80035d0 <HAL_RCC_OscConfig+0x4bc>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d118      	bne.n	8003428 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f6:	4b76      	ldr	r3, [pc, #472]	; (80035d0 <HAL_RCC_OscConfig+0x4bc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a75      	ldr	r2, [pc, #468]	; (80035d0 <HAL_RCC_OscConfig+0x4bc>)
 80033fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003402:	f7fd fce9 	bl	8000dd8 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340a:	f7fd fce5 	bl	8000dd8 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e183      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341c:	4b6c      	ldr	r3, [pc, #432]	; (80035d0 <HAL_RCC_OscConfig+0x4bc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d108      	bne.n	8003442 <HAL_RCC_OscConfig+0x32e>
 8003430:	4b66      	ldr	r3, [pc, #408]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003436:	4a65      	ldr	r2, [pc, #404]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003440:	e024      	b.n	800348c <HAL_RCC_OscConfig+0x378>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b05      	cmp	r3, #5
 8003448:	d110      	bne.n	800346c <HAL_RCC_OscConfig+0x358>
 800344a:	4b60      	ldr	r3, [pc, #384]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	4a5e      	ldr	r2, [pc, #376]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800345a:	4b5c      	ldr	r3, [pc, #368]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	4a5a      	ldr	r2, [pc, #360]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800346a:	e00f      	b.n	800348c <HAL_RCC_OscConfig+0x378>
 800346c:	4b57      	ldr	r3, [pc, #348]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	4a56      	ldr	r2, [pc, #344]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800347c:	4b53      	ldr	r3, [pc, #332]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	4a52      	ldr	r2, [pc, #328]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 8003484:	f023 0304 	bic.w	r3, r3, #4
 8003488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d016      	beq.n	80034c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fd fca0 	bl	8000dd8 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349c:	f7fd fc9c 	bl	8000dd8 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e138      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b2:	4b46      	ldr	r3, [pc, #280]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0ed      	beq.n	800349c <HAL_RCC_OscConfig+0x388>
 80034c0:	e015      	b.n	80034ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c2:	f7fd fc89 	bl	8000dd8 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ca:	f7fd fc85 	bl	8000dd8 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e121      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e0:	4b3a      	ldr	r3, [pc, #232]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1ed      	bne.n	80034ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034ee:	7ffb      	ldrb	r3, [r7, #31]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d105      	bne.n	8003500 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f4:	4b35      	ldr	r3, [pc, #212]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f8:	4a34      	ldr	r2, [pc, #208]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 80034fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d03c      	beq.n	8003586 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01c      	beq.n	800354e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003514:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 8003516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800351a:	4a2c      	ldr	r2, [pc, #176]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003524:	f7fd fc58 	bl	8000dd8 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800352c:	f7fd fc54 	bl	8000dd8 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e0f2      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800353e:	4b23      	ldr	r3, [pc, #140]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 8003540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ef      	beq.n	800352c <HAL_RCC_OscConfig+0x418>
 800354c:	e01b      	b.n	8003586 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800354e:	4b1f      	ldr	r3, [pc, #124]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 8003550:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003554:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355e:	f7fd fc3b 	bl	8000dd8 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003566:	f7fd fc37 	bl	8000dd8 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e0d5      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003578:	4b14      	ldr	r3, [pc, #80]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 800357a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1ef      	bne.n	8003566 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 80c9 	beq.w	8003722 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003590:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b0c      	cmp	r3, #12
 800359a:	f000 8083 	beq.w	80036a4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d15e      	bne.n	8003664 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a08      	ldr	r2, [pc, #32]	; (80035cc <HAL_RCC_OscConfig+0x4b8>)
 80035ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b2:	f7fd fc11 	bl	8000dd8 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b8:	e00c      	b.n	80035d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ba:	f7fd fc0d 	bl	8000dd8 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d905      	bls.n	80035d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e0ab      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d4:	4b55      	ldr	r3, [pc, #340]	; (800372c <HAL_RCC_OscConfig+0x618>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1ec      	bne.n	80035ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e0:	4b52      	ldr	r3, [pc, #328]	; (800372c <HAL_RCC_OscConfig+0x618>)
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	4b52      	ldr	r3, [pc, #328]	; (8003730 <HAL_RCC_OscConfig+0x61c>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6a11      	ldr	r1, [r2, #32]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035f0:	3a01      	subs	r2, #1
 80035f2:	0112      	lsls	r2, r2, #4
 80035f4:	4311      	orrs	r1, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80035fa:	0212      	lsls	r2, r2, #8
 80035fc:	4311      	orrs	r1, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003602:	0852      	lsrs	r2, r2, #1
 8003604:	3a01      	subs	r2, #1
 8003606:	0552      	lsls	r2, r2, #21
 8003608:	4311      	orrs	r1, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800360e:	0852      	lsrs	r2, r2, #1
 8003610:	3a01      	subs	r2, #1
 8003612:	0652      	lsls	r2, r2, #25
 8003614:	4311      	orrs	r1, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800361a:	06d2      	lsls	r2, r2, #27
 800361c:	430a      	orrs	r2, r1
 800361e:	4943      	ldr	r1, [pc, #268]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003620:	4313      	orrs	r3, r2
 8003622:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003624:	4b41      	ldr	r3, [pc, #260]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a40      	ldr	r2, [pc, #256]	; (800372c <HAL_RCC_OscConfig+0x618>)
 800362a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800362e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003630:	4b3e      	ldr	r3, [pc, #248]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4a3d      	ldr	r2, [pc, #244]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800363a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fd fbcc 	bl	8000dd8 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003644:	f7fd fbc8 	bl	8000dd8 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e066      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003656:	4b35      	ldr	r3, [pc, #212]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x530>
 8003662:	e05e      	b.n	8003722 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003664:	4b31      	ldr	r3, [pc, #196]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a30      	ldr	r2, [pc, #192]	; (800372c <HAL_RCC_OscConfig+0x618>)
 800366a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800366e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fd fbb2 	bl	8000dd8 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003678:	f7fd fbae 	bl	8000dd8 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e04c      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800368a:	4b28      	ldr	r3, [pc, #160]	; (800372c <HAL_RCC_OscConfig+0x618>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003696:	4b25      	ldr	r3, [pc, #148]	; (800372c <HAL_RCC_OscConfig+0x618>)
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	4924      	ldr	r1, [pc, #144]	; (800372c <HAL_RCC_OscConfig+0x618>)
 800369c:	4b25      	ldr	r3, [pc, #148]	; (8003734 <HAL_RCC_OscConfig+0x620>)
 800369e:	4013      	ands	r3, r2
 80036a0:	60cb      	str	r3, [r1, #12]
 80036a2:	e03e      	b.n	8003722 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e039      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80036b0:	4b1e      	ldr	r3, [pc, #120]	; (800372c <HAL_RCC_OscConfig+0x618>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f003 0203 	and.w	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d12c      	bne.n	800371e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	3b01      	subs	r3, #1
 80036d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d123      	bne.n	800371e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d11b      	bne.n	800371e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d113      	bne.n	800371e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	3b01      	subs	r3, #1
 8003704:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003706:	429a      	cmp	r2, r3
 8003708:	d109      	bne.n	800371e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003714:	085b      	lsrs	r3, r3, #1
 8003716:	3b01      	subs	r3, #1
 8003718:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d001      	beq.n	8003722 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3720      	adds	r7, #32
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021000 	.word	0x40021000
 8003730:	019f800c 	.word	0x019f800c
 8003734:	feeefffc 	.word	0xfeeefffc

08003738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e11e      	b.n	800398e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003750:	4b91      	ldr	r3, [pc, #580]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d910      	bls.n	8003780 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b8e      	ldr	r3, [pc, #568]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 020f 	bic.w	r2, r3, #15
 8003766:	498c      	ldr	r1, [pc, #560]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b8a      	ldr	r3, [pc, #552]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e106      	b.n	800398e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d073      	beq.n	8003874 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b03      	cmp	r3, #3
 8003792:	d129      	bne.n	80037e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003794:	4b81      	ldr	r3, [pc, #516]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0f4      	b.n	800398e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80037a4:	f000 f99e 	bl	8003ae4 <RCC_GetSysClockFreqFromPLLSource>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4a7c      	ldr	r2, [pc, #496]	; (80039a0 <HAL_RCC_ClockConfig+0x268>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d93f      	bls.n	8003832 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037b2:	4b7a      	ldr	r3, [pc, #488]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d033      	beq.n	8003832 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d12f      	bne.n	8003832 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037d2:	4b72      	ldr	r3, [pc, #456]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037da:	4a70      	ldr	r2, [pc, #448]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 80037dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e024      	b.n	8003832 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f0:	4b6a      	ldr	r3, [pc, #424]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d109      	bne.n	8003810 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0c6      	b.n	800398e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003800:	4b66      	ldr	r3, [pc, #408]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0be      	b.n	800398e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003810:	f000 f8ce 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003814:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4a61      	ldr	r2, [pc, #388]	; (80039a0 <HAL_RCC_ClockConfig+0x268>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d909      	bls.n	8003832 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800381e:	4b5f      	ldr	r3, [pc, #380]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003826:	4a5d      	ldr	r2, [pc, #372]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 8003828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800382e:	2380      	movs	r3, #128	; 0x80
 8003830:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003832:	4b5a      	ldr	r3, [pc, #360]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 0203 	bic.w	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4957      	ldr	r1, [pc, #348]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 8003840:	4313      	orrs	r3, r2
 8003842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003844:	f7fd fac8 	bl	8000dd8 <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384a:	e00a      	b.n	8003862 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800384c:	f7fd fac4 	bl	8000dd8 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e095      	b.n	800398e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003862:	4b4e      	ldr	r3, [pc, #312]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 020c 	and.w	r2, r3, #12
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	429a      	cmp	r2, r3
 8003872:	d1eb      	bne.n	800384c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d023      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800388c:	4b43      	ldr	r3, [pc, #268]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a42      	ldr	r2, [pc, #264]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 8003892:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003896:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80038a4:	4b3d      	ldr	r3, [pc, #244]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80038ac:	4a3b      	ldr	r2, [pc, #236]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 80038ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b4:	4b39      	ldr	r3, [pc, #228]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4936      	ldr	r1, [pc, #216]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
 80038c6:	e008      	b.n	80038da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b80      	cmp	r3, #128	; 0x80
 80038cc:	d105      	bne.n	80038da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038ce:	4b33      	ldr	r3, [pc, #204]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	4a32      	ldr	r2, [pc, #200]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 80038d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038da:	4b2f      	ldr	r3, [pc, #188]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d21d      	bcs.n	8003924 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e8:	4b2b      	ldr	r3, [pc, #172]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f023 020f 	bic.w	r2, r3, #15
 80038f0:	4929      	ldr	r1, [pc, #164]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038f8:	f7fd fa6e 	bl	8000dd8 <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003900:	f7fd fa6a 	bl	8000dd8 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e03b      	b.n	800398e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b20      	ldr	r3, [pc, #128]	; (8003998 <HAL_RCC_ClockConfig+0x260>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d1ed      	bne.n	8003900 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003930:	4b1a      	ldr	r3, [pc, #104]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4917      	ldr	r1, [pc, #92]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800394e:	4b13      	ldr	r3, [pc, #76]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	490f      	ldr	r1, [pc, #60]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003962:	f000 f825 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003966:	4602      	mov	r2, r0
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <HAL_RCC_ClockConfig+0x264>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	490c      	ldr	r1, [pc, #48]	; (80039a4 <HAL_RCC_ClockConfig+0x26c>)
 8003974:	5ccb      	ldrb	r3, [r1, r3]
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	fa22 f303 	lsr.w	r3, r2, r3
 800397e:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <HAL_RCC_ClockConfig+0x270>)
 8003980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_RCC_ClockConfig+0x274>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd f9da 	bl	8000d40 <HAL_InitTick>
 800398c:	4603      	mov	r3, r0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40022000 	.word	0x40022000
 800399c:	40021000 	.word	0x40021000
 80039a0:	04c4b400 	.word	0x04c4b400
 80039a4:	08006420 	.word	0x08006420
 80039a8:	20000048 	.word	0x20000048
 80039ac:	2000004c 	.word	0x2000004c

080039b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039b6:	4b2c      	ldr	r3, [pc, #176]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d102      	bne.n	80039c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039c2:	4b2a      	ldr	r3, [pc, #168]	; (8003a6c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	e047      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039c8:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 030c 	and.w	r3, r3, #12
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d102      	bne.n	80039da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039d4:	4b26      	ldr	r3, [pc, #152]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	e03e      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80039da:	4b23      	ldr	r3, [pc, #140]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b0c      	cmp	r3, #12
 80039e4:	d136      	bne.n	8003a54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039e6:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039f0:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	3301      	adds	r3, #1
 80039fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d10c      	bne.n	8003a1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a04:	4a1a      	ldr	r2, [pc, #104]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a0e:	68d2      	ldr	r2, [r2, #12]
 8003a10:	0a12      	lsrs	r2, r2, #8
 8003a12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	617b      	str	r3, [r7, #20]
      break;
 8003a1c:	e00c      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a1e:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	4a10      	ldr	r2, [pc, #64]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a28:	68d2      	ldr	r2, [r2, #12]
 8003a2a:	0a12      	lsrs	r2, r2, #8
 8003a2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a30:	fb02 f303 	mul.w	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]
      break;
 8003a36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	0e5b      	lsrs	r3, r3, #25
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	3301      	adds	r3, #1
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	e001      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a58:	693b      	ldr	r3, [r7, #16]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	00f42400 	.word	0x00f42400
 8003a70:	016e3600 	.word	0x016e3600

08003a74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000048 	.word	0x20000048

08003a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a90:	f7ff fff0 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	0a1b      	lsrs	r3, r3, #8
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4904      	ldr	r1, [pc, #16]	; (8003ab4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	08006430 	.word	0x08006430

08003ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003abc:	f7ff ffda 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	0adb      	lsrs	r3, r3, #11
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4904      	ldr	r1, [pc, #16]	; (8003ae0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	08006430 	.word	0x08006430

08003ae4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aea:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	3301      	adds	r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d10c      	bne.n	8003b22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b08:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b12:	68d2      	ldr	r2, [r2, #12]
 8003b14:	0a12      	lsrs	r2, r2, #8
 8003b16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	617b      	str	r3, [r7, #20]
    break;
 8003b20:	e00c      	b.n	8003b3c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b22:	4a12      	ldr	r2, [pc, #72]	; (8003b6c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	4a0e      	ldr	r2, [pc, #56]	; (8003b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b2c:	68d2      	ldr	r2, [r2, #12]
 8003b2e:	0a12      	lsrs	r2, r2, #8
 8003b30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b34:	fb02 f303 	mul.w	r3, r2, r3
 8003b38:	617b      	str	r3, [r7, #20]
    break;
 8003b3a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	0e5b      	lsrs	r3, r3, #25
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	3301      	adds	r3, #1
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b56:	687b      	ldr	r3, [r7, #4]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	40021000 	.word	0x40021000
 8003b68:	016e3600 	.word	0x016e3600
 8003b6c:	00f42400 	.word	0x00f42400

08003b70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b78:	2300      	movs	r3, #0
 8003b7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8098 	beq.w	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b92:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10d      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9e:	4b40      	ldr	r3, [pc, #256]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba2:	4a3f      	ldr	r2, [pc, #252]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8003baa:	4b3d      	ldr	r3, [pc, #244]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bba:	4b3a      	ldr	r3, [pc, #232]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a39      	ldr	r2, [pc, #228]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bc6:	f7fd f907 	bl	8000dd8 <HAL_GetTick>
 8003bca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bcc:	e009      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bce:	f7fd f903 	bl	8000dd8 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d902      	bls.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	74fb      	strb	r3, [r7, #19]
        break;
 8003be0:	e005      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003be2:	4b30      	ldr	r3, [pc, #192]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0ef      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003bee:	7cfb      	ldrb	r3, [r7, #19]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d159      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bf4:	4b2a      	ldr	r3, [pc, #168]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d01e      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d019      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c10:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c1c:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	4a1f      	ldr	r2, [pc, #124]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c3c:	4a18      	ldr	r2, [pc, #96]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d016      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4e:	f7fd f8c3 	bl	8000dd8 <HAL_GetTick>
 8003c52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c54:	e00b      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c56:	f7fd f8bf 	bl	8000dd8 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d902      	bls.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	74fb      	strb	r3, [r7, #19]
            break;
 8003c6c:	e006      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0ec      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c7c:	7cfb      	ldrb	r3, [r7, #19]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10b      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c90:	4903      	ldr	r1, [pc, #12]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c98:	e008      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c9a:	7cfb      	ldrb	r3, [r7, #19]
 8003c9c:	74bb      	strb	r3, [r7, #18]
 8003c9e:	e005      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca8:	7cfb      	ldrb	r3, [r7, #19]
 8003caa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cac:	7c7b      	ldrb	r3, [r7, #17]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d105      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb2:	4ba7      	ldr	r3, [pc, #668]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	4aa6      	ldr	r2, [pc, #664]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cca:	4ba1      	ldr	r3, [pc, #644]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	f023 0203 	bic.w	r2, r3, #3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	499d      	ldr	r1, [pc, #628]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cec:	4b98      	ldr	r3, [pc, #608]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f023 020c 	bic.w	r2, r3, #12
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	4995      	ldr	r1, [pc, #596]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d0e:	4b90      	ldr	r3, [pc, #576]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	498c      	ldr	r1, [pc, #560]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d30:	4b87      	ldr	r3, [pc, #540]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	4984      	ldr	r1, [pc, #528]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d52:	4b7f      	ldr	r3, [pc, #508]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	497b      	ldr	r1, [pc, #492]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d74:	4b76      	ldr	r3, [pc, #472]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	4973      	ldr	r1, [pc, #460]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d96:	4b6e      	ldr	r3, [pc, #440]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	496a      	ldr	r1, [pc, #424]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003db8:	4b65      	ldr	r3, [pc, #404]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	4962      	ldr	r1, [pc, #392]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dda:	4b5d      	ldr	r3, [pc, #372]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	4959      	ldr	r1, [pc, #356]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dfc:	4b54      	ldr	r3, [pc, #336]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e02:	f023 0203 	bic.w	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	4951      	ldr	r1, [pc, #324]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e1e:	4b4c      	ldr	r3, [pc, #304]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	4948      	ldr	r1, [pc, #288]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d015      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e40:	4b43      	ldr	r3, [pc, #268]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	4940      	ldr	r1, [pc, #256]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e5e:	d105      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e60:	4b3b      	ldr	r3, [pc, #236]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4a3a      	ldr	r2, [pc, #232]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d015      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e78:	4b35      	ldr	r3, [pc, #212]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	4932      	ldr	r1, [pc, #200]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e96:	d105      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e98:	4b2d      	ldr	r3, [pc, #180]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a2c      	ldr	r2, [pc, #176]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ea2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d015      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003eb0:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	4924      	ldr	r1, [pc, #144]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ece:	d105      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed0:	4b1f      	ldr	r3, [pc, #124]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eda:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d015      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef6:	4916      	ldr	r1, [pc, #88]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f06:	d105      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f08:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4a10      	ldr	r2, [pc, #64]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f12:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d019      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	4908      	ldr	r1, [pc, #32]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f3e:	d109      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f40:	4b03      	ldr	r3, [pc, #12]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a02      	ldr	r2, [pc, #8]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f4a:	60d3      	str	r3, [r2, #12]
 8003f4c:	e002      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003f4e:	bf00      	nop
 8003f50:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d015      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f60:	4b29      	ldr	r3, [pc, #164]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	4926      	ldr	r1, [pc, #152]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f7e:	d105      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f80:	4b21      	ldr	r3, [pc, #132]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4a20      	ldr	r2, [pc, #128]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d015      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f98:	4b1b      	ldr	r3, [pc, #108]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa6:	4918      	ldr	r1, [pc, #96]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb6:	d105      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fb8:	4b13      	ldr	r3, [pc, #76]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4a12      	ldr	r2, [pc, #72]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d015      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fd0:	4b0d      	ldr	r3, [pc, #52]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fde:	490a      	ldr	r1, [pc, #40]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fee:	d105      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4a04      	ldr	r2, [pc, #16]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003ffc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40021000 	.word	0x40021000

0800400c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e049      	b.n	80040b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fc fda8 	bl	8000b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f000 fdc6 	bl	8004bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d001      	beq.n	80040d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e04c      	b.n	800416e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a26      	ldr	r2, [pc, #152]	; (800417c <HAL_TIM_Base_Start+0xc0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d022      	beq.n	800412c <HAL_TIM_Base_Start+0x70>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ee:	d01d      	beq.n	800412c <HAL_TIM_Base_Start+0x70>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a22      	ldr	r2, [pc, #136]	; (8004180 <HAL_TIM_Base_Start+0xc4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d018      	beq.n	800412c <HAL_TIM_Base_Start+0x70>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a21      	ldr	r2, [pc, #132]	; (8004184 <HAL_TIM_Base_Start+0xc8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d013      	beq.n	800412c <HAL_TIM_Base_Start+0x70>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <HAL_TIM_Base_Start+0xcc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00e      	beq.n	800412c <HAL_TIM_Base_Start+0x70>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1e      	ldr	r2, [pc, #120]	; (800418c <HAL_TIM_Base_Start+0xd0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d009      	beq.n	800412c <HAL_TIM_Base_Start+0x70>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1c      	ldr	r2, [pc, #112]	; (8004190 <HAL_TIM_Base_Start+0xd4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_TIM_Base_Start+0x70>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <HAL_TIM_Base_Start+0xd8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d115      	bne.n	8004158 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_TIM_Base_Start+0xdc>)
 8004134:	4013      	ands	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b06      	cmp	r3, #6
 800413c:	d015      	beq.n	800416a <HAL_TIM_Base_Start+0xae>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004144:	d011      	beq.n	800416a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0201 	orr.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004156:	e008      	b.n	800416a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	e000      	b.n	800416c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800
 8004188:	40000c00 	.word	0x40000c00
 800418c:	40013400 	.word	0x40013400
 8004190:	40014000 	.word	0x40014000
 8004194:	40015000 	.word	0x40015000
 8004198:	00010007 	.word	0x00010007

0800419c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e049      	b.n	8004242 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f841 	bl	800424a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f000 fcfe 	bl	8004bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <HAL_TIM_PWM_Start+0x24>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	bf14      	ite	ne
 800427c:	2301      	movne	r3, #1
 800427e:	2300      	moveq	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	e03c      	b.n	80042fe <HAL_TIM_PWM_Start+0x9e>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b04      	cmp	r3, #4
 8004288:	d109      	bne.n	800429e <HAL_TIM_PWM_Start+0x3e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	bf14      	ite	ne
 8004296:	2301      	movne	r3, #1
 8004298:	2300      	moveq	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	e02f      	b.n	80042fe <HAL_TIM_PWM_Start+0x9e>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d109      	bne.n	80042b8 <HAL_TIM_PWM_Start+0x58>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	bf14      	ite	ne
 80042b0:	2301      	movne	r3, #1
 80042b2:	2300      	moveq	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	e022      	b.n	80042fe <HAL_TIM_PWM_Start+0x9e>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d109      	bne.n	80042d2 <HAL_TIM_PWM_Start+0x72>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	bf14      	ite	ne
 80042ca:	2301      	movne	r3, #1
 80042cc:	2300      	moveq	r3, #0
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	e015      	b.n	80042fe <HAL_TIM_PWM_Start+0x9e>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d109      	bne.n	80042ec <HAL_TIM_PWM_Start+0x8c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	bf14      	ite	ne
 80042e4:	2301      	movne	r3, #1
 80042e6:	2300      	moveq	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	e008      	b.n	80042fe <HAL_TIM_PWM_Start+0x9e>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	bf14      	ite	ne
 80042f8:	2301      	movne	r3, #1
 80042fa:	2300      	moveq	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e0a6      	b.n	8004454 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d104      	bne.n	8004316 <HAL_TIM_PWM_Start+0xb6>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004314:	e023      	b.n	800435e <HAL_TIM_PWM_Start+0xfe>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b04      	cmp	r3, #4
 800431a:	d104      	bne.n	8004326 <HAL_TIM_PWM_Start+0xc6>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004324:	e01b      	b.n	800435e <HAL_TIM_PWM_Start+0xfe>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d104      	bne.n	8004336 <HAL_TIM_PWM_Start+0xd6>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004334:	e013      	b.n	800435e <HAL_TIM_PWM_Start+0xfe>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b0c      	cmp	r3, #12
 800433a:	d104      	bne.n	8004346 <HAL_TIM_PWM_Start+0xe6>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004344:	e00b      	b.n	800435e <HAL_TIM_PWM_Start+0xfe>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b10      	cmp	r3, #16
 800434a:	d104      	bne.n	8004356 <HAL_TIM_PWM_Start+0xf6>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004354:	e003      	b.n	800435e <HAL_TIM_PWM_Start+0xfe>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2202      	movs	r2, #2
 800435a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2201      	movs	r2, #1
 8004364:	6839      	ldr	r1, [r7, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f001 f8b2 	bl	80054d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a3a      	ldr	r2, [pc, #232]	; (800445c <HAL_TIM_PWM_Start+0x1fc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d018      	beq.n	80043a8 <HAL_TIM_PWM_Start+0x148>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a39      	ldr	r2, [pc, #228]	; (8004460 <HAL_TIM_PWM_Start+0x200>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d013      	beq.n	80043a8 <HAL_TIM_PWM_Start+0x148>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a37      	ldr	r2, [pc, #220]	; (8004464 <HAL_TIM_PWM_Start+0x204>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00e      	beq.n	80043a8 <HAL_TIM_PWM_Start+0x148>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a36      	ldr	r2, [pc, #216]	; (8004468 <HAL_TIM_PWM_Start+0x208>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_TIM_PWM_Start+0x148>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a34      	ldr	r2, [pc, #208]	; (800446c <HAL_TIM_PWM_Start+0x20c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIM_PWM_Start+0x148>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a33      	ldr	r2, [pc, #204]	; (8004470 <HAL_TIM_PWM_Start+0x210>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d101      	bne.n	80043ac <HAL_TIM_PWM_Start+0x14c>
 80043a8:	2301      	movs	r3, #1
 80043aa:	e000      	b.n	80043ae <HAL_TIM_PWM_Start+0x14e>
 80043ac:	2300      	movs	r3, #0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a25      	ldr	r2, [pc, #148]	; (800445c <HAL_TIM_PWM_Start+0x1fc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d022      	beq.n	8004412 <HAL_TIM_PWM_Start+0x1b2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d4:	d01d      	beq.n	8004412 <HAL_TIM_PWM_Start+0x1b2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a26      	ldr	r2, [pc, #152]	; (8004474 <HAL_TIM_PWM_Start+0x214>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d018      	beq.n	8004412 <HAL_TIM_PWM_Start+0x1b2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a24      	ldr	r2, [pc, #144]	; (8004478 <HAL_TIM_PWM_Start+0x218>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <HAL_TIM_PWM_Start+0x1b2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a23      	ldr	r2, [pc, #140]	; (800447c <HAL_TIM_PWM_Start+0x21c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_TIM_PWM_Start+0x1b2>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <HAL_TIM_PWM_Start+0x200>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d009      	beq.n	8004412 <HAL_TIM_PWM_Start+0x1b2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a18      	ldr	r2, [pc, #96]	; (8004464 <HAL_TIM_PWM_Start+0x204>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_TIM_PWM_Start+0x1b2>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a18      	ldr	r2, [pc, #96]	; (8004470 <HAL_TIM_PWM_Start+0x210>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d115      	bne.n	800443e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	4b19      	ldr	r3, [pc, #100]	; (8004480 <HAL_TIM_PWM_Start+0x220>)
 800441a:	4013      	ands	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b06      	cmp	r3, #6
 8004422:	d015      	beq.n	8004450 <HAL_TIM_PWM_Start+0x1f0>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442a:	d011      	beq.n	8004450 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443c:	e008      	b.n	8004450 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e000      	b.n	8004452 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004450:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40013400 	.word	0x40013400
 8004464:	40014000 	.word	0x40014000
 8004468:	40014400 	.word	0x40014400
 800446c:	40014800 	.word	0x40014800
 8004470:	40015000 	.word	0x40015000
 8004474:	40000400 	.word	0x40000400
 8004478:	40000800 	.word	0x40000800
 800447c:	40000c00 	.word	0x40000c00
 8004480:	00010007 	.word	0x00010007

08004484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d020      	beq.n	80044e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01b      	beq.n	80044e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0202 	mvn.w	r2, #2
 80044b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fb66 	bl	8004ba0 <HAL_TIM_IC_CaptureCallback>
 80044d4:	e005      	b.n	80044e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fb58 	bl	8004b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fb69 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d020      	beq.n	8004534 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01b      	beq.n	8004534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0204 	mvn.w	r2, #4
 8004504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fb40 	bl	8004ba0 <HAL_TIM_IC_CaptureCallback>
 8004520:	e005      	b.n	800452e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fb32 	bl	8004b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fb43 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d020      	beq.n	8004580 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01b      	beq.n	8004580 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0208 	mvn.w	r2, #8
 8004550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2204      	movs	r2, #4
 8004556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fb1a 	bl	8004ba0 <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fb0c 	bl	8004b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fb1d 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b00      	cmp	r3, #0
 8004588:	d020      	beq.n	80045cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01b      	beq.n	80045cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0210 	mvn.w	r2, #16
 800459c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2208      	movs	r2, #8
 80045a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 faf4 	bl	8004ba0 <HAL_TIM_IC_CaptureCallback>
 80045b8:	e005      	b.n	80045c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fae6 	bl	8004b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 faf7 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00c      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0201 	mvn.w	r2, #1
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fac4 	bl	8004b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00c      	beq.n	800461e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460a:	2b00      	cmp	r3, #0
 800460c:	d007      	beq.n	800461e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f001 f81f 	bl	800565c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00c      	beq.n	8004642 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800463a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f001 f817 	bl	8005670 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00c      	beq.n	8004666 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800465e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fab1 	bl	8004bc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00c      	beq.n	800468a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d007      	beq.n	800468a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f06f 0220 	mvn.w	r2, #32
 8004682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 ffdf 	bl	8005648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00c      	beq.n	80046ae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80046a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 ffeb 	bl	8005684 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00c      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80046ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 ffe3 	bl	8005698 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00c      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80046ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 ffdb 	bl	80056ac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00c      	beq.n	800471a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 ffd3 	bl	80056c0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800473e:	2302      	movs	r3, #2
 8004740:	e0ff      	b.n	8004942 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b14      	cmp	r3, #20
 800474e:	f200 80f0 	bhi.w	8004932 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004752:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004758:	080047ad 	.word	0x080047ad
 800475c:	08004933 	.word	0x08004933
 8004760:	08004933 	.word	0x08004933
 8004764:	08004933 	.word	0x08004933
 8004768:	080047ed 	.word	0x080047ed
 800476c:	08004933 	.word	0x08004933
 8004770:	08004933 	.word	0x08004933
 8004774:	08004933 	.word	0x08004933
 8004778:	0800482f 	.word	0x0800482f
 800477c:	08004933 	.word	0x08004933
 8004780:	08004933 	.word	0x08004933
 8004784:	08004933 	.word	0x08004933
 8004788:	0800486f 	.word	0x0800486f
 800478c:	08004933 	.word	0x08004933
 8004790:	08004933 	.word	0x08004933
 8004794:	08004933 	.word	0x08004933
 8004798:	080048b1 	.word	0x080048b1
 800479c:	08004933 	.word	0x08004933
 80047a0:	08004933 	.word	0x08004933
 80047a4:	08004933 	.word	0x08004933
 80047a8:	080048f1 	.word	0x080048f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fac6 	bl	8004d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0208 	orr.w	r2, r2, #8
 80047c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0204 	bic.w	r2, r2, #4
 80047d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6999      	ldr	r1, [r3, #24]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	619a      	str	r2, [r3, #24]
      break;
 80047ea:	e0a5      	b.n	8004938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fb40 	bl	8004e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6999      	ldr	r1, [r3, #24]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	021a      	lsls	r2, r3, #8
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	619a      	str	r2, [r3, #24]
      break;
 800482c:	e084      	b.n	8004938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fbb3 	bl	8004fa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0208 	orr.w	r2, r2, #8
 8004848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0204 	bic.w	r2, r2, #4
 8004858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69d9      	ldr	r1, [r3, #28]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	61da      	str	r2, [r3, #28]
      break;
 800486c:	e064      	b.n	8004938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fc25 	bl	80050c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69d9      	ldr	r1, [r3, #28]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	021a      	lsls	r2, r3, #8
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	61da      	str	r2, [r3, #28]
      break;
 80048ae:	e043      	b.n	8004938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fc98 	bl	80051ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0208 	orr.w	r2, r2, #8
 80048ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0204 	bic.w	r2, r2, #4
 80048da:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80048ee:	e023      	b.n	8004938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fce2 	bl	80052c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800490a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	021a      	lsls	r2, r3, #8
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004930:	e002      	b.n	8004938 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	75fb      	strb	r3, [r7, #23]
      break;
 8004936:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004940:	7dfb      	ldrb	r3, [r7, #23]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop

0800494c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_TIM_ConfigClockSource+0x1c>
 8004964:	2302      	movs	r3, #2
 8004966:	e0f6      	b.n	8004b56 <HAL_TIM_ConfigClockSource+0x20a>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004986:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800498a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a6f      	ldr	r2, [pc, #444]	; (8004b60 <HAL_TIM_ConfigClockSource+0x214>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	f000 80c1 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1de>
 80049a8:	4a6d      	ldr	r2, [pc, #436]	; (8004b60 <HAL_TIM_ConfigClockSource+0x214>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	f200 80c6 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 80049b0:	4a6c      	ldr	r2, [pc, #432]	; (8004b64 <HAL_TIM_ConfigClockSource+0x218>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	f000 80b9 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1de>
 80049b8:	4a6a      	ldr	r2, [pc, #424]	; (8004b64 <HAL_TIM_ConfigClockSource+0x218>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	f200 80be 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 80049c0:	4a69      	ldr	r2, [pc, #420]	; (8004b68 <HAL_TIM_ConfigClockSource+0x21c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	f000 80b1 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1de>
 80049c8:	4a67      	ldr	r2, [pc, #412]	; (8004b68 <HAL_TIM_ConfigClockSource+0x21c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	f200 80b6 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 80049d0:	4a66      	ldr	r2, [pc, #408]	; (8004b6c <HAL_TIM_ConfigClockSource+0x220>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	f000 80a9 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1de>
 80049d8:	4a64      	ldr	r2, [pc, #400]	; (8004b6c <HAL_TIM_ConfigClockSource+0x220>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	f200 80ae 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 80049e0:	4a63      	ldr	r2, [pc, #396]	; (8004b70 <HAL_TIM_ConfigClockSource+0x224>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	f000 80a1 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1de>
 80049e8:	4a61      	ldr	r2, [pc, #388]	; (8004b70 <HAL_TIM_ConfigClockSource+0x224>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	f200 80a6 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 80049f0:	4a60      	ldr	r2, [pc, #384]	; (8004b74 <HAL_TIM_ConfigClockSource+0x228>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	f000 8099 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1de>
 80049f8:	4a5e      	ldr	r2, [pc, #376]	; (8004b74 <HAL_TIM_ConfigClockSource+0x228>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	f200 809e 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004a04:	f000 8091 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1de>
 8004a08:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004a0c:	f200 8096 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a14:	f000 8089 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1de>
 8004a18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a1c:	f200 808e 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a24:	d03e      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0x158>
 8004a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a2a:	f200 8087 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a32:	f000 8086 	beq.w	8004b42 <HAL_TIM_ConfigClockSource+0x1f6>
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3a:	d87f      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a3c:	2b70      	cmp	r3, #112	; 0x70
 8004a3e:	d01a      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x12a>
 8004a40:	2b70      	cmp	r3, #112	; 0x70
 8004a42:	d87b      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a44:	2b60      	cmp	r3, #96	; 0x60
 8004a46:	d050      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x19e>
 8004a48:	2b60      	cmp	r3, #96	; 0x60
 8004a4a:	d877      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a4c:	2b50      	cmp	r3, #80	; 0x50
 8004a4e:	d03c      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x17e>
 8004a50:	2b50      	cmp	r3, #80	; 0x50
 8004a52:	d873      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d058      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x1be>
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	d86f      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a5c:	2b30      	cmp	r3, #48	; 0x30
 8004a5e:	d064      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x1de>
 8004a60:	2b30      	cmp	r3, #48	; 0x30
 8004a62:	d86b      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d060      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x1de>
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d867      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d05c      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x1de>
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d05a      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x1de>
 8004a74:	e062      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a86:	f000 fd03 	bl	8005490 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	609a      	str	r2, [r3, #8]
      break;
 8004aa2:	e04f      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ab4:	f000 fcec 	bl	8005490 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ac6:	609a      	str	r2, [r3, #8]
      break;
 8004ac8:	e03c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f000 fc5e 	bl	8005398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2150      	movs	r1, #80	; 0x50
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fcb7 	bl	8005456 <TIM_ITRx_SetConfig>
      break;
 8004ae8:	e02c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004af6:	461a      	mov	r2, r3
 8004af8:	f000 fc7d 	bl	80053f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2160      	movs	r1, #96	; 0x60
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fca7 	bl	8005456 <TIM_ITRx_SetConfig>
      break;
 8004b08:	e01c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b16:	461a      	mov	r2, r3
 8004b18:	f000 fc3e 	bl	8005398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2140      	movs	r1, #64	; 0x40
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fc97 	bl	8005456 <TIM_ITRx_SetConfig>
      break;
 8004b28:	e00c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4619      	mov	r1, r3
 8004b34:	4610      	mov	r0, r2
 8004b36:	f000 fc8e 	bl	8005456 <TIM_ITRx_SetConfig>
      break;
 8004b3a:	e003      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b40:	e000      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	00100070 	.word	0x00100070
 8004b64:	00100060 	.word	0x00100060
 8004b68:	00100050 	.word	0x00100050
 8004b6c:	00100040 	.word	0x00100040
 8004b70:	00100030 	.word	0x00100030
 8004b74:	00100020 	.word	0x00100020

08004b78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a4c      	ldr	r2, [pc, #304]	; (8004d20 <TIM_Base_SetConfig+0x144>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d017      	beq.n	8004c24 <TIM_Base_SetConfig+0x48>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfa:	d013      	beq.n	8004c24 <TIM_Base_SetConfig+0x48>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a49      	ldr	r2, [pc, #292]	; (8004d24 <TIM_Base_SetConfig+0x148>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00f      	beq.n	8004c24 <TIM_Base_SetConfig+0x48>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a48      	ldr	r2, [pc, #288]	; (8004d28 <TIM_Base_SetConfig+0x14c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00b      	beq.n	8004c24 <TIM_Base_SetConfig+0x48>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a47      	ldr	r2, [pc, #284]	; (8004d2c <TIM_Base_SetConfig+0x150>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d007      	beq.n	8004c24 <TIM_Base_SetConfig+0x48>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a46      	ldr	r2, [pc, #280]	; (8004d30 <TIM_Base_SetConfig+0x154>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d003      	beq.n	8004c24 <TIM_Base_SetConfig+0x48>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a45      	ldr	r2, [pc, #276]	; (8004d34 <TIM_Base_SetConfig+0x158>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d108      	bne.n	8004c36 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a39      	ldr	r2, [pc, #228]	; (8004d20 <TIM_Base_SetConfig+0x144>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d023      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c44:	d01f      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a36      	ldr	r2, [pc, #216]	; (8004d24 <TIM_Base_SetConfig+0x148>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01b      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a35      	ldr	r2, [pc, #212]	; (8004d28 <TIM_Base_SetConfig+0x14c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d017      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a34      	ldr	r2, [pc, #208]	; (8004d2c <TIM_Base_SetConfig+0x150>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a33      	ldr	r2, [pc, #204]	; (8004d30 <TIM_Base_SetConfig+0x154>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00f      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a33      	ldr	r2, [pc, #204]	; (8004d38 <TIM_Base_SetConfig+0x15c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00b      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a32      	ldr	r2, [pc, #200]	; (8004d3c <TIM_Base_SetConfig+0x160>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d007      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a31      	ldr	r2, [pc, #196]	; (8004d40 <TIM_Base_SetConfig+0x164>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a2c      	ldr	r2, [pc, #176]	; (8004d34 <TIM_Base_SetConfig+0x158>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d108      	bne.n	8004c98 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a18      	ldr	r2, [pc, #96]	; (8004d20 <TIM_Base_SetConfig+0x144>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d013      	beq.n	8004cec <TIM_Base_SetConfig+0x110>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a1a      	ldr	r2, [pc, #104]	; (8004d30 <TIM_Base_SetConfig+0x154>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00f      	beq.n	8004cec <TIM_Base_SetConfig+0x110>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a1a      	ldr	r2, [pc, #104]	; (8004d38 <TIM_Base_SetConfig+0x15c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00b      	beq.n	8004cec <TIM_Base_SetConfig+0x110>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a19      	ldr	r2, [pc, #100]	; (8004d3c <TIM_Base_SetConfig+0x160>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d007      	beq.n	8004cec <TIM_Base_SetConfig+0x110>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a18      	ldr	r2, [pc, #96]	; (8004d40 <TIM_Base_SetConfig+0x164>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_Base_SetConfig+0x110>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <TIM_Base_SetConfig+0x158>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d103      	bne.n	8004cf4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d105      	bne.n	8004d12 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f023 0201 	bic.w	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	611a      	str	r2, [r3, #16]
  }
}
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40012c00 	.word	0x40012c00
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40013400 	.word	0x40013400
 8004d34:	40015000 	.word	0x40015000
 8004d38:	40014000 	.word	0x40014000
 8004d3c:	40014400 	.word	0x40014400
 8004d40:	40014800 	.word	0x40014800

08004d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f023 0201 	bic.w	r2, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0303 	bic.w	r3, r3, #3
 8004d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f023 0302 	bic.w	r3, r3, #2
 8004d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a30      	ldr	r2, [pc, #192]	; (8004e60 <TIM_OC1_SetConfig+0x11c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d013      	beq.n	8004dcc <TIM_OC1_SetConfig+0x88>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a2f      	ldr	r2, [pc, #188]	; (8004e64 <TIM_OC1_SetConfig+0x120>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00f      	beq.n	8004dcc <TIM_OC1_SetConfig+0x88>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a2e      	ldr	r2, [pc, #184]	; (8004e68 <TIM_OC1_SetConfig+0x124>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <TIM_OC1_SetConfig+0x88>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a2d      	ldr	r2, [pc, #180]	; (8004e6c <TIM_OC1_SetConfig+0x128>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_OC1_SetConfig+0x88>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a2c      	ldr	r2, [pc, #176]	; (8004e70 <TIM_OC1_SetConfig+0x12c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_OC1_SetConfig+0x88>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a2b      	ldr	r2, [pc, #172]	; (8004e74 <TIM_OC1_SetConfig+0x130>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d10c      	bne.n	8004de6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 0308 	bic.w	r3, r3, #8
 8004dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f023 0304 	bic.w	r3, r3, #4
 8004de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a1d      	ldr	r2, [pc, #116]	; (8004e60 <TIM_OC1_SetConfig+0x11c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <TIM_OC1_SetConfig+0xd2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a1c      	ldr	r2, [pc, #112]	; (8004e64 <TIM_OC1_SetConfig+0x120>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00f      	beq.n	8004e16 <TIM_OC1_SetConfig+0xd2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a1b      	ldr	r2, [pc, #108]	; (8004e68 <TIM_OC1_SetConfig+0x124>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00b      	beq.n	8004e16 <TIM_OC1_SetConfig+0xd2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a1a      	ldr	r2, [pc, #104]	; (8004e6c <TIM_OC1_SetConfig+0x128>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d007      	beq.n	8004e16 <TIM_OC1_SetConfig+0xd2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <TIM_OC1_SetConfig+0x12c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d003      	beq.n	8004e16 <TIM_OC1_SetConfig+0xd2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <TIM_OC1_SetConfig+0x130>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d111      	bne.n	8004e3a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	621a      	str	r2, [r3, #32]
}
 8004e54:	bf00      	nop
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	40013400 	.word	0x40013400
 8004e68:	40014000 	.word	0x40014000
 8004e6c:	40014400 	.word	0x40014400
 8004e70:	40014800 	.word	0x40014800
 8004e74:	40015000 	.word	0x40015000

08004e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f023 0210 	bic.w	r2, r3, #16
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f023 0320 	bic.w	r3, r3, #32
 8004ec6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a2c      	ldr	r2, [pc, #176]	; (8004f88 <TIM_OC2_SetConfig+0x110>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <TIM_OC2_SetConfig+0x74>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a2b      	ldr	r2, [pc, #172]	; (8004f8c <TIM_OC2_SetConfig+0x114>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_OC2_SetConfig+0x74>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a2a      	ldr	r2, [pc, #168]	; (8004f90 <TIM_OC2_SetConfig+0x118>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d10d      	bne.n	8004f08 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a1f      	ldr	r2, [pc, #124]	; (8004f88 <TIM_OC2_SetConfig+0x110>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <TIM_OC2_SetConfig+0xc0>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a1e      	ldr	r2, [pc, #120]	; (8004f8c <TIM_OC2_SetConfig+0x114>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00f      	beq.n	8004f38 <TIM_OC2_SetConfig+0xc0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a1e      	ldr	r2, [pc, #120]	; (8004f94 <TIM_OC2_SetConfig+0x11c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00b      	beq.n	8004f38 <TIM_OC2_SetConfig+0xc0>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a1d      	ldr	r2, [pc, #116]	; (8004f98 <TIM_OC2_SetConfig+0x120>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d007      	beq.n	8004f38 <TIM_OC2_SetConfig+0xc0>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a1c      	ldr	r2, [pc, #112]	; (8004f9c <TIM_OC2_SetConfig+0x124>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d003      	beq.n	8004f38 <TIM_OC2_SetConfig+0xc0>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a17      	ldr	r2, [pc, #92]	; (8004f90 <TIM_OC2_SetConfig+0x118>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d113      	bne.n	8004f60 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40012c00 	.word	0x40012c00
 8004f8c:	40013400 	.word	0x40013400
 8004f90:	40015000 	.word	0x40015000
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40014400 	.word	0x40014400
 8004f9c:	40014800 	.word	0x40014800

08004fa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0303 	bic.w	r3, r3, #3
 8004fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2b      	ldr	r2, [pc, #172]	; (80050ac <TIM_OC3_SetConfig+0x10c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d007      	beq.n	8005012 <TIM_OC3_SetConfig+0x72>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2a      	ldr	r2, [pc, #168]	; (80050b0 <TIM_OC3_SetConfig+0x110>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d003      	beq.n	8005012 <TIM_OC3_SetConfig+0x72>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a29      	ldr	r2, [pc, #164]	; (80050b4 <TIM_OC3_SetConfig+0x114>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d10d      	bne.n	800502e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800502c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <TIM_OC3_SetConfig+0x10c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d013      	beq.n	800505e <TIM_OC3_SetConfig+0xbe>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <TIM_OC3_SetConfig+0x110>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00f      	beq.n	800505e <TIM_OC3_SetConfig+0xbe>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a1d      	ldr	r2, [pc, #116]	; (80050b8 <TIM_OC3_SetConfig+0x118>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00b      	beq.n	800505e <TIM_OC3_SetConfig+0xbe>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1c      	ldr	r2, [pc, #112]	; (80050bc <TIM_OC3_SetConfig+0x11c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d007      	beq.n	800505e <TIM_OC3_SetConfig+0xbe>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1b      	ldr	r2, [pc, #108]	; (80050c0 <TIM_OC3_SetConfig+0x120>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d003      	beq.n	800505e <TIM_OC3_SetConfig+0xbe>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a16      	ldr	r2, [pc, #88]	; (80050b4 <TIM_OC3_SetConfig+0x114>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d113      	bne.n	8005086 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800506c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	621a      	str	r2, [r3, #32]
}
 80050a0:	bf00      	nop
 80050a2:	371c      	adds	r7, #28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	40012c00 	.word	0x40012c00
 80050b0:	40013400 	.word	0x40013400
 80050b4:	40015000 	.word	0x40015000
 80050b8:	40014000 	.word	0x40014000
 80050bc:	40014400 	.word	0x40014400
 80050c0:	40014800 	.word	0x40014800

080050c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	031b      	lsls	r3, r3, #12
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a2c      	ldr	r2, [pc, #176]	; (80051d4 <TIM_OC4_SetConfig+0x110>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_OC4_SetConfig+0x74>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a2b      	ldr	r2, [pc, #172]	; (80051d8 <TIM_OC4_SetConfig+0x114>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_OC4_SetConfig+0x74>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a2a      	ldr	r2, [pc, #168]	; (80051dc <TIM_OC4_SetConfig+0x118>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d10d      	bne.n	8005154 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800513e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	031b      	lsls	r3, r3, #12
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005152:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a1f      	ldr	r2, [pc, #124]	; (80051d4 <TIM_OC4_SetConfig+0x110>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d013      	beq.n	8005184 <TIM_OC4_SetConfig+0xc0>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a1e      	ldr	r2, [pc, #120]	; (80051d8 <TIM_OC4_SetConfig+0x114>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00f      	beq.n	8005184 <TIM_OC4_SetConfig+0xc0>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a1e      	ldr	r2, [pc, #120]	; (80051e0 <TIM_OC4_SetConfig+0x11c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00b      	beq.n	8005184 <TIM_OC4_SetConfig+0xc0>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a1d      	ldr	r2, [pc, #116]	; (80051e4 <TIM_OC4_SetConfig+0x120>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d007      	beq.n	8005184 <TIM_OC4_SetConfig+0xc0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a1c      	ldr	r2, [pc, #112]	; (80051e8 <TIM_OC4_SetConfig+0x124>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <TIM_OC4_SetConfig+0xc0>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a17      	ldr	r2, [pc, #92]	; (80051dc <TIM_OC4_SetConfig+0x118>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d113      	bne.n	80051ac <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800518a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005192:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	019b      	lsls	r3, r3, #6
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	019b      	lsls	r3, r3, #6
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40012c00 	.word	0x40012c00
 80051d8:	40013400 	.word	0x40013400
 80051dc:	40015000 	.word	0x40015000
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40014400 	.word	0x40014400
 80051e8:	40014800 	.word	0x40014800

080051ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005230:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a19      	ldr	r2, [pc, #100]	; (80052a8 <TIM_OC5_SetConfig+0xbc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <TIM_OC5_SetConfig+0x82>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a18      	ldr	r2, [pc, #96]	; (80052ac <TIM_OC5_SetConfig+0xc0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00f      	beq.n	800526e <TIM_OC5_SetConfig+0x82>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a17      	ldr	r2, [pc, #92]	; (80052b0 <TIM_OC5_SetConfig+0xc4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00b      	beq.n	800526e <TIM_OC5_SetConfig+0x82>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a16      	ldr	r2, [pc, #88]	; (80052b4 <TIM_OC5_SetConfig+0xc8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d007      	beq.n	800526e <TIM_OC5_SetConfig+0x82>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a15      	ldr	r2, [pc, #84]	; (80052b8 <TIM_OC5_SetConfig+0xcc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_OC5_SetConfig+0x82>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a14      	ldr	r2, [pc, #80]	; (80052bc <TIM_OC5_SetConfig+0xd0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d109      	bne.n	8005282 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005274:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	021b      	lsls	r3, r3, #8
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	621a      	str	r2, [r3, #32]
}
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40013400 	.word	0x40013400
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40014400 	.word	0x40014400
 80052b8:	40014800 	.word	0x40014800
 80052bc:	40015000 	.word	0x40015000

080052c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	021b      	lsls	r3, r3, #8
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	051b      	lsls	r3, r3, #20
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a1a      	ldr	r2, [pc, #104]	; (8005380 <TIM_OC6_SetConfig+0xc0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d013      	beq.n	8005344 <TIM_OC6_SetConfig+0x84>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a19      	ldr	r2, [pc, #100]	; (8005384 <TIM_OC6_SetConfig+0xc4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00f      	beq.n	8005344 <TIM_OC6_SetConfig+0x84>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a18      	ldr	r2, [pc, #96]	; (8005388 <TIM_OC6_SetConfig+0xc8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00b      	beq.n	8005344 <TIM_OC6_SetConfig+0x84>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a17      	ldr	r2, [pc, #92]	; (800538c <TIM_OC6_SetConfig+0xcc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d007      	beq.n	8005344 <TIM_OC6_SetConfig+0x84>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a16      	ldr	r2, [pc, #88]	; (8005390 <TIM_OC6_SetConfig+0xd0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_OC6_SetConfig+0x84>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a15      	ldr	r2, [pc, #84]	; (8005394 <TIM_OC6_SetConfig+0xd4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d109      	bne.n	8005358 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800534a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	029b      	lsls	r3, r3, #10
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40012c00 	.word	0x40012c00
 8005384:	40013400 	.word	0x40013400
 8005388:	40014000 	.word	0x40014000
 800538c:	40014400 	.word	0x40014400
 8005390:	40014800 	.word	0x40014800
 8005394:	40015000 	.word	0x40015000

08005398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f023 0201 	bic.w	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f023 030a 	bic.w	r3, r3, #10
 80053d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b087      	sub	sp, #28
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	f023 0210 	bic.w	r2, r3, #16
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005420:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	031b      	lsls	r3, r3, #12
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005432:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	621a      	str	r2, [r3, #32]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800546c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005470:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	f043 0307 	orr.w	r3, r3, #7
 800547c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	609a      	str	r2, [r3, #8]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	021a      	lsls	r2, r3, #8
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	609a      	str	r2, [r3, #8]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	2201      	movs	r2, #1
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a1a      	ldr	r2, [r3, #32]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	43db      	mvns	r3, r3
 80054f2:	401a      	ands	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a1a      	ldr	r2, [r3, #32]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f003 031f 	and.w	r3, r3, #31
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	fa01 f303 	lsl.w	r3, r1, r3
 8005508:	431a      	orrs	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	621a      	str	r2, [r3, #32]
}
 800550e:	bf00      	nop
 8005510:	371c      	adds	r7, #28
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005530:	2302      	movs	r3, #2
 8005532:	e074      	b.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a34      	ldr	r2, [pc, #208]	; (800562c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d009      	beq.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a33      	ldr	r2, [pc, #204]	; (8005630 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d004      	beq.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a31      	ldr	r2, [pc, #196]	; (8005634 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d108      	bne.n	8005584 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005578:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800558a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a21      	ldr	r2, [pc, #132]	; (800562c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d022      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b4:	d01d      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d018      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1d      	ldr	r2, [pc, #116]	; (800563c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1c      	ldr	r2, [pc, #112]	; (8005640 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00e      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a15      	ldr	r2, [pc, #84]	; (8005630 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d009      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a18      	ldr	r2, [pc, #96]	; (8005644 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d004      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a11      	ldr	r2, [pc, #68]	; (8005634 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d10c      	bne.n	800560c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	4313      	orrs	r3, r2
 8005602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40012c00 	.word	0x40012c00
 8005630:	40013400 	.word	0x40013400
 8005634:	40015000 	.word	0x40015000
 8005638:	40000400 	.word	0x40000400
 800563c:	40000800 	.word	0x40000800
 8005640:	40000c00 	.word	0x40000c00
 8005644:	40014000 	.word	0x40014000

08005648 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e042      	b.n	800576c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d106      	bne.n	80056fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fb f9ed 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2224      	movs	r2, #36	; 0x24
 8005702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0201 	bic.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fb24 	bl	8005d6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f825 	bl	8005774 <UART_SetConfig>
 800572a:	4603      	mov	r3, r0
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e01b      	b.n	800576c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fba3 	bl	8005eb0 <UART_CheckIdleState>
 800576a:	4603      	mov	r3, r0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005778:	b08c      	sub	sp, #48	; 0x30
 800577a:	af00      	add	r7, sp, #0
 800577c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	431a      	orrs	r2, r3
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	431a      	orrs	r2, r3
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	4313      	orrs	r3, r2
 800579a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4baa      	ldr	r3, [pc, #680]	; (8005a4c <UART_SetConfig+0x2d8>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ac:	430b      	orrs	r3, r1
 80057ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a9f      	ldr	r2, [pc, #636]	; (8005a50 <UART_SetConfig+0x2dc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d004      	beq.n	80057e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057dc:	4313      	orrs	r3, r2
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80057ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	6812      	ldr	r2, [r2, #0]
 80057f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057f4:	430b      	orrs	r3, r1
 80057f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	f023 010f 	bic.w	r1, r3, #15
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a90      	ldr	r2, [pc, #576]	; (8005a54 <UART_SetConfig+0x2e0>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d125      	bne.n	8005864 <UART_SetConfig+0xf0>
 8005818:	4b8f      	ldr	r3, [pc, #572]	; (8005a58 <UART_SetConfig+0x2e4>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b03      	cmp	r3, #3
 8005824:	d81a      	bhi.n	800585c <UART_SetConfig+0xe8>
 8005826:	a201      	add	r2, pc, #4	; (adr r2, 800582c <UART_SetConfig+0xb8>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	0800583d 	.word	0x0800583d
 8005830:	0800584d 	.word	0x0800584d
 8005834:	08005845 	.word	0x08005845
 8005838:	08005855 	.word	0x08005855
 800583c:	2301      	movs	r3, #1
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005842:	e116      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005844:	2302      	movs	r3, #2
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800584a:	e112      	b.n	8005a72 <UART_SetConfig+0x2fe>
 800584c:	2304      	movs	r3, #4
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005852:	e10e      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005854:	2308      	movs	r3, #8
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585a:	e10a      	b.n	8005a72 <UART_SetConfig+0x2fe>
 800585c:	2310      	movs	r3, #16
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005862:	e106      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a7c      	ldr	r2, [pc, #496]	; (8005a5c <UART_SetConfig+0x2e8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d138      	bne.n	80058e0 <UART_SetConfig+0x16c>
 800586e:	4b7a      	ldr	r3, [pc, #488]	; (8005a58 <UART_SetConfig+0x2e4>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005874:	f003 030c 	and.w	r3, r3, #12
 8005878:	2b0c      	cmp	r3, #12
 800587a:	d82d      	bhi.n	80058d8 <UART_SetConfig+0x164>
 800587c:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <UART_SetConfig+0x110>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	080058b9 	.word	0x080058b9
 8005888:	080058d9 	.word	0x080058d9
 800588c:	080058d9 	.word	0x080058d9
 8005890:	080058d9 	.word	0x080058d9
 8005894:	080058c9 	.word	0x080058c9
 8005898:	080058d9 	.word	0x080058d9
 800589c:	080058d9 	.word	0x080058d9
 80058a0:	080058d9 	.word	0x080058d9
 80058a4:	080058c1 	.word	0x080058c1
 80058a8:	080058d9 	.word	0x080058d9
 80058ac:	080058d9 	.word	0x080058d9
 80058b0:	080058d9 	.word	0x080058d9
 80058b4:	080058d1 	.word	0x080058d1
 80058b8:	2300      	movs	r3, #0
 80058ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058be:	e0d8      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80058c0:	2302      	movs	r3, #2
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c6:	e0d4      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80058c8:	2304      	movs	r3, #4
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ce:	e0d0      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80058d0:	2308      	movs	r3, #8
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d6:	e0cc      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80058d8:	2310      	movs	r3, #16
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058de:	e0c8      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a5e      	ldr	r2, [pc, #376]	; (8005a60 <UART_SetConfig+0x2ec>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d125      	bne.n	8005936 <UART_SetConfig+0x1c2>
 80058ea:	4b5b      	ldr	r3, [pc, #364]	; (8005a58 <UART_SetConfig+0x2e4>)
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058f4:	2b30      	cmp	r3, #48	; 0x30
 80058f6:	d016      	beq.n	8005926 <UART_SetConfig+0x1b2>
 80058f8:	2b30      	cmp	r3, #48	; 0x30
 80058fa:	d818      	bhi.n	800592e <UART_SetConfig+0x1ba>
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d00a      	beq.n	8005916 <UART_SetConfig+0x1a2>
 8005900:	2b20      	cmp	r3, #32
 8005902:	d814      	bhi.n	800592e <UART_SetConfig+0x1ba>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <UART_SetConfig+0x19a>
 8005908:	2b10      	cmp	r3, #16
 800590a:	d008      	beq.n	800591e <UART_SetConfig+0x1aa>
 800590c:	e00f      	b.n	800592e <UART_SetConfig+0x1ba>
 800590e:	2300      	movs	r3, #0
 8005910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005914:	e0ad      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005916:	2302      	movs	r3, #2
 8005918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591c:	e0a9      	b.n	8005a72 <UART_SetConfig+0x2fe>
 800591e:	2304      	movs	r3, #4
 8005920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005924:	e0a5      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005926:	2308      	movs	r3, #8
 8005928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592c:	e0a1      	b.n	8005a72 <UART_SetConfig+0x2fe>
 800592e:	2310      	movs	r3, #16
 8005930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005934:	e09d      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a4a      	ldr	r2, [pc, #296]	; (8005a64 <UART_SetConfig+0x2f0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d125      	bne.n	800598c <UART_SetConfig+0x218>
 8005940:	4b45      	ldr	r3, [pc, #276]	; (8005a58 <UART_SetConfig+0x2e4>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005946:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800594a:	2bc0      	cmp	r3, #192	; 0xc0
 800594c:	d016      	beq.n	800597c <UART_SetConfig+0x208>
 800594e:	2bc0      	cmp	r3, #192	; 0xc0
 8005950:	d818      	bhi.n	8005984 <UART_SetConfig+0x210>
 8005952:	2b80      	cmp	r3, #128	; 0x80
 8005954:	d00a      	beq.n	800596c <UART_SetConfig+0x1f8>
 8005956:	2b80      	cmp	r3, #128	; 0x80
 8005958:	d814      	bhi.n	8005984 <UART_SetConfig+0x210>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <UART_SetConfig+0x1f0>
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d008      	beq.n	8005974 <UART_SetConfig+0x200>
 8005962:	e00f      	b.n	8005984 <UART_SetConfig+0x210>
 8005964:	2300      	movs	r3, #0
 8005966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800596a:	e082      	b.n	8005a72 <UART_SetConfig+0x2fe>
 800596c:	2302      	movs	r3, #2
 800596e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005972:	e07e      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005974:	2304      	movs	r3, #4
 8005976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800597a:	e07a      	b.n	8005a72 <UART_SetConfig+0x2fe>
 800597c:	2308      	movs	r3, #8
 800597e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005982:	e076      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005984:	2310      	movs	r3, #16
 8005986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598a:	e072      	b.n	8005a72 <UART_SetConfig+0x2fe>
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a35      	ldr	r2, [pc, #212]	; (8005a68 <UART_SetConfig+0x2f4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d12a      	bne.n	80059ec <UART_SetConfig+0x278>
 8005996:	4b30      	ldr	r3, [pc, #192]	; (8005a58 <UART_SetConfig+0x2e4>)
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a4:	d01a      	beq.n	80059dc <UART_SetConfig+0x268>
 80059a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059aa:	d81b      	bhi.n	80059e4 <UART_SetConfig+0x270>
 80059ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059b0:	d00c      	beq.n	80059cc <UART_SetConfig+0x258>
 80059b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059b6:	d815      	bhi.n	80059e4 <UART_SetConfig+0x270>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <UART_SetConfig+0x250>
 80059bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c0:	d008      	beq.n	80059d4 <UART_SetConfig+0x260>
 80059c2:	e00f      	b.n	80059e4 <UART_SetConfig+0x270>
 80059c4:	2300      	movs	r3, #0
 80059c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ca:	e052      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80059cc:	2302      	movs	r3, #2
 80059ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d2:	e04e      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80059d4:	2304      	movs	r3, #4
 80059d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059da:	e04a      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80059dc:	2308      	movs	r3, #8
 80059de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e2:	e046      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80059e4:	2310      	movs	r3, #16
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ea:	e042      	b.n	8005a72 <UART_SetConfig+0x2fe>
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a17      	ldr	r2, [pc, #92]	; (8005a50 <UART_SetConfig+0x2dc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d13a      	bne.n	8005a6c <UART_SetConfig+0x2f8>
 80059f6:	4b18      	ldr	r3, [pc, #96]	; (8005a58 <UART_SetConfig+0x2e4>)
 80059f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a04:	d01a      	beq.n	8005a3c <UART_SetConfig+0x2c8>
 8005a06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a0a:	d81b      	bhi.n	8005a44 <UART_SetConfig+0x2d0>
 8005a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a10:	d00c      	beq.n	8005a2c <UART_SetConfig+0x2b8>
 8005a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a16:	d815      	bhi.n	8005a44 <UART_SetConfig+0x2d0>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <UART_SetConfig+0x2b0>
 8005a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a20:	d008      	beq.n	8005a34 <UART_SetConfig+0x2c0>
 8005a22:	e00f      	b.n	8005a44 <UART_SetConfig+0x2d0>
 8005a24:	2300      	movs	r3, #0
 8005a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2a:	e022      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a32:	e01e      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005a34:	2304      	movs	r3, #4
 8005a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a3a:	e01a      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005a3c:	2308      	movs	r3, #8
 8005a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a42:	e016      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005a44:	2310      	movs	r3, #16
 8005a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4a:	e012      	b.n	8005a72 <UART_SetConfig+0x2fe>
 8005a4c:	cfff69f3 	.word	0xcfff69f3
 8005a50:	40008000 	.word	0x40008000
 8005a54:	40013800 	.word	0x40013800
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	40004400 	.word	0x40004400
 8005a60:	40004800 	.word	0x40004800
 8005a64:	40004c00 	.word	0x40004c00
 8005a68:	40005000 	.word	0x40005000
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4aae      	ldr	r2, [pc, #696]	; (8005d30 <UART_SetConfig+0x5bc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	f040 8097 	bne.w	8005bac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d823      	bhi.n	8005ace <UART_SetConfig+0x35a>
 8005a86:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <UART_SetConfig+0x318>)
 8005a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8c:	08005ab1 	.word	0x08005ab1
 8005a90:	08005acf 	.word	0x08005acf
 8005a94:	08005ab9 	.word	0x08005ab9
 8005a98:	08005acf 	.word	0x08005acf
 8005a9c:	08005abf 	.word	0x08005abf
 8005aa0:	08005acf 	.word	0x08005acf
 8005aa4:	08005acf 	.word	0x08005acf
 8005aa8:	08005acf 	.word	0x08005acf
 8005aac:	08005ac7 	.word	0x08005ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab0:	f7fd ffec 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8005ab4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ab6:	e010      	b.n	8005ada <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ab8:	4b9e      	ldr	r3, [pc, #632]	; (8005d34 <UART_SetConfig+0x5c0>)
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005abc:	e00d      	b.n	8005ada <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005abe:	f7fd ff77 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8005ac2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ac4:	e009      	b.n	8005ada <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005acc:	e005      	b.n	8005ada <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ad8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 8130 	beq.w	8005d42 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	4a94      	ldr	r2, [pc, #592]	; (8005d38 <UART_SetConfig+0x5c4>)
 8005ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aec:	461a      	mov	r2, r3
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	4413      	add	r3, r2
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d305      	bcc.n	8005b12 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d903      	bls.n	8005b1a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b18:	e113      	b.n	8005d42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	60bb      	str	r3, [r7, #8]
 8005b20:	60fa      	str	r2, [r7, #12]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	4a84      	ldr	r2, [pc, #528]	; (8005d38 <UART_SetConfig+0x5c4>)
 8005b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2200      	movs	r2, #0
 8005b30:	603b      	str	r3, [r7, #0]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b3c:	f7fa fb6c 	bl	8000218 <__aeabi_uldivmod>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4610      	mov	r0, r2
 8005b46:	4619      	mov	r1, r3
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	f04f 0300 	mov.w	r3, #0
 8005b50:	020b      	lsls	r3, r1, #8
 8005b52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b56:	0202      	lsls	r2, r0, #8
 8005b58:	6979      	ldr	r1, [r7, #20]
 8005b5a:	6849      	ldr	r1, [r1, #4]
 8005b5c:	0849      	lsrs	r1, r1, #1
 8005b5e:	2000      	movs	r0, #0
 8005b60:	460c      	mov	r4, r1
 8005b62:	4605      	mov	r5, r0
 8005b64:	eb12 0804 	adds.w	r8, r2, r4
 8005b68:	eb43 0905 	adc.w	r9, r3, r5
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	469a      	mov	sl, r3
 8005b74:	4693      	mov	fp, r2
 8005b76:	4652      	mov	r2, sl
 8005b78:	465b      	mov	r3, fp
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	f7fa fb4b 	bl	8000218 <__aeabi_uldivmod>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4613      	mov	r3, r2
 8005b88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b90:	d308      	bcc.n	8005ba4 <UART_SetConfig+0x430>
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b98:	d204      	bcs.n	8005ba4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6a3a      	ldr	r2, [r7, #32]
 8005ba0:	60da      	str	r2, [r3, #12]
 8005ba2:	e0ce      	b.n	8005d42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005baa:	e0ca      	b.n	8005d42 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb4:	d166      	bne.n	8005c84 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d827      	bhi.n	8005c0e <UART_SetConfig+0x49a>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0x450>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	08005c0f 	.word	0x08005c0f
 8005bd4:	08005bff 	.word	0x08005bff
 8005bd8:	08005c0f 	.word	0x08005c0f
 8005bdc:	08005c0f 	.word	0x08005c0f
 8005be0:	08005c0f 	.word	0x08005c0f
 8005be4:	08005c07 	.word	0x08005c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be8:	f7fd ff50 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8005bec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bee:	e014      	b.n	8005c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bf0:	f7fd ff62 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8005bf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bf6:	e010      	b.n	8005c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf8:	4b4e      	ldr	r3, [pc, #312]	; (8005d34 <UART_SetConfig+0x5c0>)
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bfc:	e00d      	b.n	8005c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfe:	f7fd fed7 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8005c02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c04:	e009      	b.n	8005c1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c0c:	e005      	b.n	8005c1a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 8090 	beq.w	8005d42 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	4a44      	ldr	r2, [pc, #272]	; (8005d38 <UART_SetConfig+0x5c4>)
 8005c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c34:	005a      	lsls	r2, r3, #1
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	085b      	lsrs	r3, r3, #1
 8005c3c:	441a      	add	r2, r3
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	2b0f      	cmp	r3, #15
 8005c4c:	d916      	bls.n	8005c7c <UART_SetConfig+0x508>
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c54:	d212      	bcs.n	8005c7c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	f023 030f 	bic.w	r3, r3, #15
 8005c5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	085b      	lsrs	r3, r3, #1
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	8bfb      	ldrh	r3, [r7, #30]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	8bfa      	ldrh	r2, [r7, #30]
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	e062      	b.n	8005d42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c82:	e05e      	b.n	8005d42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d828      	bhi.n	8005cde <UART_SetConfig+0x56a>
 8005c8c:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <UART_SetConfig+0x520>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005cb9 	.word	0x08005cb9
 8005c98:	08005cc1 	.word	0x08005cc1
 8005c9c:	08005cc9 	.word	0x08005cc9
 8005ca0:	08005cdf 	.word	0x08005cdf
 8005ca4:	08005ccf 	.word	0x08005ccf
 8005ca8:	08005cdf 	.word	0x08005cdf
 8005cac:	08005cdf 	.word	0x08005cdf
 8005cb0:	08005cdf 	.word	0x08005cdf
 8005cb4:	08005cd7 	.word	0x08005cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb8:	f7fd fee8 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8005cbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cbe:	e014      	b.n	8005cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc0:	f7fd fefa 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8005cc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cc6:	e010      	b.n	8005cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc8:	4b1a      	ldr	r3, [pc, #104]	; (8005d34 <UART_SetConfig+0x5c0>)
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ccc:	e00d      	b.n	8005cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cce:	f7fd fe6f 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8005cd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cd4:	e009      	b.n	8005cea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cdc:	e005      	b.n	8005cea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ce8:	bf00      	nop
    }

    if (pclk != 0U)
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d028      	beq.n	8005d42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	4a10      	ldr	r2, [pc, #64]	; (8005d38 <UART_SetConfig+0x5c4>)
 8005cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	085b      	lsrs	r3, r3, #1
 8005d08:	441a      	add	r2, r3
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	2b0f      	cmp	r3, #15
 8005d18:	d910      	bls.n	8005d3c <UART_SetConfig+0x5c8>
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d20:	d20c      	bcs.n	8005d3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60da      	str	r2, [r3, #12]
 8005d2c:	e009      	b.n	8005d42 <UART_SetConfig+0x5ce>
 8005d2e:	bf00      	nop
 8005d30:	40008000 	.word	0x40008000
 8005d34:	00f42400 	.word	0x00f42400
 8005d38:	08006438 	.word	0x08006438
      }
      else
      {
        ret = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2200      	movs	r2, #0
 8005d56:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005d5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3730      	adds	r7, #48	; 0x30
 8005d66:	46bd      	mov	sp, r7
 8005d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01a      	beq.n	8005e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e6a:	d10a      	bne.n	8005e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	605a      	str	r2, [r3, #4]
  }
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b098      	sub	sp, #96	; 0x60
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ec0:	f7fa ff8a 	bl	8000dd8 <HAL_GetTick>
 8005ec4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d12f      	bne.n	8005f34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005edc:	2200      	movs	r2, #0
 8005ede:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f88e 	bl	8006004 <UART_WaitOnFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d022      	beq.n	8005f34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f02:	653b      	str	r3, [r7, #80]	; 0x50
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f0e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e6      	bne.n	8005eee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e063      	b.n	8005ffc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d149      	bne.n	8005fd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f857 	bl	8006004 <UART_WaitOnFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d03c      	beq.n	8005fd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	623b      	str	r3, [r7, #32]
   return(result);
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e6      	bne.n	8005f5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3308      	adds	r3, #8
 8005f94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f023 0301 	bic.w	r3, r3, #1
 8005fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3308      	adds	r3, #8
 8005fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fae:	61fa      	str	r2, [r7, #28]
 8005fb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	69b9      	ldr	r1, [r7, #24]
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	617b      	str	r3, [r7, #20]
   return(result);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e5      	bne.n	8005f8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e012      	b.n	8005ffc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3758      	adds	r7, #88	; 0x58
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	4613      	mov	r3, r2
 8006012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006014:	e04f      	b.n	80060b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800601c:	d04b      	beq.n	80060b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601e:	f7fa fedb 	bl	8000dd8 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	429a      	cmp	r2, r3
 800602c:	d302      	bcc.n	8006034 <UART_WaitOnFlagUntilTimeout+0x30>
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e04e      	b.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b00      	cmp	r3, #0
 8006044:	d037      	beq.n	80060b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b80      	cmp	r3, #128	; 0x80
 800604a:	d034      	beq.n	80060b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d031      	beq.n	80060b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b08      	cmp	r3, #8
 800605e:	d110      	bne.n	8006082 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2208      	movs	r2, #8
 8006066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f838 	bl	80060de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2208      	movs	r2, #8
 8006072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e029      	b.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800608c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006090:	d111      	bne.n	80060b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800609a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 f81e 	bl	80060de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e00f      	b.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69da      	ldr	r2, [r3, #28]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	4013      	ands	r3, r2
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	bf0c      	ite	eq
 80060c6:	2301      	moveq	r3, #1
 80060c8:	2300      	movne	r3, #0
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	79fb      	ldrb	r3, [r7, #7]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d0a0      	beq.n	8006016 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060de:	b480      	push	{r7}
 80060e0:	b095      	sub	sp, #84	; 0x54
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	461a      	mov	r2, r3
 8006102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006104:	643b      	str	r3, [r7, #64]	; 0x40
 8006106:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800610a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e6      	bne.n	80060e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3308      	adds	r3, #8
 800611e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	61fb      	str	r3, [r7, #28]
   return(result);
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800612e:	f023 0301 	bic.w	r3, r3, #1
 8006132:	64bb      	str	r3, [r7, #72]	; 0x48
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3308      	adds	r3, #8
 800613a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800613c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800613e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e3      	bne.n	8006118 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006154:	2b01      	cmp	r3, #1
 8006156:	d118      	bne.n	800618a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	60bb      	str	r3, [r7, #8]
   return(result);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f023 0310 	bic.w	r3, r3, #16
 800616c:	647b      	str	r3, [r7, #68]	; 0x44
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006176:	61bb      	str	r3, [r7, #24]
 8006178:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6979      	ldr	r1, [r7, #20]
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	613b      	str	r3, [r7, #16]
   return(result);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e6      	bne.n	8006158 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800619e:	bf00      	nop
 80061a0:	3754      	adds	r7, #84	; 0x54
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80061bc:	2302      	movs	r3, #2
 80061be:	e027      	b.n	8006210 <HAL_UARTEx_DisableFifoMode+0x66>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2224      	movs	r2, #36	; 0x24
 80061cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0201 	bic.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2220      	movs	r2, #32
 8006202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006230:	2302      	movs	r3, #2
 8006232:	e02d      	b.n	8006290 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2224      	movs	r2, #36	; 0x24
 8006240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0201 	bic.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f84f 	bl	8006314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e02d      	b.n	800630c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2224      	movs	r2, #36	; 0x24
 80062bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0201 	bic.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f811 	bl	8006314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006320:	2b00      	cmp	r3, #0
 8006322:	d108      	bne.n	8006336 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006334:	e031      	b.n	800639a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006336:	2308      	movs	r3, #8
 8006338:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800633a:	2308      	movs	r3, #8
 800633c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	0e5b      	lsrs	r3, r3, #25
 8006346:	b2db      	uxtb	r3, r3
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	0f5b      	lsrs	r3, r3, #29
 8006356:	b2db      	uxtb	r3, r3
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	7b3a      	ldrb	r2, [r7, #12]
 8006362:	4911      	ldr	r1, [pc, #68]	; (80063a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006364:	5c8a      	ldrb	r2, [r1, r2]
 8006366:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800636a:	7b3a      	ldrb	r2, [r7, #12]
 800636c:	490f      	ldr	r1, [pc, #60]	; (80063ac <UARTEx_SetNbDataToProcess+0x98>)
 800636e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006370:	fb93 f3f2 	sdiv	r3, r3, r2
 8006374:	b29a      	uxth	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	7b7a      	ldrb	r2, [r7, #13]
 8006380:	4909      	ldr	r1, [pc, #36]	; (80063a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006382:	5c8a      	ldrb	r2, [r1, r2]
 8006384:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006388:	7b7a      	ldrb	r2, [r7, #13]
 800638a:	4908      	ldr	r1, [pc, #32]	; (80063ac <UARTEx_SetNbDataToProcess+0x98>)
 800638c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800638e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006392:	b29a      	uxth	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	08006450 	.word	0x08006450
 80063ac:	08006458 	.word	0x08006458

080063b0 <memset>:
 80063b0:	4402      	add	r2, r0
 80063b2:	4603      	mov	r3, r0
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d100      	bne.n	80063ba <memset+0xa>
 80063b8:	4770      	bx	lr
 80063ba:	f803 1b01 	strb.w	r1, [r3], #1
 80063be:	e7f9      	b.n	80063b4 <memset+0x4>

080063c0 <__libc_init_array>:
 80063c0:	b570      	push	{r4, r5, r6, lr}
 80063c2:	4d0d      	ldr	r5, [pc, #52]	; (80063f8 <__libc_init_array+0x38>)
 80063c4:	4c0d      	ldr	r4, [pc, #52]	; (80063fc <__libc_init_array+0x3c>)
 80063c6:	1b64      	subs	r4, r4, r5
 80063c8:	10a4      	asrs	r4, r4, #2
 80063ca:	2600      	movs	r6, #0
 80063cc:	42a6      	cmp	r6, r4
 80063ce:	d109      	bne.n	80063e4 <__libc_init_array+0x24>
 80063d0:	4d0b      	ldr	r5, [pc, #44]	; (8006400 <__libc_init_array+0x40>)
 80063d2:	4c0c      	ldr	r4, [pc, #48]	; (8006404 <__libc_init_array+0x44>)
 80063d4:	f000 f818 	bl	8006408 <_init>
 80063d8:	1b64      	subs	r4, r4, r5
 80063da:	10a4      	asrs	r4, r4, #2
 80063dc:	2600      	movs	r6, #0
 80063de:	42a6      	cmp	r6, r4
 80063e0:	d105      	bne.n	80063ee <__libc_init_array+0x2e>
 80063e2:	bd70      	pop	{r4, r5, r6, pc}
 80063e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e8:	4798      	blx	r3
 80063ea:	3601      	adds	r6, #1
 80063ec:	e7ee      	b.n	80063cc <__libc_init_array+0xc>
 80063ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f2:	4798      	blx	r3
 80063f4:	3601      	adds	r6, #1
 80063f6:	e7f2      	b.n	80063de <__libc_init_array+0x1e>
 80063f8:	08006468 	.word	0x08006468
 80063fc:	08006468 	.word	0x08006468
 8006400:	08006468 	.word	0x08006468
 8006404:	0800646c 	.word	0x0800646c

08006408 <_init>:
 8006408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640a:	bf00      	nop
 800640c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640e:	bc08      	pop	{r3}
 8006410:	469e      	mov	lr, r3
 8006412:	4770      	bx	lr

08006414 <_fini>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	bf00      	nop
 8006418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641a:	bc08      	pop	{r3}
 800641c:	469e      	mov	lr, r3
 800641e:	4770      	bx	lr
