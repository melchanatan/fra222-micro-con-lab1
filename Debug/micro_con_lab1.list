
micro_con_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a64  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006c3c  08006c3c  00016c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c7c  08006c7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c84  08006c84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c88  08006c88  00016c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000000c  08006c98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08006c98  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017556  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029fa  00000000  00000000  000375d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  00039fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fec  00000000  00000000  0003b430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003c41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ca2  00000000  00000000  00063e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e9bb  00000000  00000000  0007aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005880  00000000  00000000  001894b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018ed34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006c24 	.word	0x08006c24

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006c24 	.word	0x08006c24

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fc6f 	bl	8000dfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f822 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f9fe 	bl	8000920 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f9d2 	bl	80008cc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f910 	bl	800074c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800052c:	f000 f866 	bl	80005fc <MX_ADC1_Init>
  MX_TIM3_Init();
 8000530:	f000 f956 	bl	80007e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000534:	4808      	ldr	r0, [pc, #32]	; (8000558 <main+0x44>)
 8000536:	f004 f9cf 	bl	80048d8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800053a:	2100      	movs	r1, #0
 800053c:	4806      	ldr	r0, [pc, #24]	; (8000558 <main+0x44>)
 800053e:	f004 fa9d 	bl	8004a7c <HAL_TIM_PWM_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000542:	217f      	movs	r1, #127	; 0x7f
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <main+0x48>)
 8000546:	f002 fa63 	bl	8002a10 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 40);
 800054a:	2228      	movs	r2, #40	; 0x28
 800054c:	4904      	ldr	r1, [pc, #16]	; (8000560 <main+0x4c>)
 800054e:	4803      	ldr	r0, [pc, #12]	; (800055c <main+0x48>)
 8000550:	f001 f8e6 	bl	8001720 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x40>
 8000556:	bf00      	nop
 8000558:	20000188 	.word	0x20000188
 800055c:	20000028 	.word	0x20000028
 8000560:	200001d4 	.word	0x200001d4

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0318 	add.w	r3, r7, #24
 800056e:	2238      	movs	r2, #56	; 0x38
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f006 fb2a 	bl	8006bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000586:	2000      	movs	r0, #0
 8000588:	f003 f91e 	bl	80037c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	2340      	movs	r3, #64	; 0x40
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005a2:	2304      	movs	r3, #4
 80005a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005a6:	2355      	movs	r3, #85	; 0x55
 80005a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0318 	add.w	r3, r7, #24
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 f9b8 	bl	8003930 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005c6:	f000 fa19 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2303      	movs	r3, #3
 80005d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fcb6 	bl	8003f54 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ee:	f000 fa05 	bl	80009fc <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	; 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08c      	sub	sp, #48	; 0x30
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2220      	movs	r2, #32
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f006 fad9 	bl	8006bcc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800061a:	4b47      	ldr	r3, [pc, #284]	; (8000738 <MX_ADC1_Init+0x13c>)
 800061c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000620:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000622:	4b45      	ldr	r3, [pc, #276]	; (8000738 <MX_ADC1_Init+0x13c>)
 8000624:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000628:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062a:	4b43      	ldr	r3, [pc, #268]	; (8000738 <MX_ADC1_Init+0x13c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000630:	4b41      	ldr	r3, [pc, #260]	; (8000738 <MX_ADC1_Init+0x13c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000636:	4b40      	ldr	r3, [pc, #256]	; (8000738 <MX_ADC1_Init+0x13c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800063c:	4b3e      	ldr	r3, [pc, #248]	; (8000738 <MX_ADC1_Init+0x13c>)
 800063e:	2201      	movs	r2, #1
 8000640:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b3d      	ldr	r3, [pc, #244]	; (8000738 <MX_ADC1_Init+0x13c>)
 8000644:	2204      	movs	r2, #4
 8000646:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000648:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <MX_ADC1_Init+0x13c>)
 800064a:	2200      	movs	r2, #0
 800064c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800064e:	4b3a      	ldr	r3, [pc, #232]	; (8000738 <MX_ADC1_Init+0x13c>)
 8000650:	2201      	movs	r2, #1
 8000652:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8000654:	4b38      	ldr	r3, [pc, #224]	; (8000738 <MX_ADC1_Init+0x13c>)
 8000656:	2204      	movs	r2, #4
 8000658:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065a:	4b37      	ldr	r3, [pc, #220]	; (8000738 <MX_ADC1_Init+0x13c>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000662:	4b35      	ldr	r3, [pc, #212]	; (8000738 <MX_ADC1_Init+0x13c>)
 8000664:	2200      	movs	r2, #0
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000668:	4b33      	ldr	r3, [pc, #204]	; (8000738 <MX_ADC1_Init+0x13c>)
 800066a:	2200      	movs	r2, #0
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800066e:	4b32      	ldr	r3, [pc, #200]	; (8000738 <MX_ADC1_Init+0x13c>)
 8000670:	2201      	movs	r2, #1
 8000672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000676:	4b30      	ldr	r3, [pc, #192]	; (8000738 <MX_ADC1_Init+0x13c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800067c:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <MX_ADC1_Init+0x13c>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	482c      	ldr	r0, [pc, #176]	; (8000738 <MX_ADC1_Init+0x13c>)
 8000686:	f000 fe8f 	bl	80013a8 <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000690:	f000 f9b4 	bl	80009fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069c:	4619      	mov	r1, r3
 800069e:	4826      	ldr	r0, [pc, #152]	; (8000738 <MX_ADC1_Init+0x13c>)
 80006a0:	f002 fa4a 	bl	8002b38 <HAL_ADCEx_MultiModeConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006aa:	f000 f9a7 	bl	80009fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_ADC1_Init+0x140>)
 80006b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b2:	2306      	movs	r3, #6
 80006b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006b6:	2307      	movs	r3, #7
 80006b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ba:	237f      	movs	r3, #127	; 0x7f
 80006bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006be:	2304      	movs	r3, #4
 80006c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	481b      	ldr	r0, [pc, #108]	; (8000738 <MX_ADC1_Init+0x13c>)
 80006cc:	f001 fb84 	bl	8001dd8 <HAL_ADC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006d6:	f000 f991 	bl	80009fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_ADC1_Init+0x144>)
 80006dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006de:	230c      	movs	r3, #12
 80006e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4814      	ldr	r0, [pc, #80]	; (8000738 <MX_ADC1_Init+0x13c>)
 80006e8:	f001 fb76 	bl	8001dd8 <HAL_ADC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006f2:	f000 f983 	bl	80009fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_ADC1_Init+0x148>)
 80006f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006fa:	2312      	movs	r3, #18
 80006fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4619      	mov	r1, r3
 8000702:	480d      	ldr	r0, [pc, #52]	; (8000738 <MX_ADC1_Init+0x13c>)
 8000704:	f001 fb68 	bl	8001dd8 <HAL_ADC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800070e:	f000 f975 	bl	80009fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_ADC1_Init+0x14c>)
 8000714:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000716:	2318      	movs	r3, #24
 8000718:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	4806      	ldr	r0, [pc, #24]	; (8000738 <MX_ADC1_Init+0x13c>)
 8000720:	f001 fb5a 	bl	8001dd8 <HAL_ADC_ConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800072a:	f000 f967 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	3730      	adds	r7, #48	; 0x30
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000028 	.word	0x20000028
 800073c:	04300002 	.word	0x04300002
 8000740:	08600004 	.word	0x08600004
 8000744:	3ef08000 	.word	0x3ef08000
 8000748:	14f00020 	.word	0x14f00020

0800074c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000750:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000752:	4a22      	ldr	r2, [pc, #136]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000754:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800078e:	4812      	ldr	r0, [pc, #72]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000790:	f005 fbae 	bl	8005ef0 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800079a:	f000 f92f 	bl	80009fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 80007a2:	f006 f949 	bl	8006a38 <HAL_UARTEx_SetTxFifoThreshold>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007ac:	f000 f926 	bl	80009fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	4809      	ldr	r0, [pc, #36]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 80007b4:	f006 f97e 	bl	8006ab4 <HAL_UARTEx_SetRxFifoThreshold>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007be:	f000 f91d 	bl	80009fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 80007c4:	f006 f8ff 	bl	80069c6 <HAL_UARTEx_DisableFifoMode>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007ce:	f000 f915 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000f4 	.word	0x200000f4
 80007dc:	40008000 	.word	0x40008000

080007e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08e      	sub	sp, #56	; 0x38
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000800:	463b      	mov	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000812:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <MX_TIM3_Init+0xe4>)
 8000814:	4a2c      	ldr	r2, [pc, #176]	; (80008c8 <MX_TIM3_Init+0xe8>)
 8000816:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000818:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <MX_TIM3_Init+0xe4>)
 800081a:	22a9      	movs	r2, #169	; 0xa9
 800081c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <MX_TIM3_Init+0xe4>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000824:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <MX_TIM3_Init+0xe4>)
 8000826:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800082a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082c:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <MX_TIM3_Init+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <MX_TIM3_Init+0xe4>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000838:	4822      	ldr	r0, [pc, #136]	; (80008c4 <MX_TIM3_Init+0xe4>)
 800083a:	f003 fff5 	bl	8004828 <HAL_TIM_Base_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000844:	f000 f8da 	bl	80009fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800084e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000852:	4619      	mov	r1, r3
 8000854:	481b      	ldr	r0, [pc, #108]	; (80008c4 <MX_TIM3_Init+0xe4>)
 8000856:	f004 fc87 	bl	8005168 <HAL_TIM_ConfigClockSource>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000860:	f000 f8cc 	bl	80009fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000864:	4817      	ldr	r0, [pc, #92]	; (80008c4 <MX_TIM3_Init+0xe4>)
 8000866:	f004 f8a7 	bl	80049b8 <HAL_TIM_PWM_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000870:	f000 f8c4 	bl	80009fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4810      	ldr	r0, [pc, #64]	; (80008c4 <MX_TIM3_Init+0xe4>)
 8000884:	f005 fa58 	bl	8005d38 <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800088e:	f000 f8b5 	bl	80009fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000892:	2360      	movs	r3, #96	; 0x60
 8000894:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000896:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800089a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a4:	463b      	mov	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	4619      	mov	r1, r3
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <MX_TIM3_Init+0xe4>)
 80008ac:	f004 fb48 	bl	8004f40 <HAL_TIM_PWM_ConfigChannel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80008b6:	f000 f8a1 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	3738      	adds	r7, #56	; 0x38
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000188 	.word	0x20000188
 80008c8:	40000400 	.word	0x40000400

080008cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_DMA_Init+0x50>)
 80008d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008d6:	4a11      	ldr	r2, [pc, #68]	; (800091c <MX_DMA_Init+0x50>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6493      	str	r3, [r2, #72]	; 0x48
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_DMA_Init+0x50>)
 80008e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_DMA_Init+0x50>)
 80008ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <MX_DMA_Init+0x50>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6493      	str	r3, [r2, #72]	; 0x48
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_DMA_Init+0x50>)
 80008f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	200b      	movs	r0, #11
 8000908:	f002 faf9 	bl	8002efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800090c:	200b      	movs	r0, #11
 800090e:	f002 fb10 	bl	8002f32 <HAL_NVIC_EnableIRQ>

}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <MX_GPIO_Init+0xd4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a2e      	ldr	r2, [pc, #184]	; (80009f4 <MX_GPIO_Init+0xd4>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <MX_GPIO_Init+0xd4>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094e:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <MX_GPIO_Init+0xd4>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a28      	ldr	r2, [pc, #160]	; (80009f4 <MX_GPIO_Init+0xd4>)
 8000954:	f043 0320 	orr.w	r3, r3, #32
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <MX_GPIO_Init+0xd4>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0320 	and.w	r3, r3, #32
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <MX_GPIO_Init+0xd4>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <MX_GPIO_Init+0xd4>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <MX_GPIO_Init+0xd4>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_GPIO_Init+0xd4>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4a1c      	ldr	r2, [pc, #112]	; (80009f4 <MX_GPIO_Init+0xd4>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_GPIO_Init+0xd4>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2120      	movs	r1, #32
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f002 fed7 	bl	8003750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	480f      	ldr	r0, [pc, #60]	; (80009f8 <MX_GPIO_Init+0xd8>)
 80009ba:	f002 fd47 	bl	800344c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009be:	2320      	movs	r3, #32
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d8:	f002 fd38 	bl	800344c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	2028      	movs	r0, #40	; 0x28
 80009e2:	f002 fa8c 	bl	8002efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e6:	2028      	movs	r0, #40	; 0x28
 80009e8:	f002 faa3 	bl	8002f32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40021000 	.word	0x40021000
 80009f8:	48000800 	.word	0x48000800

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <Error_Handler+0x8>
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <HAL_MspInit+0x44>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <HAL_MspInit+0x44>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6613      	str	r3, [r2, #96]	; 0x60
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <HAL_MspInit+0x44>)
 8000a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_MspInit+0x44>)
 8000a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_MspInit+0x44>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	6593      	str	r3, [r2, #88]	; 0x58
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_MspInit+0x44>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a3e:	f002 ff67 	bl	8003910 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0a0      	sub	sp, #128	; 0x80
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a68:	f107 0318 	add.w	r3, r7, #24
 8000a6c:	2254      	movs	r2, #84	; 0x54
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f006 f8ab 	bl	8006bcc <memset>
  if(hadc->Instance==ADC1)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a7e:	f040 8081 	bne.w	8000b84 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a88:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8e:	f107 0318 	add.w	r3, r7, #24
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 fc7a 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000a9e:	f7ff ffad 	bl	80009fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000aa2:	4b3a      	ldr	r3, [pc, #232]	; (8000b8c <HAL_ADC_MspInit+0x13c>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a39      	ldr	r2, [pc, #228]	; (8000b8c <HAL_ADC_MspInit+0x13c>)
 8000aa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b37      	ldr	r3, [pc, #220]	; (8000b8c <HAL_ADC_MspInit+0x13c>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <HAL_ADC_MspInit+0x13c>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a33      	ldr	r2, [pc, #204]	; (8000b8c <HAL_ADC_MspInit+0x13c>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <HAL_ADC_MspInit+0x13c>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <HAL_ADC_MspInit+0x13c>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a2d      	ldr	r2, [pc, #180]	; (8000b8c <HAL_ADC_MspInit+0x13c>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <HAL_ADC_MspInit+0x13c>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aea:	2303      	movs	r3, #3
 8000aec:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aee:	2303      	movs	r3, #3
 8000af0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000afa:	4619      	mov	r1, r3
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b00:	f002 fca4 	bl	800344c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8000b04:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b08:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b16:	4619      	mov	r1, r3
 8000b18:	481d      	ldr	r0, [pc, #116]	; (8000b90 <HAL_ADC_MspInit+0x140>)
 8000b1a:	f002 fc97 	bl	800344c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <HAL_ADC_MspInit+0x144>)
 8000b20:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <HAL_ADC_MspInit+0x148>)
 8000b22:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <HAL_ADC_MspInit+0x144>)
 8000b26:	2205      	movs	r2, #5
 8000b28:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <HAL_ADC_MspInit+0x144>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_ADC_MspInit+0x144>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_ADC_MspInit+0x144>)
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_ADC_MspInit+0x144>)
 8000b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b42:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <HAL_ADC_MspInit+0x144>)
 8000b46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b4a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_ADC_MspInit+0x144>)
 8000b4e:	2220      	movs	r2, #32
 8000b50:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_ADC_MspInit+0x144>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b58:	480e      	ldr	r0, [pc, #56]	; (8000b94 <HAL_ADC_MspInit+0x144>)
 8000b5a:	f002 fa05 	bl	8002f68 <HAL_DMA_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_ADC_MspInit+0x118>
    {
      Error_Handler();
 8000b64:	f7ff ff4a 	bl	80009fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_ADC_MspInit+0x144>)
 8000b6c:	655a      	str	r2, [r3, #84]	; 0x54
 8000b6e:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <HAL_ADC_MspInit+0x144>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	2012      	movs	r0, #18
 8000b7a:	f002 f9c0 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b7e:	2012      	movs	r0, #18
 8000b80:	f002 f9d7 	bl	8002f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b84:	bf00      	nop
 8000b86:	3780      	adds	r7, #128	; 0x80
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48000400 	.word	0x48000400
 8000b94:	20000094 	.word	0x20000094
 8000b98:	40020008 	.word	0x40020008

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09e      	sub	sp, #120	; 0x78
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	2254      	movs	r2, #84	; 0x54
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f006 f805 	bl	8006bcc <memset>
  if(huart->Instance==LPUART1)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <HAL_UART_MspInit+0xa8>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d136      	bne.n	8000c3a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fbd7 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be4:	f7ff ff0a 	bl	80009fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_UART_MspInit+0xac>)
 8000bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bec:	4a16      	ldr	r2, [pc, #88]	; (8000c48 <HAL_UART_MspInit+0xac>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_UART_MspInit+0xac>)
 8000bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_UART_MspInit+0xac>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c04:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <HAL_UART_MspInit+0xac>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_UART_MspInit+0xac>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c28:	230c      	movs	r3, #12
 8000c2a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c30:	4619      	mov	r1, r3
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f002 fc09 	bl	800344c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3778      	adds	r7, #120	; 0x78
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40008000 	.word	0x40008000
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d12f      	bne.n	8000cce <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_TIM_Base_MspInit+0x90>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <HAL_TIM_Base_MspInit+0x90>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_TIM_Base_MspInit+0x90>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_TIM_Base_MspInit+0x90>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <HAL_TIM_Base_MspInit+0x90>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_TIM_Base_MspInit+0x90>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <HAL_TIM_Base_MspInit+0x94>)
 8000cba:	f002 fbc7 	bl	800344c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	201d      	movs	r0, #29
 8000cc4:	f002 f91b 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cc8:	201d      	movs	r0, #29
 8000cca:	f002 f932 	bl	8002f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40000400 	.word	0x40000400
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	48000400 	.word	0x48000400

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d30:	f000 f8b6 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <DMA1_Channel1_IRQHandler+0x10>)
 8000d3e:	f002 fa36 	bl	80031ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000094 	.word	0x20000094

08000d4c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <ADC1_2_IRQHandler+0x10>)
 8000d52:	f000 fdb9 	bl	80018c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000028 	.word	0x20000028

08000d60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <TIM3_IRQHandler+0x10>)
 8000d66:	f003 ff9b 	bl	8004ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000188 	.word	0x20000188

08000d74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d7c:	f002 fd00 	bl	8003780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000daa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dac:	f7ff ffea 	bl	8000d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	; (8000de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <LoopForever+0xe>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	; (8000df4 <LoopForever+0x16>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f005 ff01 	bl	8006bdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dda:	f7ff fb9b 	bl	8000514 <main>

08000dde <LoopForever>:

LoopForever:
    b LoopForever
 8000dde:	e7fe      	b.n	8000dde <LoopForever>
  ldr   r0, =_estack
 8000de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dec:	08006c8c 	.word	0x08006c8c
  ldr r2, =_sbss
 8000df0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000df4:	20000228 	.word	0x20000228

08000df8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC3_IRQHandler>

08000dfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f002 f86f 	bl	8002ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f80e 	bl	8000e2c <HAL_InitTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	e001      	b.n	8000e20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e1c:	f7ff fdf4 	bl	8000a08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e20:	79fb      	ldrb	r3, [r7, #7]

}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <HAL_InitTick+0x68>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d022      	beq.n	8000e86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_InitTick+0x6c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_InitTick+0x68>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f002 f87a 	bl	8002f4e <HAL_SYSTICK_Config>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10f      	bne.n	8000e80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b0f      	cmp	r3, #15
 8000e64:	d809      	bhi.n	8000e7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e66:	2200      	movs	r2, #0
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e6e:	f002 f846 	bl	8002efe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <HAL_InitTick+0x70>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	e007      	b.n	8000e8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e004      	b.n	8000e8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e001      	b.n	8000e8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x1c>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <HAL_IncTick+0x1c>)
 8000eb0:	6013      	str	r3, [r2, #0]
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	20000224 	.word	0x20000224
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000224 	.word	0x20000224

08000edc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3360      	adds	r3, #96	; 0x60
 8000f56:	461a      	mov	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <LL_ADC_SetOffset+0x44>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	4313      	orrs	r3, r2
 8000f74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f7c:	bf00      	nop
 8000f7e:	371c      	adds	r7, #28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	03fff000 	.word	0x03fff000

08000f8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3360      	adds	r3, #96	; 0x60
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3360      	adds	r3, #96	; 0x60
 8000fc8:	461a      	mov	r2, r3
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fe2:	bf00      	nop
 8000fe4:	371c      	adds	r7, #28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b087      	sub	sp, #28
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3360      	adds	r3, #96	; 0x60
 8000ffe:	461a      	mov	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	431a      	orrs	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001018:	bf00      	nop
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3360      	adds	r3, #96	; 0x60
 8001034:	461a      	mov	r2, r3
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	431a      	orrs	r2, r3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800104e:	bf00      	nop
 8001050:	371c      	adds	r7, #28
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	615a      	str	r2, [r3, #20]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001090:	2b00      	cmp	r3, #0
 8001092:	d101      	bne.n	8001098 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001094:	2301      	movs	r3, #1
 8001096:	e000      	b.n	800109a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b087      	sub	sp, #28
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3330      	adds	r3, #48	; 0x30
 80010b6:	461a      	mov	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	4413      	add	r3, r2
 80010c4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	211f      	movs	r1, #31
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	401a      	ands	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	0e9b      	lsrs	r3, r3, #26
 80010de:	f003 011f 	and.w	r1, r3, #31
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	f003 031f 	and.w	r3, r3, #31
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	431a      	orrs	r2, r3
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010f2:	bf00      	nop
 80010f4:	371c      	adds	r7, #28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001124:	b480      	push	{r7}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3314      	adds	r3, #20
 8001134:	461a      	mov	r2, r3
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	0e5b      	lsrs	r3, r3, #25
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	4413      	add	r3, r2
 8001142:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	0d1b      	lsrs	r3, r3, #20
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	2107      	movs	r1, #7
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	401a      	ands	r2, r3
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	0d1b      	lsrs	r3, r3, #20
 800115e:	f003 031f 	and.w	r3, r3, #31
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	431a      	orrs	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800116e:	bf00      	nop
 8001170:	371c      	adds	r7, #28
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001194:	43db      	mvns	r3, r3
 8001196:	401a      	ands	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0318 	and.w	r3, r3, #24
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011a0:	40d9      	lsrs	r1, r3
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	400b      	ands	r3, r1
 80011a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011aa:	431a      	orrs	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	0007ffff 	.word	0x0007ffff

080011c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 031f 	and.w	r3, r3, #31
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800120c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6093      	str	r3, [r2, #8]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001234:	d101      	bne.n	800123a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800125c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001284:	d101      	bne.n	800128a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012d4:	f043 0202 	orr.w	r2, r3, #2
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <LL_ADC_IsEnabled+0x18>
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <LL_ADC_IsEnabled+0x1a>
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b02      	cmp	r3, #2
 8001320:	d101      	bne.n	8001326 <LL_ADC_IsDisableOngoing+0x18>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <LL_ADC_IsDisableOngoing+0x1a>
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001344:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001348:	f043 0204 	orr.w	r2, r3, #4
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b04      	cmp	r3, #4
 800136e:	d101      	bne.n	8001374 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b08      	cmp	r3, #8
 8001394:	d101      	bne.n	800139a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e1a9      	b.n	8001716 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d109      	bne.n	80013e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff fb3d 	bl	8000a50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff19 	bl	8001220 <LL_ADC_IsDeepPowerDownEnabled>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff feff 	bl	80011fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff34 	bl	8001270 <LL_ADC_IsInternalRegulatorEnabled>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d115      	bne.n	800143a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff18 	bl	8001248 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001418:	4b9c      	ldr	r3, [pc, #624]	; (800168c <HAL_ADC_Init+0x2e4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	099b      	lsrs	r3, r3, #6
 800141e:	4a9c      	ldr	r2, [pc, #624]	; (8001690 <HAL_ADC_Init+0x2e8>)
 8001420:	fba2 2303 	umull	r2, r3, r2, r3
 8001424:	099b      	lsrs	r3, r3, #6
 8001426:	3301      	adds	r3, #1
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800142c:	e002      	b.n	8001434 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3b01      	subs	r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f9      	bne.n	800142e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff16 	bl	8001270 <LL_ADC_IsInternalRegulatorEnabled>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10d      	bne.n	8001466 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144e:	f043 0210 	orr.w	r2, r3, #16
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145a:	f043 0201 	orr.w	r2, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff76 	bl	800135c <LL_ADC_REG_IsConversionOngoing>
 8001470:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 8142 	bne.w	8001704 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f040 813e 	bne.w	8001704 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001490:	f043 0202 	orr.w	r2, r3, #2
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff23 	bl	80012e8 <LL_ADC_IsEnabled>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d141      	bne.n	800152c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014b0:	d004      	beq.n	80014bc <HAL_ADC_Init+0x114>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a77      	ldr	r2, [pc, #476]	; (8001694 <HAL_ADC_Init+0x2ec>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d10f      	bne.n	80014dc <HAL_ADC_Init+0x134>
 80014bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80014c0:	f7ff ff12 	bl	80012e8 <LL_ADC_IsEnabled>
 80014c4:	4604      	mov	r4, r0
 80014c6:	4873      	ldr	r0, [pc, #460]	; (8001694 <HAL_ADC_Init+0x2ec>)
 80014c8:	f7ff ff0e 	bl	80012e8 <LL_ADC_IsEnabled>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4323      	orrs	r3, r4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf0c      	ite	eq
 80014d4:	2301      	moveq	r3, #1
 80014d6:	2300      	movne	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	e012      	b.n	8001502 <HAL_ADC_Init+0x15a>
 80014dc:	486e      	ldr	r0, [pc, #440]	; (8001698 <HAL_ADC_Init+0x2f0>)
 80014de:	f7ff ff03 	bl	80012e8 <LL_ADC_IsEnabled>
 80014e2:	4604      	mov	r4, r0
 80014e4:	486d      	ldr	r0, [pc, #436]	; (800169c <HAL_ADC_Init+0x2f4>)
 80014e6:	f7ff feff 	bl	80012e8 <LL_ADC_IsEnabled>
 80014ea:	4603      	mov	r3, r0
 80014ec:	431c      	orrs	r4, r3
 80014ee:	486c      	ldr	r0, [pc, #432]	; (80016a0 <HAL_ADC_Init+0x2f8>)
 80014f0:	f7ff fefa 	bl	80012e8 <LL_ADC_IsEnabled>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4323      	orrs	r3, r4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	bf0c      	ite	eq
 80014fc:	2301      	moveq	r3, #1
 80014fe:	2300      	movne	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d012      	beq.n	800152c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800150e:	d004      	beq.n	800151a <HAL_ADC_Init+0x172>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a5f      	ldr	r2, [pc, #380]	; (8001694 <HAL_ADC_Init+0x2ec>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_ADC_Init+0x176>
 800151a:	4a62      	ldr	r2, [pc, #392]	; (80016a4 <HAL_ADC_Init+0x2fc>)
 800151c:	e000      	b.n	8001520 <HAL_ADC_Init+0x178>
 800151e:	4a62      	ldr	r2, [pc, #392]	; (80016a8 <HAL_ADC_Init+0x300>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4619      	mov	r1, r3
 8001526:	4610      	mov	r0, r2
 8001528:	f7ff fcd8 	bl	8000edc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7f5b      	ldrb	r3, [r3, #29]
 8001530:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001536:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800153c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001542:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800154a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001556:	2b01      	cmp	r3, #1
 8001558:	d106      	bne.n	8001568 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	3b01      	subs	r3, #1
 8001560:	045b      	lsls	r3, r3, #17
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d009      	beq.n	8001584 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	4b48      	ldr	r3, [pc, #288]	; (80016ac <HAL_ADC_Init+0x304>)
 800158c:	4013      	ands	r3, r2
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	69b9      	ldr	r1, [r7, #24]
 8001594:	430b      	orrs	r3, r1
 8001596:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fee5 	bl	8001382 <LL_ADC_INJ_IsConversionOngoing>
 80015b8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d17f      	bne.n	80016c0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d17c      	bne.n	80016c0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015ca:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015d2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015e2:	f023 0302 	bic.w	r3, r3, #2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	69b9      	ldr	r1, [r7, #24]
 80015ec:	430b      	orrs	r3, r1
 80015ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d017      	beq.n	8001628 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001606:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001610:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001614:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6911      	ldr	r1, [r2, #16]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	430b      	orrs	r3, r1
 8001622:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001626:	e013      	b.n	8001650 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001636:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001648:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800164c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001656:	2b01      	cmp	r3, #1
 8001658:	d12a      	bne.n	80016b0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001670:	4311      	orrs	r1, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001676:	4311      	orrs	r1, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800167c:	430a      	orrs	r2, r1
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0201 	orr.w	r2, r2, #1
 8001688:	611a      	str	r2, [r3, #16]
 800168a:	e019      	b.n	80016c0 <HAL_ADC_Init+0x318>
 800168c:	20000000 	.word	0x20000000
 8001690:	053e2d63 	.word	0x053e2d63
 8001694:	50000100 	.word	0x50000100
 8001698:	50000400 	.word	0x50000400
 800169c:	50000500 	.word	0x50000500
 80016a0:	50000600 	.word	0x50000600
 80016a4:	50000300 	.word	0x50000300
 80016a8:	50000700 	.word	0x50000700
 80016ac:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691a      	ldr	r2, [r3, #16]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d10c      	bne.n	80016e2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f023 010f 	bic.w	r1, r3, #15
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	1e5a      	subs	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	631a      	str	r2, [r3, #48]	; 0x30
 80016e0:	e007      	b.n	80016f2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 020f 	bic.w	r2, r2, #15
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f6:	f023 0303 	bic.w	r3, r3, #3
 80016fa:	f043 0201 	orr.w	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	65da      	str	r2, [r3, #92]	; 0x5c
 8001702:	e007      	b.n	8001714 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	f043 0210 	orr.w	r2, r3, #16
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001714:	7ffb      	ldrb	r3, [r7, #31]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd90      	pop	{r4, r7, pc}
 800171e:	bf00      	nop

08001720 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001734:	d004      	beq.n	8001740 <HAL_ADC_Start_DMA+0x20>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a5a      	ldr	r2, [pc, #360]	; (80018a4 <HAL_ADC_Start_DMA+0x184>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d101      	bne.n	8001744 <HAL_ADC_Start_DMA+0x24>
 8001740:	4b59      	ldr	r3, [pc, #356]	; (80018a8 <HAL_ADC_Start_DMA+0x188>)
 8001742:	e000      	b.n	8001746 <HAL_ADC_Start_DMA+0x26>
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_ADC_Start_DMA+0x18c>)
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fd3c 	bl	80011c4 <LL_ADC_GetMultimode>
 800174c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fe02 	bl	800135c <LL_ADC_REG_IsConversionOngoing>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 809b 	bne.w	8001896 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_ADC_Start_DMA+0x4e>
 800176a:	2302      	movs	r3, #2
 800176c:	e096      	b.n	800189c <HAL_ADC_Start_DMA+0x17c>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a4d      	ldr	r2, [pc, #308]	; (80018b0 <HAL_ADC_Start_DMA+0x190>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d008      	beq.n	8001792 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b05      	cmp	r3, #5
 800178a:	d002      	beq.n	8001792 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	2b09      	cmp	r3, #9
 8001790:	d17a      	bne.n	8001888 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 ff60 	bl	8002658 <ADC_Enable>
 8001798:	4603      	mov	r3, r0
 800179a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d16d      	bne.n	800187e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a3a      	ldr	r2, [pc, #232]	; (80018a4 <HAL_ADC_Start_DMA+0x184>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d009      	beq.n	80017d4 <HAL_ADC_Start_DMA+0xb4>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a3b      	ldr	r2, [pc, #236]	; (80018b4 <HAL_ADC_Start_DMA+0x194>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d002      	beq.n	80017d0 <HAL_ADC_Start_DMA+0xb0>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	e003      	b.n	80017d8 <HAL_ADC_Start_DMA+0xb8>
 80017d0:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <HAL_ADC_Start_DMA+0x198>)
 80017d2:	e001      	b.n	80017d8 <HAL_ADC_Start_DMA+0xb8>
 80017d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	4293      	cmp	r3, r2
 80017de:	d002      	beq.n	80017e6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d105      	bne.n	80017f2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	f023 0206 	bic.w	r2, r3, #6
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	661a      	str	r2, [r3, #96]	; 0x60
 800180a:	e002      	b.n	8001812 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001816:	4a29      	ldr	r2, [pc, #164]	; (80018bc <HAL_ADC_Start_DMA+0x19c>)
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181e:	4a28      	ldr	r2, [pc, #160]	; (80018c0 <HAL_ADC_Start_DMA+0x1a0>)
 8001820:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001826:	4a27      	ldr	r2, [pc, #156]	; (80018c4 <HAL_ADC_Start_DMA+0x1a4>)
 8001828:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	221c      	movs	r2, #28
 8001830:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0210 	orr.w	r2, r2, #16
 8001848:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0201 	orr.w	r2, r2, #1
 8001858:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3340      	adds	r3, #64	; 0x40
 8001864:	4619      	mov	r1, r3
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f001 fc25 	bl	80030b8 <HAL_DMA_Start_IT>
 800186e:	4603      	mov	r3, r0
 8001870:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fd5c 	bl	8001334 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800187c:	e00d      	b.n	800189a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001886:	e008      	b.n	800189a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001894:	e001      	b.n	800189a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001896:	2302      	movs	r3, #2
 8001898:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800189a:	7dfb      	ldrb	r3, [r7, #23]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	50000100 	.word	0x50000100
 80018a8:	50000300 	.word	0x50000300
 80018ac:	50000700 	.word	0x50000700
 80018b0:	50000600 	.word	0x50000600
 80018b4:	50000500 	.word	0x50000500
 80018b8:	50000400 	.word	0x50000400
 80018bc:	08002843 	.word	0x08002843
 80018c0:	0800291b 	.word	0x0800291b
 80018c4:	08002937 	.word	0x08002937

080018c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ec:	d004      	beq.n	80018f8 <HAL_ADC_IRQHandler+0x30>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a8e      	ldr	r2, [pc, #568]	; (8001b2c <HAL_ADC_IRQHandler+0x264>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_IRQHandler+0x34>
 80018f8:	4b8d      	ldr	r3, [pc, #564]	; (8001b30 <HAL_ADC_IRQHandler+0x268>)
 80018fa:	e000      	b.n	80018fe <HAL_ADC_IRQHandler+0x36>
 80018fc:	4b8d      	ldr	r3, [pc, #564]	; (8001b34 <HAL_ADC_IRQHandler+0x26c>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fc60 	bl	80011c4 <LL_ADC_GetMultimode>
 8001904:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d017      	beq.n	8001940 <HAL_ADC_IRQHandler+0x78>
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d012      	beq.n	8001940 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	2b00      	cmp	r3, #0
 8001924:	d105      	bne.n	8001932 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f001 f8f6 	bl	8002b24 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2202      	movs	r2, #2
 800193e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <HAL_ADC_IRQHandler+0x8c>
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10b      	bne.n	800196c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 8094 	beq.w	8001a88 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 808e 	beq.w	8001a88 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d105      	bne.n	8001984 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fb79 	bl	8001080 <LL_ADC_REG_IsTriggerSourceSWStart>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d072      	beq.n	8001a7a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a64      	ldr	r2, [pc, #400]	; (8001b2c <HAL_ADC_IRQHandler+0x264>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d009      	beq.n	80019b2 <HAL_ADC_IRQHandler+0xea>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a65      	ldr	r2, [pc, #404]	; (8001b38 <HAL_ADC_IRQHandler+0x270>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d002      	beq.n	80019ae <HAL_ADC_IRQHandler+0xe6>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	e003      	b.n	80019b6 <HAL_ADC_IRQHandler+0xee>
 80019ae:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_ADC_IRQHandler+0x274>)
 80019b0:	e001      	b.n	80019b6 <HAL_ADC_IRQHandler+0xee>
 80019b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d008      	beq.n	80019d0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	d002      	beq.n	80019d0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b09      	cmp	r3, #9
 80019ce:	d104      	bne.n	80019da <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	623b      	str	r3, [r7, #32]
 80019d8:	e014      	b.n	8001a04 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a53      	ldr	r2, [pc, #332]	; (8001b2c <HAL_ADC_IRQHandler+0x264>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d009      	beq.n	80019f8 <HAL_ADC_IRQHandler+0x130>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a53      	ldr	r2, [pc, #332]	; (8001b38 <HAL_ADC_IRQHandler+0x270>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d002      	beq.n	80019f4 <HAL_ADC_IRQHandler+0x12c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	e003      	b.n	80019fc <HAL_ADC_IRQHandler+0x134>
 80019f4:	4b51      	ldr	r3, [pc, #324]	; (8001b3c <HAL_ADC_IRQHandler+0x274>)
 80019f6:	e001      	b.n	80019fc <HAL_ADC_IRQHandler+0x134>
 80019f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019fc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d135      	bne.n	8001a7a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d12e      	bne.n	8001a7a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fc9b 	bl	800135c <LL_ADC_REG_IsConversionOngoing>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d11a      	bne.n	8001a62 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 020c 	bic.w	r2, r2, #12
 8001a3a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d112      	bne.n	8001a7a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a60:	e00b      	b.n	8001a7a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	f043 0210 	orr.w	r2, r3, #16
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a72:	f043 0201 	orr.w	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f984 	bl	8001d88 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	220c      	movs	r2, #12
 8001a86:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0320 	and.w	r3, r3, #32
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d004      	beq.n	8001a9c <HAL_ADC_IRQHandler+0x1d4>
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f003 0320 	and.w	r3, r3, #32
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10b      	bne.n	8001ab4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80b3 	beq.w	8001c0e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80ad 	beq.w	8001c0e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fb14 	bl	80010fe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001ad6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff facf 	bl	8001080 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ae2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a10      	ldr	r2, [pc, #64]	; (8001b2c <HAL_ADC_IRQHandler+0x264>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <HAL_ADC_IRQHandler+0x23a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a11      	ldr	r2, [pc, #68]	; (8001b38 <HAL_ADC_IRQHandler+0x270>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d002      	beq.n	8001afe <HAL_ADC_IRQHandler+0x236>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	e003      	b.n	8001b06 <HAL_ADC_IRQHandler+0x23e>
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_ADC_IRQHandler+0x274>)
 8001b00:	e001      	b.n	8001b06 <HAL_ADC_IRQHandler+0x23e>
 8001b02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d008      	beq.n	8001b20 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d002      	beq.n	8001b20 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b07      	cmp	r3, #7
 8001b1e:	d10f      	bne.n	8001b40 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	e01f      	b.n	8001b6a <HAL_ADC_IRQHandler+0x2a2>
 8001b2a:	bf00      	nop
 8001b2c:	50000100 	.word	0x50000100
 8001b30:	50000300 	.word	0x50000300
 8001b34:	50000700 	.word	0x50000700
 8001b38:	50000500 	.word	0x50000500
 8001b3c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a8b      	ldr	r2, [pc, #556]	; (8001d74 <HAL_ADC_IRQHandler+0x4ac>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d009      	beq.n	8001b5e <HAL_ADC_IRQHandler+0x296>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a8a      	ldr	r2, [pc, #552]	; (8001d78 <HAL_ADC_IRQHandler+0x4b0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d002      	beq.n	8001b5a <HAL_ADC_IRQHandler+0x292>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	e003      	b.n	8001b62 <HAL_ADC_IRQHandler+0x29a>
 8001b5a:	4b88      	ldr	r3, [pc, #544]	; (8001d7c <HAL_ADC_IRQHandler+0x4b4>)
 8001b5c:	e001      	b.n	8001b62 <HAL_ADC_IRQHandler+0x29a>
 8001b5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b62:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d047      	beq.n	8001c00 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_ADC_IRQHandler+0x2c2>
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d03f      	beq.n	8001c00 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d13a      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b94:	2b40      	cmp	r3, #64	; 0x40
 8001b96:	d133      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d12e      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fbeb 	bl	8001382 <LL_ADC_INJ_IsConversionOngoing>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d11a      	bne.n	8001be8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bc0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d112      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bde:	f043 0201 	orr.w	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001be6:	e00b      	b.n	8001c00 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bec:	f043 0210 	orr.w	r2, r3, #16
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf8:	f043 0201 	orr.w	r2, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 ff67 	bl	8002ad4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2260      	movs	r2, #96	; 0x60
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d011      	beq.n	8001c3c <HAL_ADC_IRQHandler+0x374>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00c      	beq.n	8001c3c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8be 	bl	8001db0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d012      	beq.n	8001c6c <HAL_ADC_IRQHandler+0x3a4>
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00d      	beq.n	8001c6c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 ff4d 	bl	8002afc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d012      	beq.n	8001c9c <HAL_ADC_IRQHandler+0x3d4>
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00d      	beq.n	8001c9c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 ff3f 	bl	8002b10 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d043      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x466>
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d03e      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbc:	e021      	b.n	8001d02 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d015      	beq.n	8001cf0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ccc:	d004      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x410>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a28      	ldr	r2, [pc, #160]	; (8001d74 <HAL_ADC_IRQHandler+0x4ac>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_IRQHandler+0x414>
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <HAL_ADC_IRQHandler+0x4b8>)
 8001cda:	e000      	b.n	8001cde <HAL_ADC_IRQHandler+0x416>
 8001cdc:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <HAL_ADC_IRQHandler+0x4bc>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fa7e 	bl	80011e0 <LL_ADC_GetMultiDMATransfer>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001cea:	2301      	movs	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	e008      	b.n	8001d02 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d10e      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d18:	f043 0202 	orr.w	r2, r3, #2
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f84f 	bl	8001dc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d018      	beq.n	8001d6a <HAL_ADC_IRQHandler+0x4a2>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d013      	beq.n	8001d6a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d52:	f043 0208 	orr.w	r2, r3, #8
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d62:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 febf 	bl	8002ae8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	50000100 	.word	0x50000100
 8001d78:	50000500 	.word	0x50000500
 8001d7c:	50000400 	.word	0x50000400
 8001d80:	50000300 	.word	0x50000300
 8001d84:	50000700 	.word	0x50000700

08001d88 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0b6      	sub	sp, #216	; 0xd8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d102      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x24>
 8001df6:	2302      	movs	r3, #2
 8001df8:	f000 bc13 	b.w	8002622 <HAL_ADC_ConfigChannel+0x84a>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff faa7 	bl	800135c <LL_ADC_REG_IsConversionOngoing>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f040 83f3 	bne.w	80025fc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6859      	ldr	r1, [r3, #4]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	f7ff f93f 	bl	80010a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fa95 	bl	800135c <LL_ADC_REG_IsConversionOngoing>
 8001e32:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff faa1 	bl	8001382 <LL_ADC_INJ_IsConversionOngoing>
 8001e40:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f040 81d9 	bne.w	8002200 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 81d4 	bne.w	8002200 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e60:	d10f      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f7ff f959 	bl	8001124 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f8ed 	bl	800105a <LL_ADC_SetSamplingTimeCommonConfig>
 8001e80:	e00e      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6819      	ldr	r1, [r3, #0]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	f7ff f948 	bl	8001124 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff f8dd 	bl	800105a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	08db      	lsrs	r3, r3, #3
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d022      	beq.n	8001f08 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	6919      	ldr	r1, [r3, #16]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ed2:	f7ff f837 	bl	8000f44 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	6919      	ldr	r1, [r3, #16]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f7ff f883 	bl	8000fee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d102      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x126>
 8001ef8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001efc:	e000      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x128>
 8001efe:	2300      	movs	r3, #0
 8001f00:	461a      	mov	r2, r3
 8001f02:	f7ff f88f 	bl	8001024 <LL_ADC_SetOffsetSaturation>
 8001f06:	e17b      	b.n	8002200 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f83c 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10a      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x15c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff f831 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	0e9b      	lsrs	r3, r3, #26
 8001f2e:	f003 021f 	and.w	r2, r3, #31
 8001f32:	e01e      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x19a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff f826 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001f62:	2320      	movs	r3, #32
 8001f64:	e004      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001f66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d105      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x1b2>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	0e9b      	lsrs	r3, r3, #26
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	e018      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x1e4>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001fa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001fae:	2320      	movs	r3, #32
 8001fb0:	e004      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d106      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fff5 	bl	8000fb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe ffd9 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10a      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x222>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2101      	movs	r1, #1
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe ffce 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	0e9b      	lsrs	r3, r3, #26
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	e01e      	b.n	8002038 <HAL_ADC_ConfigChannel+0x260>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2101      	movs	r1, #1
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe ffc3 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002018:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800201c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002020:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002028:	2320      	movs	r3, #32
 800202a:	e004      	b.n	8002036 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800202c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002040:	2b00      	cmp	r3, #0
 8002042:	d105      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x278>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0e9b      	lsrs	r3, r3, #26
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	e018      	b.n	8002082 <HAL_ADC_ConfigChannel+0x2aa>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002064:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800206c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002074:	2320      	movs	r3, #32
 8002076:	e004      	b.n	8002082 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002082:	429a      	cmp	r2, r3
 8002084:	d106      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2200      	movs	r2, #0
 800208c:	2101      	movs	r1, #1
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe ff92 	bl	8000fb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2102      	movs	r1, #2
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe ff76 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10a      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x2e8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2102      	movs	r1, #2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe ff6b 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	0e9b      	lsrs	r3, r3, #26
 80020ba:	f003 021f 	and.w	r2, r3, #31
 80020be:	e01e      	b.n	80020fe <HAL_ADC_ConfigChannel+0x326>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2102      	movs	r1, #2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe ff60 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80020de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80020e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80020ee:	2320      	movs	r3, #32
 80020f0:	e004      	b.n	80020fc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80020f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002106:	2b00      	cmp	r3, #0
 8002108:	d105      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x33e>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	0e9b      	lsrs	r3, r3, #26
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	e016      	b.n	8002144 <HAL_ADC_ConfigChannel+0x36c>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002128:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800212a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800212e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002136:	2320      	movs	r3, #32
 8002138:	e004      	b.n	8002144 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800213a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002144:	429a      	cmp	r2, r3
 8002146:	d106      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2200      	movs	r2, #0
 800214e:	2102      	movs	r1, #2
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe ff31 	bl	8000fb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2103      	movs	r1, #3
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe ff15 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10a      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x3aa>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2103      	movs	r1, #3
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe ff0a 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 8002178:	4603      	mov	r3, r0
 800217a:	0e9b      	lsrs	r3, r3, #26
 800217c:	f003 021f 	and.w	r2, r3, #31
 8002180:	e017      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x3da>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2103      	movs	r1, #3
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe feff 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 800218e:	4603      	mov	r3, r0
 8002190:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800219a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800219c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800219e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80021a4:	2320      	movs	r3, #32
 80021a6:	e003      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80021a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d105      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x3f2>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	e011      	b.n	80021ee <HAL_ADC_ConfigChannel+0x416>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80021dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80021e2:	2320      	movs	r3, #32
 80021e4:	e003      	b.n	80021ee <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80021e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d106      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2200      	movs	r2, #0
 80021f8:	2103      	movs	r1, #3
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe fedc 	bl	8000fb8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff f86f 	bl	80012e8 <LL_ADC_IsEnabled>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	f040 813d 	bne.w	800248c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6819      	ldr	r1, [r3, #0]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	461a      	mov	r2, r3
 8002220:	f7fe ffac 	bl	800117c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4aa2      	ldr	r2, [pc, #648]	; (80024b4 <HAL_ADC_ConfigChannel+0x6dc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	f040 812e 	bne.w	800248c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10b      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x480>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0e9b      	lsrs	r3, r3, #26
 8002246:	3301      	adds	r3, #1
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	2b09      	cmp	r3, #9
 800224e:	bf94      	ite	ls
 8002250:	2301      	movls	r3, #1
 8002252:	2300      	movhi	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	e019      	b.n	800228c <HAL_ADC_ConfigChannel+0x4b4>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002268:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800226a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2b09      	cmp	r3, #9
 8002284:	bf94      	ite	ls
 8002286:	2301      	movls	r3, #1
 8002288:	2300      	movhi	r3, #0
 800228a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800228c:	2b00      	cmp	r3, #0
 800228e:	d079      	beq.n	8002384 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002298:	2b00      	cmp	r3, #0
 800229a:	d107      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x4d4>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0e9b      	lsrs	r3, r3, #26
 80022a2:	3301      	adds	r3, #1
 80022a4:	069b      	lsls	r3, r3, #26
 80022a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022aa:	e015      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x500>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80022be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e003      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80022c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	069b      	lsls	r3, r3, #26
 80022d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x520>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	3301      	adds	r3, #1
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	2101      	movs	r1, #1
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	e017      	b.n	8002328 <HAL_ADC_ConfigChannel+0x550>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002308:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800230a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002310:	2320      	movs	r3, #32
 8002312:	e003      	b.n	800231c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	3301      	adds	r3, #1
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2101      	movs	r1, #1
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	ea42 0103 	orr.w	r1, r2, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10a      	bne.n	800234e <HAL_ADC_ConfigChannel+0x576>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0e9b      	lsrs	r3, r3, #26
 800233e:	3301      	adds	r3, #1
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	051b      	lsls	r3, r3, #20
 800234c:	e018      	b.n	8002380 <HAL_ADC_ConfigChannel+0x5a8>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800235c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002366:	2320      	movs	r3, #32
 8002368:	e003      	b.n	8002372 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800236a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	3301      	adds	r3, #1
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002380:	430b      	orrs	r3, r1
 8002382:	e07e      	b.n	8002482 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x5c8>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	3301      	adds	r3, #1
 8002398:	069b      	lsls	r3, r3, #26
 800239a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239e:	e015      	b.n	80023cc <HAL_ADC_ConfigChannel+0x5f4>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80023b8:	2320      	movs	r3, #32
 80023ba:	e003      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80023bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	3301      	adds	r3, #1
 80023c6:	069b      	lsls	r3, r3, #26
 80023c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x614>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	e017      	b.n	800241c <HAL_ADC_ConfigChannel+0x644>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	61fb      	str	r3, [r7, #28]
  return result;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002404:	2320      	movs	r3, #32
 8002406:	e003      	b.n	8002410 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3301      	adds	r3, #1
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	2101      	movs	r1, #1
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	ea42 0103 	orr.w	r1, r2, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10d      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x670>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0e9b      	lsrs	r3, r3, #26
 8002432:	3301      	adds	r3, #1
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	3b1e      	subs	r3, #30
 8002440:	051b      	lsls	r3, r3, #20
 8002442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002446:	e01b      	b.n	8002480 <HAL_ADC_ConfigChannel+0x6a8>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	613b      	str	r3, [r7, #16]
  return result;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002460:	2320      	movs	r3, #32
 8002462:	e003      	b.n	800246c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	3301      	adds	r3, #1
 800246e:	f003 021f 	and.w	r2, r3, #31
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	3b1e      	subs	r3, #30
 800247a:	051b      	lsls	r3, r3, #20
 800247c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002480:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002486:	4619      	mov	r1, r3
 8002488:	f7fe fe4c 	bl	8001124 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_ADC_ConfigChannel+0x6e0>)
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80be 	beq.w	8002616 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a2:	d004      	beq.n	80024ae <HAL_ADC_ConfigChannel+0x6d6>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a04      	ldr	r2, [pc, #16]	; (80024bc <HAL_ADC_ConfigChannel+0x6e4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d10a      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x6ec>
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <HAL_ADC_ConfigChannel+0x6e8>)
 80024b0:	e009      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x6ee>
 80024b2:	bf00      	nop
 80024b4:	407f0000 	.word	0x407f0000
 80024b8:	80080000 	.word	0x80080000
 80024bc:	50000100 	.word	0x50000100
 80024c0:	50000300 	.word	0x50000300
 80024c4:	4b59      	ldr	r3, [pc, #356]	; (800262c <HAL_ADC_ConfigChannel+0x854>)
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fd2e 	bl	8000f28 <LL_ADC_GetCommonPathInternalCh>
 80024cc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a56      	ldr	r2, [pc, #344]	; (8002630 <HAL_ADC_ConfigChannel+0x858>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d004      	beq.n	80024e4 <HAL_ADC_ConfigChannel+0x70c>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a55      	ldr	r2, [pc, #340]	; (8002634 <HAL_ADC_ConfigChannel+0x85c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d13a      	bne.n	800255a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d134      	bne.n	800255a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024f8:	d005      	beq.n	8002506 <HAL_ADC_ConfigChannel+0x72e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a4e      	ldr	r2, [pc, #312]	; (8002638 <HAL_ADC_ConfigChannel+0x860>)
 8002500:	4293      	cmp	r3, r2
 8002502:	f040 8085 	bne.w	8002610 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800250e:	d004      	beq.n	800251a <HAL_ADC_ConfigChannel+0x742>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a49      	ldr	r2, [pc, #292]	; (800263c <HAL_ADC_ConfigChannel+0x864>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x746>
 800251a:	4a49      	ldr	r2, [pc, #292]	; (8002640 <HAL_ADC_ConfigChannel+0x868>)
 800251c:	e000      	b.n	8002520 <HAL_ADC_ConfigChannel+0x748>
 800251e:	4a43      	ldr	r2, [pc, #268]	; (800262c <HAL_ADC_ConfigChannel+0x854>)
 8002520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002524:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f7fe fce9 	bl	8000f02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002530:	4b44      	ldr	r3, [pc, #272]	; (8002644 <HAL_ADC_ConfigChannel+0x86c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	099b      	lsrs	r3, r3, #6
 8002536:	4a44      	ldr	r2, [pc, #272]	; (8002648 <HAL_ADC_ConfigChannel+0x870>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800254a:	e002      	b.n	8002552 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	3b01      	subs	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f9      	bne.n	800254c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002558:	e05a      	b.n	8002610 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a3b      	ldr	r2, [pc, #236]	; (800264c <HAL_ADC_ConfigChannel+0x874>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d125      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d11f      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a31      	ldr	r2, [pc, #196]	; (800263c <HAL_ADC_ConfigChannel+0x864>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d104      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x7ac>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a34      	ldr	r2, [pc, #208]	; (8002650 <HAL_ADC_ConfigChannel+0x878>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d047      	beq.n	8002614 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258c:	d004      	beq.n	8002598 <HAL_ADC_ConfigChannel+0x7c0>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2a      	ldr	r2, [pc, #168]	; (800263c <HAL_ADC_ConfigChannel+0x864>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x7c4>
 8002598:	4a29      	ldr	r2, [pc, #164]	; (8002640 <HAL_ADC_ConfigChannel+0x868>)
 800259a:	e000      	b.n	800259e <HAL_ADC_ConfigChannel+0x7c6>
 800259c:	4a23      	ldr	r2, [pc, #140]	; (800262c <HAL_ADC_ConfigChannel+0x854>)
 800259e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a6:	4619      	mov	r1, r3
 80025a8:	4610      	mov	r0, r2
 80025aa:	f7fe fcaa 	bl	8000f02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025ae:	e031      	b.n	8002614 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a27      	ldr	r2, [pc, #156]	; (8002654 <HAL_ADC_ConfigChannel+0x87c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d12d      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d127      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1c      	ldr	r2, [pc, #112]	; (800263c <HAL_ADC_ConfigChannel+0x864>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d022      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025d8:	d004      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0x80c>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a17      	ldr	r2, [pc, #92]	; (800263c <HAL_ADC_ConfigChannel+0x864>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x810>
 80025e4:	4a16      	ldr	r2, [pc, #88]	; (8002640 <HAL_ADC_ConfigChannel+0x868>)
 80025e6:	e000      	b.n	80025ea <HAL_ADC_ConfigChannel+0x812>
 80025e8:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_ADC_ConfigChannel+0x854>)
 80025ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025f2:	4619      	mov	r1, r3
 80025f4:	4610      	mov	r0, r2
 80025f6:	f7fe fc84 	bl	8000f02 <LL_ADC_SetCommonPathInternalCh>
 80025fa:	e00c      	b.n	8002616 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	f043 0220 	orr.w	r2, r3, #32
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800260e:	e002      	b.n	8002616 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002610:	bf00      	nop
 8002612:	e000      	b.n	8002616 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002614:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800261e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002622:	4618      	mov	r0, r3
 8002624:	37d8      	adds	r7, #216	; 0xd8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	50000700 	.word	0x50000700
 8002630:	c3210000 	.word	0xc3210000
 8002634:	90c00010 	.word	0x90c00010
 8002638:	50000600 	.word	0x50000600
 800263c:	50000100 	.word	0x50000100
 8002640:	50000300 	.word	0x50000300
 8002644:	20000000 	.word	0x20000000
 8002648:	053e2d63 	.word	0x053e2d63
 800264c:	c7520000 	.word	0xc7520000
 8002650:	50000500 	.word	0x50000500
 8002654:	cb840000 	.word	0xcb840000

08002658 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fe3d 	bl	80012e8 <LL_ADC_IsEnabled>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d176      	bne.n	8002762 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	4b3c      	ldr	r3, [pc, #240]	; (800276c <ADC_Enable+0x114>)
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00d      	beq.n	800269e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	f043 0210 	orr.w	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e062      	b.n	8002764 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fdf8 	bl	8001298 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026b0:	d004      	beq.n	80026bc <ADC_Enable+0x64>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a2e      	ldr	r2, [pc, #184]	; (8002770 <ADC_Enable+0x118>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d101      	bne.n	80026c0 <ADC_Enable+0x68>
 80026bc:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <ADC_Enable+0x11c>)
 80026be:	e000      	b.n	80026c2 <ADC_Enable+0x6a>
 80026c0:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <ADC_Enable+0x120>)
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fc30 	bl	8000f28 <LL_ADC_GetCommonPathInternalCh>
 80026c8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80026ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d013      	beq.n	80026fa <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026d2:	4b2a      	ldr	r3, [pc, #168]	; (800277c <ADC_Enable+0x124>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	099b      	lsrs	r3, r3, #6
 80026d8:	4a29      	ldr	r2, [pc, #164]	; (8002780 <ADC_Enable+0x128>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	099b      	lsrs	r3, r3, #6
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026ec:	e002      	b.n	80026f4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f9      	bne.n	80026ee <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026fa:	f7fe fbe3 	bl	8000ec4 <HAL_GetTick>
 80026fe:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002700:	e028      	b.n	8002754 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fdee 	bl	80012e8 <LL_ADC_IsEnabled>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d104      	bne.n	800271c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fdbe 	bl	8001298 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800271c:	f7fe fbd2 	bl	8000ec4 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d914      	bls.n	8002754 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d00d      	beq.n	8002754 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	f043 0210 	orr.w	r2, r3, #16
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e007      	b.n	8002764 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d1cf      	bne.n	8002702 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	8000003f 	.word	0x8000003f
 8002770:	50000100 	.word	0x50000100
 8002774:	50000300 	.word	0x50000300
 8002778:	50000700 	.word	0x50000700
 800277c:	20000000 	.word	0x20000000
 8002780:	053e2d63 	.word	0x053e2d63

08002784 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe fdbc 	bl	800130e <LL_ADC_IsDisableOngoing>
 8002796:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fda3 	bl	80012e8 <LL_ADC_IsEnabled>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d047      	beq.n	8002838 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d144      	bne.n	8002838 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030d 	and.w	r3, r3, #13
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d10c      	bne.n	80027d6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fd7d 	bl	80012c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2203      	movs	r2, #3
 80027cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027ce:	f7fe fb79 	bl	8000ec4 <HAL_GetTick>
 80027d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027d4:	e029      	b.n	800282a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027da:	f043 0210 	orr.w	r2, r3, #16
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e6:	f043 0201 	orr.w	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e023      	b.n	800283a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027f2:	f7fe fb67 	bl	8000ec4 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d914      	bls.n	800282a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00d      	beq.n	800282a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e007      	b.n	800283a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1dc      	bne.n	80027f2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002858:	2b00      	cmp	r3, #0
 800285a:	d14b      	bne.n	80028f4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d021      	beq.n	80028ba <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fc00 	bl	8001080 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d032      	beq.n	80028ec <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d12b      	bne.n	80028ec <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d11f      	bne.n	80028ec <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	f043 0201 	orr.w	r2, r3, #1
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80028b8:	e018      	b.n	80028ec <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d111      	bne.n	80028ec <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d105      	bne.n	80028ec <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e4:	f043 0201 	orr.w	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f7ff fa4b 	bl	8001d88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028f2:	e00e      	b.n	8002912 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7ff fa5f 	bl	8001dc4 <HAL_ADC_ErrorCallback>
}
 8002906:	e004      	b.n	8002912 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	4798      	blx	r3
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7ff fa37 	bl	8001d9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002948:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002954:	f043 0204 	orr.w	r2, r3, #4
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f7ff fa31 	bl	8001dc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <LL_ADC_IsEnabled>:
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <LL_ADC_IsEnabled+0x18>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <LL_ADC_IsEnabled+0x1a>
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_ADC_StartCalibration>:
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80029a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	609a      	str	r2, [r3, #8]
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <LL_ADC_IsCalibrationOnGoing>:
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029d6:	d101      	bne.n	80029dc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <LL_ADC_IsCalibrationOnGoing+0x1c>
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_ADC_REG_IsConversionOngoing>:
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d101      	bne.n	8002a02 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_ADCEx_Calibration_Start+0x1c>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e04d      	b.n	8002ac8 <HAL_ADCEx_Calibration_Start+0xb8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff fea5 	bl	8002784 <ADC_Disable>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d136      	bne.n	8002ab2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a4c:	f023 0302 	bic.w	r3, r3, #2
 8002a50:	f043 0202 	orr.w	r2, r3, #2
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6839      	ldr	r1, [r7, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff96 	bl	8002990 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a64:	e014      	b.n	8002a90 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d90d      	bls.n	8002a90 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a78:	f023 0312 	bic.w	r3, r3, #18
 8002a7c:	f043 0210 	orr.w	r2, r3, #16
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e01b      	b.n	8002ac8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff94 	bl	80029c2 <LL_ADC_IsCalibrationOnGoing>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e2      	bne.n	8002a66 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	f023 0303 	bic.w	r3, r3, #3
 8002aa8:	f043 0201 	orr.w	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ab0:	e005      	b.n	8002abe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	f043 0210 	orr.w	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	0004de01 	.word	0x0004de01

08002ad4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b0a1      	sub	sp, #132	; 0x84
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e0e7      	b.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b62:	2300      	movs	r3, #0
 8002b64:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b6e:	d102      	bne.n	8002b76 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b70:	4b6f      	ldr	r3, [pc, #444]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	e009      	b.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6e      	ldr	r2, [pc, #440]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d102      	bne.n	8002b86 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002b80:	4b6d      	ldr	r3, [pc, #436]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	e001      	b.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10b      	bne.n	8002ba8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0be      	b.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff ff1d 	bl	80029ea <LL_ADC_REG_IsConversionOngoing>
 8002bb0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff ff17 	bl	80029ea <LL_ADC_REG_IsConversionOngoing>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 80a0 	bne.w	8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 809c 	bne.w	8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd4:	d004      	beq.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a55      	ldr	r2, [pc, #340]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d101      	bne.n	8002be4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002be0:	4b56      	ldr	r3, [pc, #344]	; (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002be2:	e000      	b.n	8002be6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002be4:	4b56      	ldr	r3, [pc, #344]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002be6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d04b      	beq.n	8002c88 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c02:	035b      	lsls	r3, r3, #13
 8002c04:	430b      	orrs	r3, r1
 8002c06:	431a      	orrs	r2, r3
 8002c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c0a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c14:	d004      	beq.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a45      	ldr	r2, [pc, #276]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d10f      	bne.n	8002c40 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002c20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c24:	f7ff fea1 	bl	800296a <LL_ADC_IsEnabled>
 8002c28:	4604      	mov	r4, r0
 8002c2a:	4841      	ldr	r0, [pc, #260]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c2c:	f7ff fe9d 	bl	800296a <LL_ADC_IsEnabled>
 8002c30:	4603      	mov	r3, r0
 8002c32:	4323      	orrs	r3, r4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e012      	b.n	8002c66 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c40:	483c      	ldr	r0, [pc, #240]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c42:	f7ff fe92 	bl	800296a <LL_ADC_IsEnabled>
 8002c46:	4604      	mov	r4, r0
 8002c48:	483b      	ldr	r0, [pc, #236]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c4a:	f7ff fe8e 	bl	800296a <LL_ADC_IsEnabled>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	431c      	orrs	r4, r3
 8002c52:	483c      	ldr	r0, [pc, #240]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c54:	f7ff fe89 	bl	800296a <LL_ADC_IsEnabled>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4323      	orrs	r3, r4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d056      	beq.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c72:	f023 030f 	bic.w	r3, r3, #15
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	6811      	ldr	r1, [r2, #0]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	6892      	ldr	r2, [r2, #8]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	431a      	orrs	r2, r3
 8002c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c84:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c86:	e047      	b.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c92:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c9c:	d004      	beq.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a23      	ldr	r2, [pc, #140]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d10f      	bne.n	8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002ca8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002cac:	f7ff fe5d 	bl	800296a <LL_ADC_IsEnabled>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	481f      	ldr	r0, [pc, #124]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cb4:	f7ff fe59 	bl	800296a <LL_ADC_IsEnabled>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4323      	orrs	r3, r4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e012      	b.n	8002cee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002cc8:	481a      	ldr	r0, [pc, #104]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002cca:	f7ff fe4e 	bl	800296a <LL_ADC_IsEnabled>
 8002cce:	4604      	mov	r4, r0
 8002cd0:	4819      	ldr	r0, [pc, #100]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002cd2:	f7ff fe4a 	bl	800296a <LL_ADC_IsEnabled>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	431c      	orrs	r4, r3
 8002cda:	481a      	ldr	r0, [pc, #104]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002cdc:	f7ff fe45 	bl	800296a <LL_ADC_IsEnabled>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4323      	orrs	r3, r4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d012      	beq.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cfa:	f023 030f 	bic.w	r3, r3, #15
 8002cfe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d00:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d02:	e009      	b.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d16:	e000      	b.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3784      	adds	r7, #132	; 0x84
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd90      	pop	{r4, r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	50000100 	.word	0x50000100
 8002d34:	50000400 	.word	0x50000400
 8002d38:	50000500 	.word	0x50000500
 8002d3c:	50000300 	.word	0x50000300
 8002d40:	50000700 	.word	0x50000700
 8002d44:	50000600 	.word	0x50000600

08002d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d64:	4013      	ands	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	60d3      	str	r3, [r2, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <__NVIC_GetPriorityGrouping+0x18>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	f003 0307 	and.w	r3, r3, #7
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	db0b      	blt.n	8002dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4907      	ldr	r1, [pc, #28]	; (8002de4 <__NVIC_EnableIRQ+0x38>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	2001      	movs	r0, #1
 8002dce:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000e100 	.word	0xe000e100

08002de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	6039      	str	r1, [r7, #0]
 8002df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	db0a      	blt.n	8002e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	490c      	ldr	r1, [pc, #48]	; (8002e34 <__NVIC_SetPriority+0x4c>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	0112      	lsls	r2, r2, #4
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e10:	e00a      	b.n	8002e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4908      	ldr	r1, [pc, #32]	; (8002e38 <__NVIC_SetPriority+0x50>)
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	3b04      	subs	r3, #4
 8002e20:	0112      	lsls	r2, r2, #4
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	440b      	add	r3, r1
 8002e26:	761a      	strb	r2, [r3, #24]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000e100 	.word	0xe000e100
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	; 0x24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f1c3 0307 	rsb	r3, r3, #7
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	bf28      	it	cs
 8002e5a:	2304      	movcs	r3, #4
 8002e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3304      	adds	r3, #4
 8002e62:	2b06      	cmp	r3, #6
 8002e64:	d902      	bls.n	8002e6c <NVIC_EncodePriority+0x30>
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3b03      	subs	r3, #3
 8002e6a:	e000      	b.n	8002e6e <NVIC_EncodePriority+0x32>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	401a      	ands	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8e:	43d9      	mvns	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e94:	4313      	orrs	r3, r2
         );
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3724      	adds	r7, #36	; 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb4:	d301      	bcc.n	8002eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e00f      	b.n	8002eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eba:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <SysTick_Config+0x40>)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec2:	210f      	movs	r1, #15
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ec8:	f7ff ff8e 	bl	8002de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <SysTick_Config+0x40>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <SysTick_Config+0x40>)
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	e000e010 	.word	0xe000e010

08002ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ff29 	bl	8002d48 <__NVIC_SetPriorityGrouping>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4603      	mov	r3, r0
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f0c:	f7ff ff40 	bl	8002d90 <__NVIC_GetPriorityGrouping>
 8002f10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	6978      	ldr	r0, [r7, #20]
 8002f18:	f7ff ff90 	bl	8002e3c <NVIC_EncodePriority>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff5f 	bl	8002de8 <__NVIC_SetPriority>
}
 8002f2a:	bf00      	nop
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	4603      	mov	r3, r0
 8002f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff33 	bl	8002dac <__NVIC_EnableIRQ>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ffa4 	bl	8002ea4 <SysTick_Config>
 8002f5c:	4603      	mov	r3, r0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e08d      	b.n	8003096 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4b47      	ldr	r3, [pc, #284]	; (80030a0 <HAL_DMA_Init+0x138>)
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d80f      	bhi.n	8002fa6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4b45      	ldr	r3, [pc, #276]	; (80030a4 <HAL_DMA_Init+0x13c>)
 8002f8e:	4413      	add	r3, r2
 8002f90:	4a45      	ldr	r2, [pc, #276]	; (80030a8 <HAL_DMA_Init+0x140>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	009a      	lsls	r2, r3, #2
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a42      	ldr	r2, [pc, #264]	; (80030ac <HAL_DMA_Init+0x144>)
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
 8002fa4:	e00e      	b.n	8002fc4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b40      	ldr	r3, [pc, #256]	; (80030b0 <HAL_DMA_Init+0x148>)
 8002fae:	4413      	add	r3, r2
 8002fb0:	4a3d      	ldr	r2, [pc, #244]	; (80030a8 <HAL_DMA_Init+0x140>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	009a      	lsls	r2, r3, #2
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a3c      	ldr	r2, [pc, #240]	; (80030b4 <HAL_DMA_Init+0x14c>)
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003000:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f9b6 	bl	8003388 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003024:	d102      	bne.n	800302c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003040:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d010      	beq.n	800306c <HAL_DMA_Init+0x104>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b04      	cmp	r3, #4
 8003050:	d80c      	bhi.n	800306c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f9d6 	bl	8003404 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	e008      	b.n	800307e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40020407 	.word	0x40020407
 80030a4:	bffdfff8 	.word	0xbffdfff8
 80030a8:	cccccccd 	.word	0xcccccccd
 80030ac:	40020000 	.word	0x40020000
 80030b0:	bffdfbf8 	.word	0xbffdfbf8
 80030b4:	40020400 	.word	0x40020400

080030b8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_DMA_Start_IT+0x20>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e066      	b.n	80031a6 <HAL_DMA_Start_IT+0xee>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d155      	bne.n	8003198 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f8fb 	bl	800330c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 020e 	orr.w	r2, r2, #14
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e00f      	b.n	8003150 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0204 	bic.w	r2, r2, #4
 800313e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 020a 	orr.w	r2, r2, #10
 800314e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800316c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	2b00      	cmp	r3, #0
 8003174:	d007      	beq.n	8003186 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003184:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	e005      	b.n	80031a4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031a0:	2302      	movs	r3, #2
 80031a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	2204      	movs	r2, #4
 80031d0:	409a      	lsls	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d026      	beq.n	8003228 <HAL_DMA_IRQHandler+0x7a>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d021      	beq.n	8003228 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d107      	bne.n	8003202 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0204 	bic.w	r2, r2, #4
 8003200:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f003 021f 	and.w	r2, r3, #31
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	2104      	movs	r1, #4
 8003210:	fa01 f202 	lsl.w	r2, r1, r2
 8003214:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	2b00      	cmp	r3, #0
 800321c:	d071      	beq.n	8003302 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003226:	e06c      	b.n	8003302 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	2202      	movs	r2, #2
 8003232:	409a      	lsls	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d02e      	beq.n	800329a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d029      	beq.n	800329a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10b      	bne.n	800326c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 020a 	bic.w	r2, r2, #10
 8003262:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	f003 021f 	and.w	r2, r3, #31
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	2102      	movs	r1, #2
 800327a:	fa01 f202 	lsl.w	r2, r1, r2
 800327e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	2b00      	cmp	r3, #0
 800328e:	d038      	beq.n	8003302 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003298:	e033      	b.n	8003302 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	2208      	movs	r2, #8
 80032a4:	409a      	lsls	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d02a      	beq.n	8003304 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d025      	beq.n	8003304 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 020e 	bic.w	r2, r2, #14
 80032c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	2101      	movs	r1, #1
 80032d6:	fa01 f202 	lsl.w	r2, r1, r2
 80032da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d004      	beq.n	8003304 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003302:	bf00      	nop
 8003304:	bf00      	nop
}
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003322:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003328:	2b00      	cmp	r3, #0
 800332a:	d004      	beq.n	8003336 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003334:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	f003 021f 	and.w	r2, r3, #31
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2101      	movs	r1, #1
 8003344:	fa01 f202 	lsl.w	r2, r1, r2
 8003348:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b10      	cmp	r3, #16
 8003358:	d108      	bne.n	800336c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800336a:	e007      	b.n	800337c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	60da      	str	r2, [r3, #12]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	4b16      	ldr	r3, [pc, #88]	; (80033f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003398:	429a      	cmp	r2, r3
 800339a:	d802      	bhi.n	80033a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800339c:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	e001      	b.n	80033a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80033a4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	3b08      	subs	r3, #8
 80033b2:	4a12      	ldr	r2, [pc, #72]	; (80033fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c0:	089b      	lsrs	r3, r3, #2
 80033c2:	009a      	lsls	r2, r3, #2
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	461a      	mov	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a0b      	ldr	r2, [pc, #44]	; (8003400 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80033d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	2201      	movs	r2, #1
 80033dc:	409a      	lsls	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40020407 	.word	0x40020407
 80033f4:	40020800 	.word	0x40020800
 80033f8:	40020820 	.word	0x40020820
 80033fc:	cccccccd 	.word	0xcccccccd
 8003400:	40020880 	.word	0x40020880

08003404 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	461a      	mov	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a08      	ldr	r2, [pc, #32]	; (8003448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003426:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3b01      	subs	r3, #1
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	2201      	movs	r2, #1
 8003432:	409a      	lsls	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	1000823f 	.word	0x1000823f
 8003448:	40020940 	.word	0x40020940

0800344c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800345a:	e15a      	b.n	8003712 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	2101      	movs	r1, #1
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	4013      	ands	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 814c 	beq.w	800370c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d005      	beq.n	800348c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003488:	2b02      	cmp	r3, #2
 800348a:	d130      	bne.n	80034ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	2203      	movs	r2, #3
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034c2:	2201      	movs	r2, #1
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	091b      	lsrs	r3, r3, #4
 80034d8:	f003 0201 	and.w	r2, r3, #1
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d017      	beq.n	800352a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	2203      	movs	r2, #3
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d123      	bne.n	800357e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	08da      	lsrs	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3208      	adds	r2, #8
 800353e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003542:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	220f      	movs	r2, #15
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43db      	mvns	r3, r3
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4013      	ands	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	08da      	lsrs	r2, r3, #3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3208      	adds	r2, #8
 8003578:	6939      	ldr	r1, [r7, #16]
 800357a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	2203      	movs	r2, #3
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 0203 	and.w	r2, r3, #3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80a6 	beq.w	800370c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c0:	4b5b      	ldr	r3, [pc, #364]	; (8003730 <HAL_GPIO_Init+0x2e4>)
 80035c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c4:	4a5a      	ldr	r2, [pc, #360]	; (8003730 <HAL_GPIO_Init+0x2e4>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6613      	str	r3, [r2, #96]	; 0x60
 80035cc:	4b58      	ldr	r3, [pc, #352]	; (8003730 <HAL_GPIO_Init+0x2e4>)
 80035ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035d8:	4a56      	ldr	r2, [pc, #344]	; (8003734 <HAL_GPIO_Init+0x2e8>)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	3302      	adds	r3, #2
 80035e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	220f      	movs	r2, #15
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003602:	d01f      	beq.n	8003644 <HAL_GPIO_Init+0x1f8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a4c      	ldr	r2, [pc, #304]	; (8003738 <HAL_GPIO_Init+0x2ec>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d019      	beq.n	8003640 <HAL_GPIO_Init+0x1f4>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a4b      	ldr	r2, [pc, #300]	; (800373c <HAL_GPIO_Init+0x2f0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d013      	beq.n	800363c <HAL_GPIO_Init+0x1f0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a4a      	ldr	r2, [pc, #296]	; (8003740 <HAL_GPIO_Init+0x2f4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00d      	beq.n	8003638 <HAL_GPIO_Init+0x1ec>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a49      	ldr	r2, [pc, #292]	; (8003744 <HAL_GPIO_Init+0x2f8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d007      	beq.n	8003634 <HAL_GPIO_Init+0x1e8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a48      	ldr	r2, [pc, #288]	; (8003748 <HAL_GPIO_Init+0x2fc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d101      	bne.n	8003630 <HAL_GPIO_Init+0x1e4>
 800362c:	2305      	movs	r3, #5
 800362e:	e00a      	b.n	8003646 <HAL_GPIO_Init+0x1fa>
 8003630:	2306      	movs	r3, #6
 8003632:	e008      	b.n	8003646 <HAL_GPIO_Init+0x1fa>
 8003634:	2304      	movs	r3, #4
 8003636:	e006      	b.n	8003646 <HAL_GPIO_Init+0x1fa>
 8003638:	2303      	movs	r3, #3
 800363a:	e004      	b.n	8003646 <HAL_GPIO_Init+0x1fa>
 800363c:	2302      	movs	r3, #2
 800363e:	e002      	b.n	8003646 <HAL_GPIO_Init+0x1fa>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <HAL_GPIO_Init+0x1fa>
 8003644:	2300      	movs	r3, #0
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	f002 0203 	and.w	r2, r2, #3
 800364c:	0092      	lsls	r2, r2, #2
 800364e:	4093      	lsls	r3, r2
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003656:	4937      	ldr	r1, [pc, #220]	; (8003734 <HAL_GPIO_Init+0x2e8>)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	089b      	lsrs	r3, r3, #2
 800365c:	3302      	adds	r3, #2
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003664:	4b39      	ldr	r3, [pc, #228]	; (800374c <HAL_GPIO_Init+0x300>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	43db      	mvns	r3, r3
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003688:	4a30      	ldr	r2, [pc, #192]	; (800374c <HAL_GPIO_Init+0x300>)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800368e:	4b2f      	ldr	r3, [pc, #188]	; (800374c <HAL_GPIO_Init+0x300>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	43db      	mvns	r3, r3
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4013      	ands	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036b2:	4a26      	ldr	r2, [pc, #152]	; (800374c <HAL_GPIO_Init+0x300>)
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80036b8:	4b24      	ldr	r3, [pc, #144]	; (800374c <HAL_GPIO_Init+0x300>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	43db      	mvns	r3, r3
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4013      	ands	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036dc:	4a1b      	ldr	r2, [pc, #108]	; (800374c <HAL_GPIO_Init+0x300>)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HAL_GPIO_Init+0x300>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	43db      	mvns	r3, r3
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4013      	ands	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003706:	4a11      	ldr	r2, [pc, #68]	; (800374c <HAL_GPIO_Init+0x300>)
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	3301      	adds	r3, #1
 8003710:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	f47f ae9d 	bne.w	800345c <HAL_GPIO_Init+0x10>
  }
}
 8003722:	bf00      	nop
 8003724:	bf00      	nop
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	40021000 	.word	0x40021000
 8003734:	40010000 	.word	0x40010000
 8003738:	48000400 	.word	0x48000400
 800373c:	48000800 	.word	0x48000800
 8003740:	48000c00 	.word	0x48000c00
 8003744:	48001000 	.word	0x48001000
 8003748:	48001400 	.word	0x48001400
 800374c:	40010400 	.word	0x40010400

08003750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	807b      	strh	r3, [r7, #2]
 800375c:	4613      	mov	r3, r2
 800375e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003760:	787b      	ldrb	r3, [r7, #1]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003766:	887a      	ldrh	r2, [r7, #2]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800376c:	e002      	b.n	8003774 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d006      	beq.n	80037a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003796:	4a05      	ldr	r2, [pc, #20]	; (80037ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 f806 	bl	80037b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40010400 	.word	0x40010400

080037b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d141      	bne.n	800385a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037d6:	4b4b      	ldr	r3, [pc, #300]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e2:	d131      	bne.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037e4:	4b47      	ldr	r3, [pc, #284]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ea:	4a46      	ldr	r2, [pc, #280]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037f4:	4b43      	ldr	r3, [pc, #268]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037fc:	4a41      	ldr	r2, [pc, #260]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003802:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003804:	4b40      	ldr	r3, [pc, #256]	; (8003908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2232      	movs	r2, #50	; 0x32
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	4a3f      	ldr	r2, [pc, #252]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	0c9b      	lsrs	r3, r3, #18
 8003816:	3301      	adds	r3, #1
 8003818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800381a:	e002      	b.n	8003822 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3b01      	subs	r3, #1
 8003820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003822:	4b38      	ldr	r3, [pc, #224]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382e:	d102      	bne.n	8003836 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f2      	bne.n	800381c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003836:	4b33      	ldr	r3, [pc, #204]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003842:	d158      	bne.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e057      	b.n	80038f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003848:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800384e:	4a2d      	ldr	r2, [pc, #180]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003854:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003858:	e04d      	b.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003860:	d141      	bne.n	80038e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003862:	4b28      	ldr	r3, [pc, #160]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800386a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386e:	d131      	bne.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003870:	4b24      	ldr	r3, [pc, #144]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003876:	4a23      	ldr	r2, [pc, #140]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003880:	4b20      	ldr	r3, [pc, #128]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003888:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800388a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800388e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003890:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2232      	movs	r2, #50	; 0x32
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	4a1c      	ldr	r2, [pc, #112]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	0c9b      	lsrs	r3, r3, #18
 80038a2:	3301      	adds	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038a6:	e002      	b.n	80038ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ba:	d102      	bne.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f2      	bne.n	80038a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ce:	d112      	bne.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e011      	b.n	80038f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038da:	4a0a      	ldr	r2, [pc, #40]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038e4:	e007      	b.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038ee:	4a05      	ldr	r2, [pc, #20]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40007000 	.word	0x40007000
 8003908:	20000000 	.word	0x20000000
 800390c:	431bde83 	.word	0x431bde83

08003910 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a04      	ldr	r2, [pc, #16]	; (800392c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800391a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800391e:	6093      	str	r3, [r2, #8]
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40007000 	.word	0x40007000

08003930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e2fe      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d075      	beq.n	8003a3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394e:	4b97      	ldr	r3, [pc, #604]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003958:	4b94      	ldr	r3, [pc, #592]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b0c      	cmp	r3, #12
 8003966:	d102      	bne.n	800396e <HAL_RCC_OscConfig+0x3e>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d002      	beq.n	8003974 <HAL_RCC_OscConfig+0x44>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d10b      	bne.n	800398c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003974:	4b8d      	ldr	r3, [pc, #564]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d05b      	beq.n	8003a38 <HAL_RCC_OscConfig+0x108>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d157      	bne.n	8003a38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e2d9      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003994:	d106      	bne.n	80039a4 <HAL_RCC_OscConfig+0x74>
 8003996:	4b85      	ldr	r3, [pc, #532]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a84      	ldr	r2, [pc, #528]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e01d      	b.n	80039e0 <HAL_RCC_OscConfig+0xb0>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x98>
 80039ae:	4b7f      	ldr	r3, [pc, #508]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a7e      	ldr	r2, [pc, #504]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b7c      	ldr	r3, [pc, #496]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a7b      	ldr	r2, [pc, #492]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e00b      	b.n	80039e0 <HAL_RCC_OscConfig+0xb0>
 80039c8:	4b78      	ldr	r3, [pc, #480]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a77      	ldr	r2, [pc, #476]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b75      	ldr	r3, [pc, #468]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a74      	ldr	r2, [pc, #464]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd fa6c 	bl	8000ec4 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fd fa68 	bl	8000ec4 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e29e      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a02:	4b6a      	ldr	r3, [pc, #424]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0xc0>
 8003a0e:	e014      	b.n	8003a3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fd fa58 	bl	8000ec4 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a18:	f7fd fa54 	bl	8000ec4 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	; 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e28a      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a2a:	4b60      	ldr	r3, [pc, #384]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0xe8>
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d075      	beq.n	8003b32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a46:	4b59      	ldr	r3, [pc, #356]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a50:	4b56      	ldr	r3, [pc, #344]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	2b0c      	cmp	r3, #12
 8003a5e:	d102      	bne.n	8003a66 <HAL_RCC_OscConfig+0x136>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d002      	beq.n	8003a6c <HAL_RCC_OscConfig+0x13c>
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d11f      	bne.n	8003aac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a6c:	4b4f      	ldr	r3, [pc, #316]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_OscConfig+0x154>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e25d      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a84:	4b49      	ldr	r3, [pc, #292]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	061b      	lsls	r3, r3, #24
 8003a92:	4946      	ldr	r1, [pc, #280]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a98:	4b45      	ldr	r3, [pc, #276]	; (8003bb0 <HAL_RCC_OscConfig+0x280>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fd f9c5 	bl	8000e2c <HAL_InitTick>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d043      	beq.n	8003b30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e249      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d023      	beq.n	8003afc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab4:	4b3d      	ldr	r3, [pc, #244]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a3c      	ldr	r2, [pc, #240]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fd fa00 	bl	8000ec4 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac8:	f7fd f9fc 	bl	8000ec4 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e232      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ada:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae6:	4b31      	ldr	r3, [pc, #196]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	061b      	lsls	r3, r3, #24
 8003af4:	492d      	ldr	r1, [pc, #180]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	604b      	str	r3, [r1, #4]
 8003afa:	e01a      	b.n	8003b32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afc:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a2a      	ldr	r2, [pc, #168]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fd f9dc 	bl	8000ec4 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b10:	f7fd f9d8 	bl	8000ec4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e20e      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b22:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1e0>
 8003b2e:	e000      	b.n	8003b32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d041      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01c      	beq.n	8003b80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b46:	4b19      	ldr	r3, [pc, #100]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4c:	4a17      	ldr	r2, [pc, #92]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b56:	f7fd f9b5 	bl	8000ec4 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b5e:	f7fd f9b1 	bl	8000ec4 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e1e7      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b70:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0ef      	beq.n	8003b5e <HAL_RCC_OscConfig+0x22e>
 8003b7e:	e020      	b.n	8003bc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b86:	4a09      	ldr	r2, [pc, #36]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b90:	f7fd f998 	bl	8000ec4 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b96:	e00d      	b.n	8003bb4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b98:	f7fd f994 	bl	8000ec4 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d906      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e1ca      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bb4:	4b8c      	ldr	r3, [pc, #560]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1ea      	bne.n	8003b98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80a6 	beq.w	8003d1c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bd4:	4b84      	ldr	r3, [pc, #528]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2b4>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x2b6>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00d      	beq.n	8003c06 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bea:	4b7f      	ldr	r3, [pc, #508]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	4a7e      	ldr	r2, [pc, #504]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf6:	4b7c      	ldr	r3, [pc, #496]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c02:	2301      	movs	r3, #1
 8003c04:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c06:	4b79      	ldr	r3, [pc, #484]	; (8003dec <HAL_RCC_OscConfig+0x4bc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d118      	bne.n	8003c44 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c12:	4b76      	ldr	r3, [pc, #472]	; (8003dec <HAL_RCC_OscConfig+0x4bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a75      	ldr	r2, [pc, #468]	; (8003dec <HAL_RCC_OscConfig+0x4bc>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1e:	f7fd f951 	bl	8000ec4 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c26:	f7fd f94d 	bl	8000ec4 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e183      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c38:	4b6c      	ldr	r3, [pc, #432]	; (8003dec <HAL_RCC_OscConfig+0x4bc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d108      	bne.n	8003c5e <HAL_RCC_OscConfig+0x32e>
 8003c4c:	4b66      	ldr	r3, [pc, #408]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	4a65      	ldr	r2, [pc, #404]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c5c:	e024      	b.n	8003ca8 <HAL_RCC_OscConfig+0x378>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	d110      	bne.n	8003c88 <HAL_RCC_OscConfig+0x358>
 8003c66:	4b60      	ldr	r3, [pc, #384]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	4a5e      	ldr	r2, [pc, #376]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c6e:	f043 0304 	orr.w	r3, r3, #4
 8003c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c76:	4b5c      	ldr	r3, [pc, #368]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7c:	4a5a      	ldr	r2, [pc, #360]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c86:	e00f      	b.n	8003ca8 <HAL_RCC_OscConfig+0x378>
 8003c88:	4b57      	ldr	r3, [pc, #348]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	4a56      	ldr	r2, [pc, #344]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c90:	f023 0301 	bic.w	r3, r3, #1
 8003c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c98:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	4a52      	ldr	r2, [pc, #328]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003ca0:	f023 0304 	bic.w	r3, r3, #4
 8003ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d016      	beq.n	8003cde <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb0:	f7fd f908 	bl	8000ec4 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb6:	e00a      	b.n	8003cce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb8:	f7fd f904 	bl	8000ec4 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e138      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cce:	4b46      	ldr	r3, [pc, #280]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0ed      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x388>
 8003cdc:	e015      	b.n	8003d0a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cde:	f7fd f8f1 	bl	8000ec4 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ce4:	e00a      	b.n	8003cfc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce6:	f7fd f8ed 	bl	8000ec4 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e121      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cfc:	4b3a      	ldr	r3, [pc, #232]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1ed      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d0a:	7ffb      	ldrb	r3, [r7, #31]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d105      	bne.n	8003d1c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d10:	4b35      	ldr	r3, [pc, #212]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d14:	4a34      	ldr	r2, [pc, #208]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d03c      	beq.n	8003da2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01c      	beq.n	8003d6a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d30:	4b2d      	ldr	r3, [pc, #180]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d36:	4a2c      	ldr	r2, [pc, #176]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d40:	f7fd f8c0 	bl	8000ec4 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d48:	f7fd f8bc 	bl	8000ec4 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0f2      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d5a:	4b23      	ldr	r3, [pc, #140]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0ef      	beq.n	8003d48 <HAL_RCC_OscConfig+0x418>
 8003d68:	e01b      	b.n	8003da2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d6a:	4b1f      	ldr	r3, [pc, #124]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d70:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7a:	f7fd f8a3 	bl	8000ec4 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d82:	f7fd f89f 	bl	8000ec4 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e0d5      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1ef      	bne.n	8003d82 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80c9 	beq.w	8003f3e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 030c 	and.w	r3, r3, #12
 8003db4:	2b0c      	cmp	r3, #12
 8003db6:	f000 8083 	beq.w	8003ec0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d15e      	bne.n	8003e80 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc2:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a08      	ldr	r2, [pc, #32]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003dc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7fd f879 	bl	8000ec4 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd4:	e00c      	b.n	8003df0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd6:	f7fd f875 	bl	8000ec4 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d905      	bls.n	8003df0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e0ab      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
 8003de8:	40021000 	.word	0x40021000
 8003dec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df0:	4b55      	ldr	r3, [pc, #340]	; (8003f48 <HAL_RCC_OscConfig+0x618>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ec      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dfc:	4b52      	ldr	r3, [pc, #328]	; (8003f48 <HAL_RCC_OscConfig+0x618>)
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	4b52      	ldr	r3, [pc, #328]	; (8003f4c <HAL_RCC_OscConfig+0x61c>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6a11      	ldr	r1, [r2, #32]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e0c:	3a01      	subs	r2, #1
 8003e0e:	0112      	lsls	r2, r2, #4
 8003e10:	4311      	orrs	r1, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e16:	0212      	lsls	r2, r2, #8
 8003e18:	4311      	orrs	r1, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e1e:	0852      	lsrs	r2, r2, #1
 8003e20:	3a01      	subs	r2, #1
 8003e22:	0552      	lsls	r2, r2, #21
 8003e24:	4311      	orrs	r1, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e2a:	0852      	lsrs	r2, r2, #1
 8003e2c:	3a01      	subs	r2, #1
 8003e2e:	0652      	lsls	r2, r2, #25
 8003e30:	4311      	orrs	r1, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e36:	06d2      	lsls	r2, r2, #27
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	4943      	ldr	r1, [pc, #268]	; (8003f48 <HAL_RCC_OscConfig+0x618>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e40:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <HAL_RCC_OscConfig+0x618>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a40      	ldr	r2, [pc, #256]	; (8003f48 <HAL_RCC_OscConfig+0x618>)
 8003e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e4c:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <HAL_RCC_OscConfig+0x618>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4a3d      	ldr	r2, [pc, #244]	; (8003f48 <HAL_RCC_OscConfig+0x618>)
 8003e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fd f834 	bl	8000ec4 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e60:	f7fd f830 	bl	8000ec4 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e066      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e72:	4b35      	ldr	r3, [pc, #212]	; (8003f48 <HAL_RCC_OscConfig+0x618>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x530>
 8003e7e:	e05e      	b.n	8003f3e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e80:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <HAL_RCC_OscConfig+0x618>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a30      	ldr	r2, [pc, #192]	; (8003f48 <HAL_RCC_OscConfig+0x618>)
 8003e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fd f81a 	bl	8000ec4 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e94:	f7fd f816 	bl	8000ec4 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e04c      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea6:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <HAL_RCC_OscConfig+0x618>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003eb2:	4b25      	ldr	r3, [pc, #148]	; (8003f48 <HAL_RCC_OscConfig+0x618>)
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	4924      	ldr	r1, [pc, #144]	; (8003f48 <HAL_RCC_OscConfig+0x618>)
 8003eb8:	4b25      	ldr	r3, [pc, #148]	; (8003f50 <HAL_RCC_OscConfig+0x620>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	60cb      	str	r3, [r1, #12]
 8003ebe:	e03e      	b.n	8003f3e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e039      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <HAL_RCC_OscConfig+0x618>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f003 0203 	and.w	r2, r3, #3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d12c      	bne.n	8003f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	3b01      	subs	r3, #1
 8003eec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d123      	bne.n	8003f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d11b      	bne.n	8003f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d113      	bne.n	8003f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d109      	bne.n	8003f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	3b01      	subs	r3, #1
 8003f34:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d001      	beq.n	8003f3e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	019f800c 	.word	0x019f800c
 8003f50:	feeefffc 	.word	0xfeeefffc

08003f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e11e      	b.n	80041aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b91      	ldr	r3, [pc, #580]	; (80041b4 <HAL_RCC_ClockConfig+0x260>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d910      	bls.n	8003f9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b8e      	ldr	r3, [pc, #568]	; (80041b4 <HAL_RCC_ClockConfig+0x260>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 020f 	bic.w	r2, r3, #15
 8003f82:	498c      	ldr	r1, [pc, #560]	; (80041b4 <HAL_RCC_ClockConfig+0x260>)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b8a      	ldr	r3, [pc, #552]	; (80041b4 <HAL_RCC_ClockConfig+0x260>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e106      	b.n	80041aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d073      	beq.n	8004090 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d129      	bne.n	8004004 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb0:	4b81      	ldr	r3, [pc, #516]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0f4      	b.n	80041aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003fc0:	f000 f99e 	bl	8004300 <RCC_GetSysClockFreqFromPLLSource>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4a7c      	ldr	r2, [pc, #496]	; (80041bc <HAL_RCC_ClockConfig+0x268>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d93f      	bls.n	800404e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fce:	4b7a      	ldr	r3, [pc, #488]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d033      	beq.n	800404e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d12f      	bne.n	800404e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fee:	4b72      	ldr	r3, [pc, #456]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ff6:	4a70      	ldr	r2, [pc, #448]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 8003ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ffe:	2380      	movs	r3, #128	; 0x80
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	e024      	b.n	800404e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d107      	bne.n	800401c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800400c:	4b6a      	ldr	r3, [pc, #424]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0c6      	b.n	80041aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800401c:	4b66      	ldr	r3, [pc, #408]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0be      	b.n	80041aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800402c:	f000 f8ce 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 8004030:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4a61      	ldr	r2, [pc, #388]	; (80041bc <HAL_RCC_ClockConfig+0x268>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d909      	bls.n	800404e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800403a:	4b5f      	ldr	r3, [pc, #380]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004042:	4a5d      	ldr	r2, [pc, #372]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 8004044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004048:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800404e:	4b5a      	ldr	r3, [pc, #360]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f023 0203 	bic.w	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4957      	ldr	r1, [pc, #348]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 800405c:	4313      	orrs	r3, r2
 800405e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004060:	f7fc ff30 	bl	8000ec4 <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	e00a      	b.n	800407e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004068:	f7fc ff2c 	bl	8000ec4 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	; 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e095      	b.n	80041aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	4b4e      	ldr	r3, [pc, #312]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 020c 	and.w	r2, r3, #12
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	429a      	cmp	r2, r3
 800408e:	d1eb      	bne.n	8004068 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d023      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a8:	4b43      	ldr	r3, [pc, #268]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4a42      	ldr	r2, [pc, #264]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 80040ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80040c0:	4b3d      	ldr	r3, [pc, #244]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80040c8:	4a3b      	ldr	r2, [pc, #236]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 80040ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d0:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4936      	ldr	r1, [pc, #216]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b80      	cmp	r3, #128	; 0x80
 80040e8:	d105      	bne.n	80040f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040ea:	4b33      	ldr	r3, [pc, #204]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	4a32      	ldr	r2, [pc, #200]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 80040f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040f6:	4b2f      	ldr	r3, [pc, #188]	; (80041b4 <HAL_RCC_ClockConfig+0x260>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d21d      	bcs.n	8004140 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004104:	4b2b      	ldr	r3, [pc, #172]	; (80041b4 <HAL_RCC_ClockConfig+0x260>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f023 020f 	bic.w	r2, r3, #15
 800410c:	4929      	ldr	r1, [pc, #164]	; (80041b4 <HAL_RCC_ClockConfig+0x260>)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	4313      	orrs	r3, r2
 8004112:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004114:	f7fc fed6 	bl	8000ec4 <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	e00a      	b.n	8004132 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800411c:	f7fc fed2 	bl	8000ec4 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	; 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e03b      	b.n	80041aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <HAL_RCC_ClockConfig+0x260>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d1ed      	bne.n	800411c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800414c:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	4917      	ldr	r1, [pc, #92]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 800415a:	4313      	orrs	r3, r2
 800415c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800416a:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	490f      	ldr	r1, [pc, #60]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800417e:	f000 f825 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 8004182:	4602      	mov	r2, r0
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <HAL_RCC_ClockConfig+0x264>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	091b      	lsrs	r3, r3, #4
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	490c      	ldr	r1, [pc, #48]	; (80041c0 <HAL_RCC_ClockConfig+0x26c>)
 8004190:	5ccb      	ldrb	r3, [r1, r3]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	fa22 f303 	lsr.w	r3, r2, r3
 800419a:	4a0a      	ldr	r2, [pc, #40]	; (80041c4 <HAL_RCC_ClockConfig+0x270>)
 800419c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800419e:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <HAL_RCC_ClockConfig+0x274>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fc fe42 	bl	8000e2c <HAL_InitTick>
 80041a8:	4603      	mov	r3, r0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40022000 	.word	0x40022000
 80041b8:	40021000 	.word	0x40021000
 80041bc:	04c4b400 	.word	0x04c4b400
 80041c0:	08006c3c 	.word	0x08006c3c
 80041c4:	20000000 	.word	0x20000000
 80041c8:	20000004 	.word	0x20000004

080041cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041d2:	4b2c      	ldr	r3, [pc, #176]	; (8004284 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d102      	bne.n	80041e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041de:	4b2a      	ldr	r3, [pc, #168]	; (8004288 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	e047      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80041e4:	4b27      	ldr	r3, [pc, #156]	; (8004284 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 030c 	and.w	r3, r3, #12
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d102      	bne.n	80041f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041f0:	4b26      	ldr	r3, [pc, #152]	; (800428c <HAL_RCC_GetSysClockFreq+0xc0>)
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	e03e      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80041f6:	4b23      	ldr	r3, [pc, #140]	; (8004284 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b0c      	cmp	r3, #12
 8004200:	d136      	bne.n	8004270 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800420c:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <HAL_RCC_GetSysClockFreq+0xb8>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	3301      	adds	r3, #1
 8004218:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b03      	cmp	r3, #3
 800421e:	d10c      	bne.n	800423a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004220:	4a1a      	ldr	r2, [pc, #104]	; (800428c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	4a16      	ldr	r2, [pc, #88]	; (8004284 <HAL_RCC_GetSysClockFreq+0xb8>)
 800422a:	68d2      	ldr	r2, [r2, #12]
 800422c:	0a12      	lsrs	r2, r2, #8
 800422e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	617b      	str	r3, [r7, #20]
      break;
 8004238:	e00c      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800423a:	4a13      	ldr	r2, [pc, #76]	; (8004288 <HAL_RCC_GetSysClockFreq+0xbc>)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004242:	4a10      	ldr	r2, [pc, #64]	; (8004284 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004244:	68d2      	ldr	r2, [r2, #12]
 8004246:	0a12      	lsrs	r2, r2, #8
 8004248:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800424c:	fb02 f303 	mul.w	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]
      break;
 8004252:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	0e5b      	lsrs	r3, r3, #25
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	3301      	adds	r3, #1
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	e001      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004274:	693b      	ldr	r3, [r7, #16]
}
 8004276:	4618      	mov	r0, r3
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000
 8004288:	00f42400 	.word	0x00f42400
 800428c:	016e3600 	.word	0x016e3600

08004290 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004294:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004296:	681b      	ldr	r3, [r3, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000000 	.word	0x20000000

080042a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042ac:	f7ff fff0 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4904      	ldr	r1, [pc, #16]	; (80042d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40021000 	.word	0x40021000
 80042d0:	08006c4c 	.word	0x08006c4c

080042d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042d8:	f7ff ffda 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	0adb      	lsrs	r3, r3, #11
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	4904      	ldr	r1, [pc, #16]	; (80042fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80042ea:	5ccb      	ldrb	r3, [r1, r3]
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40021000 	.word	0x40021000
 80042fc:	08006c4c 	.word	0x08006c4c

08004300 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004306:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	091b      	lsrs	r3, r3, #4
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	3301      	adds	r3, #1
 800431c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d10c      	bne.n	800433e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004324:	4a17      	ldr	r2, [pc, #92]	; (8004384 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	4a14      	ldr	r2, [pc, #80]	; (8004380 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800432e:	68d2      	ldr	r2, [r2, #12]
 8004330:	0a12      	lsrs	r2, r2, #8
 8004332:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	617b      	str	r3, [r7, #20]
    break;
 800433c:	e00c      	b.n	8004358 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800433e:	4a12      	ldr	r2, [pc, #72]	; (8004388 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	fbb2 f3f3 	udiv	r3, r2, r3
 8004346:	4a0e      	ldr	r2, [pc, #56]	; (8004380 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004348:	68d2      	ldr	r2, [r2, #12]
 800434a:	0a12      	lsrs	r2, r2, #8
 800434c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004350:	fb02 f303 	mul.w	r3, r2, r3
 8004354:	617b      	str	r3, [r7, #20]
    break;
 8004356:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	0e5b      	lsrs	r3, r3, #25
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	3301      	adds	r3, #1
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004372:	687b      	ldr	r3, [r7, #4]
}
 8004374:	4618      	mov	r0, r3
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	40021000 	.word	0x40021000
 8004384:	016e3600 	.word	0x016e3600
 8004388:	00f42400 	.word	0x00f42400

0800438c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004394:	2300      	movs	r3, #0
 8004396:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004398:	2300      	movs	r3, #0
 800439a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8098 	beq.w	80044da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043aa:	2300      	movs	r3, #0
 80043ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ae:	4b43      	ldr	r3, [pc, #268]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10d      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ba:	4b40      	ldr	r3, [pc, #256]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	4a3f      	ldr	r2, [pc, #252]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c4:	6593      	str	r3, [r2, #88]	; 0x58
 80043c6:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ce:	60bb      	str	r3, [r7, #8]
 80043d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d2:	2301      	movs	r3, #1
 80043d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043d6:	4b3a      	ldr	r3, [pc, #232]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a39      	ldr	r2, [pc, #228]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043e2:	f7fc fd6f 	bl	8000ec4 <HAL_GetTick>
 80043e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043e8:	e009      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ea:	f7fc fd6b 	bl	8000ec4 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d902      	bls.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	74fb      	strb	r3, [r7, #19]
        break;
 80043fc:	e005      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043fe:	4b30      	ldr	r3, [pc, #192]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0ef      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800440a:	7cfb      	ldrb	r3, [r7, #19]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d159      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004410:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01e      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	429a      	cmp	r2, r3
 800442a:	d019      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800442c:	4b23      	ldr	r3, [pc, #140]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004436:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004438:	4b20      	ldr	r3, [pc, #128]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	4a1f      	ldr	r2, [pc, #124]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004448:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444e:	4a1b      	ldr	r2, [pc, #108]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004458:	4a18      	ldr	r2, [pc, #96]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d016      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446a:	f7fc fd2b 	bl	8000ec4 <HAL_GetTick>
 800446e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004470:	e00b      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004472:	f7fc fd27 	bl	8000ec4 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004480:	4293      	cmp	r3, r2
 8004482:	d902      	bls.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	74fb      	strb	r3, [r7, #19]
            break;
 8004488:	e006      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ec      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004498:	7cfb      	ldrb	r3, [r7, #19]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10b      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800449e:	4b07      	ldr	r3, [pc, #28]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ac:	4903      	ldr	r1, [pc, #12]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044b4:	e008      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044b6:	7cfb      	ldrb	r3, [r7, #19]
 80044b8:	74bb      	strb	r3, [r7, #18]
 80044ba:	e005      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044c8:	7c7b      	ldrb	r3, [r7, #17]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ce:	4ba7      	ldr	r3, [pc, #668]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	4aa6      	ldr	r2, [pc, #664]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044e6:	4ba1      	ldr	r3, [pc, #644]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f023 0203 	bic.w	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	499d      	ldr	r1, [pc, #628]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004508:	4b98      	ldr	r3, [pc, #608]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	f023 020c 	bic.w	r2, r3, #12
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	4995      	ldr	r1, [pc, #596]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800452a:	4b90      	ldr	r3, [pc, #576]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	498c      	ldr	r1, [pc, #560]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800454c:	4b87      	ldr	r3, [pc, #540]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	4984      	ldr	r1, [pc, #528]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800456e:	4b7f      	ldr	r3, [pc, #508]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	497b      	ldr	r1, [pc, #492]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004590:	4b76      	ldr	r3, [pc, #472]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	4973      	ldr	r1, [pc, #460]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045b2:	4b6e      	ldr	r3, [pc, #440]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	496a      	ldr	r1, [pc, #424]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045d4:	4b65      	ldr	r3, [pc, #404]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	4962      	ldr	r1, [pc, #392]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045f6:	4b5d      	ldr	r3, [pc, #372]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	4959      	ldr	r1, [pc, #356]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004618:	4b54      	ldr	r3, [pc, #336]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800461a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800461e:	f023 0203 	bic.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	4951      	ldr	r1, [pc, #324]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800463a:	4b4c      	ldr	r3, [pc, #304]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	4948      	ldr	r1, [pc, #288]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004658:	2b00      	cmp	r3, #0
 800465a:	d015      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800465c:	4b43      	ldr	r3, [pc, #268]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	4940      	ldr	r1, [pc, #256]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800467a:	d105      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800467c:	4b3b      	ldr	r3, [pc, #236]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a3a      	ldr	r2, [pc, #232]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004686:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004690:	2b00      	cmp	r3, #0
 8004692:	d015      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004694:	4b35      	ldr	r3, [pc, #212]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a2:	4932      	ldr	r1, [pc, #200]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b2:	d105      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046b4:	4b2d      	ldr	r3, [pc, #180]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4a2c      	ldr	r2, [pc, #176]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d015      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046cc:	4b27      	ldr	r3, [pc, #156]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	4924      	ldr	r1, [pc, #144]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046ea:	d105      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ec:	4b1f      	ldr	r3, [pc, #124]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4a1e      	ldr	r2, [pc, #120]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d015      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004704:	4b19      	ldr	r3, [pc, #100]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	4916      	ldr	r1, [pc, #88]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004722:	d105      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004724:	4b11      	ldr	r3, [pc, #68]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4a10      	ldr	r2, [pc, #64]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800472a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800472e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d019      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004742:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	4908      	ldr	r1, [pc, #32]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800475a:	d109      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800475c:	4b03      	ldr	r3, [pc, #12]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	4a02      	ldr	r2, [pc, #8]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004766:	60d3      	str	r3, [r2, #12]
 8004768:	e002      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800476a:	bf00      	nop
 800476c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d015      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800477c:	4b29      	ldr	r3, [pc, #164]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004782:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478a:	4926      	ldr	r1, [pc, #152]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800479a:	d105      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800479c:	4b21      	ldr	r3, [pc, #132]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a20      	ldr	r2, [pc, #128]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d015      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80047b4:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c2:	4918      	ldr	r1, [pc, #96]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d2:	d105      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047d4:	4b13      	ldr	r3, [pc, #76]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4a12      	ldr	r2, [pc, #72]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047de:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d015      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047ec:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fa:	490a      	ldr	r1, [pc, #40]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004806:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800480a:	d105      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4a04      	ldr	r2, [pc, #16]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004816:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004818:	7cbb      	ldrb	r3, [r7, #18]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40021000 	.word	0x40021000

08004828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e049      	b.n	80048ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fc f9fc 	bl	8000c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3304      	adds	r3, #4
 8004864:	4619      	mov	r1, r3
 8004866:	4610      	mov	r0, r2
 8004868:	f000 fdc6 	bl	80053f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d001      	beq.n	80048f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e04c      	b.n	800498a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a26      	ldr	r2, [pc, #152]	; (8004998 <HAL_TIM_Base_Start+0xc0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d022      	beq.n	8004948 <HAL_TIM_Base_Start+0x70>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490a:	d01d      	beq.n	8004948 <HAL_TIM_Base_Start+0x70>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a22      	ldr	r2, [pc, #136]	; (800499c <HAL_TIM_Base_Start+0xc4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d018      	beq.n	8004948 <HAL_TIM_Base_Start+0x70>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a21      	ldr	r2, [pc, #132]	; (80049a0 <HAL_TIM_Base_Start+0xc8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d013      	beq.n	8004948 <HAL_TIM_Base_Start+0x70>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <HAL_TIM_Base_Start+0xcc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00e      	beq.n	8004948 <HAL_TIM_Base_Start+0x70>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a1e      	ldr	r2, [pc, #120]	; (80049a8 <HAL_TIM_Base_Start+0xd0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d009      	beq.n	8004948 <HAL_TIM_Base_Start+0x70>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <HAL_TIM_Base_Start+0xd4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d004      	beq.n	8004948 <HAL_TIM_Base_Start+0x70>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1b      	ldr	r2, [pc, #108]	; (80049b0 <HAL_TIM_Base_Start+0xd8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d115      	bne.n	8004974 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	4b19      	ldr	r3, [pc, #100]	; (80049b4 <HAL_TIM_Base_Start+0xdc>)
 8004950:	4013      	ands	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b06      	cmp	r3, #6
 8004958:	d015      	beq.n	8004986 <HAL_TIM_Base_Start+0xae>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004960:	d011      	beq.n	8004986 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0201 	orr.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004972:	e008      	b.n	8004986 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e000      	b.n	8004988 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004986:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40012c00 	.word	0x40012c00
 800499c:	40000400 	.word	0x40000400
 80049a0:	40000800 	.word	0x40000800
 80049a4:	40000c00 	.word	0x40000c00
 80049a8:	40013400 	.word	0x40013400
 80049ac:	40014000 	.word	0x40014000
 80049b0:	40015000 	.word	0x40015000
 80049b4:	00010007 	.word	0x00010007

080049b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e049      	b.n	8004a5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f841 	bl	8004a66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f000 fcfe 	bl	80053f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d109      	bne.n	8004aa0 <HAL_TIM_PWM_Start+0x24>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	bf14      	ite	ne
 8004a98:	2301      	movne	r3, #1
 8004a9a:	2300      	moveq	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	e03c      	b.n	8004b1a <HAL_TIM_PWM_Start+0x9e>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d109      	bne.n	8004aba <HAL_TIM_PWM_Start+0x3e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	bf14      	ite	ne
 8004ab2:	2301      	movne	r3, #1
 8004ab4:	2300      	moveq	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	e02f      	b.n	8004b1a <HAL_TIM_PWM_Start+0x9e>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d109      	bne.n	8004ad4 <HAL_TIM_PWM_Start+0x58>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	bf14      	ite	ne
 8004acc:	2301      	movne	r3, #1
 8004ace:	2300      	moveq	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	e022      	b.n	8004b1a <HAL_TIM_PWM_Start+0x9e>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b0c      	cmp	r3, #12
 8004ad8:	d109      	bne.n	8004aee <HAL_TIM_PWM_Start+0x72>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	bf14      	ite	ne
 8004ae6:	2301      	movne	r3, #1
 8004ae8:	2300      	moveq	r3, #0
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	e015      	b.n	8004b1a <HAL_TIM_PWM_Start+0x9e>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d109      	bne.n	8004b08 <HAL_TIM_PWM_Start+0x8c>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	bf14      	ite	ne
 8004b00:	2301      	movne	r3, #1
 8004b02:	2300      	moveq	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	e008      	b.n	8004b1a <HAL_TIM_PWM_Start+0x9e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e0a6      	b.n	8004c70 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d104      	bne.n	8004b32 <HAL_TIM_PWM_Start+0xb6>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b30:	e023      	b.n	8004b7a <HAL_TIM_PWM_Start+0xfe>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d104      	bne.n	8004b42 <HAL_TIM_PWM_Start+0xc6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b40:	e01b      	b.n	8004b7a <HAL_TIM_PWM_Start+0xfe>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d104      	bne.n	8004b52 <HAL_TIM_PWM_Start+0xd6>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b50:	e013      	b.n	8004b7a <HAL_TIM_PWM_Start+0xfe>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b0c      	cmp	r3, #12
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_PWM_Start+0xe6>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b60:	e00b      	b.n	8004b7a <HAL_TIM_PWM_Start+0xfe>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_PWM_Start+0xf6>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b70:	e003      	b.n	8004b7a <HAL_TIM_PWM_Start+0xfe>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2202      	movs	r2, #2
 8004b76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	6839      	ldr	r1, [r7, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 f8b2 	bl	8005cec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a3a      	ldr	r2, [pc, #232]	; (8004c78 <HAL_TIM_PWM_Start+0x1fc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d018      	beq.n	8004bc4 <HAL_TIM_PWM_Start+0x148>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a39      	ldr	r2, [pc, #228]	; (8004c7c <HAL_TIM_PWM_Start+0x200>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d013      	beq.n	8004bc4 <HAL_TIM_PWM_Start+0x148>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a37      	ldr	r2, [pc, #220]	; (8004c80 <HAL_TIM_PWM_Start+0x204>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00e      	beq.n	8004bc4 <HAL_TIM_PWM_Start+0x148>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a36      	ldr	r2, [pc, #216]	; (8004c84 <HAL_TIM_PWM_Start+0x208>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d009      	beq.n	8004bc4 <HAL_TIM_PWM_Start+0x148>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a34      	ldr	r2, [pc, #208]	; (8004c88 <HAL_TIM_PWM_Start+0x20c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d004      	beq.n	8004bc4 <HAL_TIM_PWM_Start+0x148>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a33      	ldr	r2, [pc, #204]	; (8004c8c <HAL_TIM_PWM_Start+0x210>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d101      	bne.n	8004bc8 <HAL_TIM_PWM_Start+0x14c>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <HAL_TIM_PWM_Start+0x14e>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a25      	ldr	r2, [pc, #148]	; (8004c78 <HAL_TIM_PWM_Start+0x1fc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d022      	beq.n	8004c2e <HAL_TIM_PWM_Start+0x1b2>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf0:	d01d      	beq.n	8004c2e <HAL_TIM_PWM_Start+0x1b2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a26      	ldr	r2, [pc, #152]	; (8004c90 <HAL_TIM_PWM_Start+0x214>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d018      	beq.n	8004c2e <HAL_TIM_PWM_Start+0x1b2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a24      	ldr	r2, [pc, #144]	; (8004c94 <HAL_TIM_PWM_Start+0x218>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d013      	beq.n	8004c2e <HAL_TIM_PWM_Start+0x1b2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a23      	ldr	r2, [pc, #140]	; (8004c98 <HAL_TIM_PWM_Start+0x21c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00e      	beq.n	8004c2e <HAL_TIM_PWM_Start+0x1b2>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a19      	ldr	r2, [pc, #100]	; (8004c7c <HAL_TIM_PWM_Start+0x200>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d009      	beq.n	8004c2e <HAL_TIM_PWM_Start+0x1b2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <HAL_TIM_PWM_Start+0x204>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d004      	beq.n	8004c2e <HAL_TIM_PWM_Start+0x1b2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a18      	ldr	r2, [pc, #96]	; (8004c8c <HAL_TIM_PWM_Start+0x210>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d115      	bne.n	8004c5a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	4b19      	ldr	r3, [pc, #100]	; (8004c9c <HAL_TIM_PWM_Start+0x220>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b06      	cmp	r3, #6
 8004c3e:	d015      	beq.n	8004c6c <HAL_TIM_PWM_Start+0x1f0>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c46:	d011      	beq.n	8004c6c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c58:	e008      	b.n	8004c6c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0201 	orr.w	r2, r2, #1
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	e000      	b.n	8004c6e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	40013400 	.word	0x40013400
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40014400 	.word	0x40014400
 8004c88:	40014800 	.word	0x40014800
 8004c8c:	40015000 	.word	0x40015000
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40000800 	.word	0x40000800
 8004c98:	40000c00 	.word	0x40000c00
 8004c9c:	00010007 	.word	0x00010007

08004ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d020      	beq.n	8004d04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01b      	beq.n	8004d04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0202 	mvn.w	r2, #2
 8004cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fb66 	bl	80053bc <HAL_TIM_IC_CaptureCallback>
 8004cf0:	e005      	b.n	8004cfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fb58 	bl	80053a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fb69 	bl	80053d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d020      	beq.n	8004d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01b      	beq.n	8004d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0204 	mvn.w	r2, #4
 8004d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2202      	movs	r2, #2
 8004d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fb40 	bl	80053bc <HAL_TIM_IC_CaptureCallback>
 8004d3c:	e005      	b.n	8004d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fb32 	bl	80053a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fb43 	bl	80053d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d020      	beq.n	8004d9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01b      	beq.n	8004d9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0208 	mvn.w	r2, #8
 8004d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2204      	movs	r2, #4
 8004d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fb1a 	bl	80053bc <HAL_TIM_IC_CaptureCallback>
 8004d88:	e005      	b.n	8004d96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fb0c 	bl	80053a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fb1d 	bl	80053d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d020      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01b      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0210 	mvn.w	r2, #16
 8004db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 faf4 	bl	80053bc <HAL_TIM_IC_CaptureCallback>
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fae6 	bl	80053a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 faf7 	bl	80053d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00c      	beq.n	8004e0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0201 	mvn.w	r2, #1
 8004e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fac4 	bl	8005394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d104      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00c      	beq.n	8004e3a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d007      	beq.n	8004e3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f001 f81f 	bl	8005e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00c      	beq.n	8004e5e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f001 f817 	bl	8005e8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00c      	beq.n	8004e82 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d007      	beq.n	8004e82 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fab1 	bl	80053e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00c      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f06f 0220 	mvn.w	r2, #32
 8004e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 ffdf 	bl	8005e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00c      	beq.n	8004eca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d007      	beq.n	8004eca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 ffeb 	bl	8005ea0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00c      	beq.n	8004eee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d007      	beq.n	8004eee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 ffe3 	bl	8005eb4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00c      	beq.n	8004f12 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d007      	beq.n	8004f12 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 ffdb 	bl	8005ec8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00c      	beq.n	8004f36 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d007      	beq.n	8004f36 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 ffd3 	bl	8005edc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e0ff      	b.n	800515e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b14      	cmp	r3, #20
 8004f6a:	f200 80f0 	bhi.w	800514e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f6e:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004fc9 	.word	0x08004fc9
 8004f78:	0800514f 	.word	0x0800514f
 8004f7c:	0800514f 	.word	0x0800514f
 8004f80:	0800514f 	.word	0x0800514f
 8004f84:	08005009 	.word	0x08005009
 8004f88:	0800514f 	.word	0x0800514f
 8004f8c:	0800514f 	.word	0x0800514f
 8004f90:	0800514f 	.word	0x0800514f
 8004f94:	0800504b 	.word	0x0800504b
 8004f98:	0800514f 	.word	0x0800514f
 8004f9c:	0800514f 	.word	0x0800514f
 8004fa0:	0800514f 	.word	0x0800514f
 8004fa4:	0800508b 	.word	0x0800508b
 8004fa8:	0800514f 	.word	0x0800514f
 8004fac:	0800514f 	.word	0x0800514f
 8004fb0:	0800514f 	.word	0x0800514f
 8004fb4:	080050cd 	.word	0x080050cd
 8004fb8:	0800514f 	.word	0x0800514f
 8004fbc:	0800514f 	.word	0x0800514f
 8004fc0:	0800514f 	.word	0x0800514f
 8004fc4:	0800510d 	.word	0x0800510d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fac6 	bl	8005560 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0208 	orr.w	r2, r2, #8
 8004fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0204 	bic.w	r2, r2, #4
 8004ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6999      	ldr	r1, [r3, #24]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	619a      	str	r2, [r3, #24]
      break;
 8005006:	e0a5      	b.n	8005154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fb40 	bl	8005694 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6999      	ldr	r1, [r3, #24]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	021a      	lsls	r2, r3, #8
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	619a      	str	r2, [r3, #24]
      break;
 8005048:	e084      	b.n	8005154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fbb3 	bl	80057bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0208 	orr.w	r2, r2, #8
 8005064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0204 	bic.w	r2, r2, #4
 8005074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69d9      	ldr	r1, [r3, #28]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	61da      	str	r2, [r3, #28]
      break;
 8005088:	e064      	b.n	8005154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fc25 	bl	80058e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69d9      	ldr	r1, [r3, #28]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	021a      	lsls	r2, r3, #8
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	61da      	str	r2, [r3, #28]
      break;
 80050ca:	e043      	b.n	8005154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fc98 	bl	8005a08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0208 	orr.w	r2, r2, #8
 80050e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0204 	bic.w	r2, r2, #4
 80050f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800510a:	e023      	b.n	8005154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fce2 	bl	8005adc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005126:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005136:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	021a      	lsls	r2, r3, #8
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800514c:	e002      	b.n	8005154 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	75fb      	strb	r3, [r7, #23]
      break;
 8005152:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800515c:	7dfb      	ldrb	r3, [r7, #23]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop

08005168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_TIM_ConfigClockSource+0x1c>
 8005180:	2302      	movs	r3, #2
 8005182:	e0f6      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x20a>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80051a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a6f      	ldr	r2, [pc, #444]	; (800537c <HAL_TIM_ConfigClockSource+0x214>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	f000 80c1 	beq.w	8005346 <HAL_TIM_ConfigClockSource+0x1de>
 80051c4:	4a6d      	ldr	r2, [pc, #436]	; (800537c <HAL_TIM_ConfigClockSource+0x214>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	f200 80c6 	bhi.w	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 80051cc:	4a6c      	ldr	r2, [pc, #432]	; (8005380 <HAL_TIM_ConfigClockSource+0x218>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	f000 80b9 	beq.w	8005346 <HAL_TIM_ConfigClockSource+0x1de>
 80051d4:	4a6a      	ldr	r2, [pc, #424]	; (8005380 <HAL_TIM_ConfigClockSource+0x218>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	f200 80be 	bhi.w	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 80051dc:	4a69      	ldr	r2, [pc, #420]	; (8005384 <HAL_TIM_ConfigClockSource+0x21c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	f000 80b1 	beq.w	8005346 <HAL_TIM_ConfigClockSource+0x1de>
 80051e4:	4a67      	ldr	r2, [pc, #412]	; (8005384 <HAL_TIM_ConfigClockSource+0x21c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	f200 80b6 	bhi.w	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 80051ec:	4a66      	ldr	r2, [pc, #408]	; (8005388 <HAL_TIM_ConfigClockSource+0x220>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	f000 80a9 	beq.w	8005346 <HAL_TIM_ConfigClockSource+0x1de>
 80051f4:	4a64      	ldr	r2, [pc, #400]	; (8005388 <HAL_TIM_ConfigClockSource+0x220>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	f200 80ae 	bhi.w	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 80051fc:	4a63      	ldr	r2, [pc, #396]	; (800538c <HAL_TIM_ConfigClockSource+0x224>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	f000 80a1 	beq.w	8005346 <HAL_TIM_ConfigClockSource+0x1de>
 8005204:	4a61      	ldr	r2, [pc, #388]	; (800538c <HAL_TIM_ConfigClockSource+0x224>)
 8005206:	4293      	cmp	r3, r2
 8005208:	f200 80a6 	bhi.w	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 800520c:	4a60      	ldr	r2, [pc, #384]	; (8005390 <HAL_TIM_ConfigClockSource+0x228>)
 800520e:	4293      	cmp	r3, r2
 8005210:	f000 8099 	beq.w	8005346 <HAL_TIM_ConfigClockSource+0x1de>
 8005214:	4a5e      	ldr	r2, [pc, #376]	; (8005390 <HAL_TIM_ConfigClockSource+0x228>)
 8005216:	4293      	cmp	r3, r2
 8005218:	f200 809e 	bhi.w	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 800521c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005220:	f000 8091 	beq.w	8005346 <HAL_TIM_ConfigClockSource+0x1de>
 8005224:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005228:	f200 8096 	bhi.w	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 800522c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005230:	f000 8089 	beq.w	8005346 <HAL_TIM_ConfigClockSource+0x1de>
 8005234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005238:	f200 808e 	bhi.w	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 800523c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005240:	d03e      	beq.n	80052c0 <HAL_TIM_ConfigClockSource+0x158>
 8005242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005246:	f200 8087 	bhi.w	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 800524a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524e:	f000 8086 	beq.w	800535e <HAL_TIM_ConfigClockSource+0x1f6>
 8005252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005256:	d87f      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 8005258:	2b70      	cmp	r3, #112	; 0x70
 800525a:	d01a      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x12a>
 800525c:	2b70      	cmp	r3, #112	; 0x70
 800525e:	d87b      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 8005260:	2b60      	cmp	r3, #96	; 0x60
 8005262:	d050      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x19e>
 8005264:	2b60      	cmp	r3, #96	; 0x60
 8005266:	d877      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 8005268:	2b50      	cmp	r3, #80	; 0x50
 800526a:	d03c      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0x17e>
 800526c:	2b50      	cmp	r3, #80	; 0x50
 800526e:	d873      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d058      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0x1be>
 8005274:	2b40      	cmp	r3, #64	; 0x40
 8005276:	d86f      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 8005278:	2b30      	cmp	r3, #48	; 0x30
 800527a:	d064      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x1de>
 800527c:	2b30      	cmp	r3, #48	; 0x30
 800527e:	d86b      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 8005280:	2b20      	cmp	r3, #32
 8005282:	d060      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x1de>
 8005284:	2b20      	cmp	r3, #32
 8005286:	d867      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d05c      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x1de>
 800528c:	2b10      	cmp	r3, #16
 800528e:	d05a      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x1de>
 8005290:	e062      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052a2:	f000 fd03 	bl	8005cac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	609a      	str	r2, [r3, #8]
      break;
 80052be:	e04f      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052d0:	f000 fcec 	bl	8005cac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052e2:	609a      	str	r2, [r3, #8]
      break;
 80052e4:	e03c      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f2:	461a      	mov	r2, r3
 80052f4:	f000 fc5e 	bl	8005bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2150      	movs	r1, #80	; 0x50
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fcb7 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 8005304:	e02c      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005312:	461a      	mov	r2, r3
 8005314:	f000 fc7d 	bl	8005c12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2160      	movs	r1, #96	; 0x60
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fca7 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 8005324:	e01c      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005332:	461a      	mov	r2, r3
 8005334:	f000 fc3e 	bl	8005bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2140      	movs	r1, #64	; 0x40
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fc97 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 8005344:	e00c      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f000 fc8e 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 8005356:	e003      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
      break;
 800535c:	e000      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800535e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005370:	7bfb      	ldrb	r3, [r7, #15]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	00100070 	.word	0x00100070
 8005380:	00100060 	.word	0x00100060
 8005384:	00100050 	.word	0x00100050
 8005388:	00100040 	.word	0x00100040
 800538c:	00100030 	.word	0x00100030
 8005390:	00100020 	.word	0x00100020

08005394 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a4c      	ldr	r2, [pc, #304]	; (800553c <TIM_Base_SetConfig+0x144>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d017      	beq.n	8005440 <TIM_Base_SetConfig+0x48>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005416:	d013      	beq.n	8005440 <TIM_Base_SetConfig+0x48>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a49      	ldr	r2, [pc, #292]	; (8005540 <TIM_Base_SetConfig+0x148>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00f      	beq.n	8005440 <TIM_Base_SetConfig+0x48>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a48      	ldr	r2, [pc, #288]	; (8005544 <TIM_Base_SetConfig+0x14c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00b      	beq.n	8005440 <TIM_Base_SetConfig+0x48>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a47      	ldr	r2, [pc, #284]	; (8005548 <TIM_Base_SetConfig+0x150>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d007      	beq.n	8005440 <TIM_Base_SetConfig+0x48>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a46      	ldr	r2, [pc, #280]	; (800554c <TIM_Base_SetConfig+0x154>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_Base_SetConfig+0x48>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a45      	ldr	r2, [pc, #276]	; (8005550 <TIM_Base_SetConfig+0x158>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d108      	bne.n	8005452 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a39      	ldr	r2, [pc, #228]	; (800553c <TIM_Base_SetConfig+0x144>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d023      	beq.n	80054a2 <TIM_Base_SetConfig+0xaa>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005460:	d01f      	beq.n	80054a2 <TIM_Base_SetConfig+0xaa>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a36      	ldr	r2, [pc, #216]	; (8005540 <TIM_Base_SetConfig+0x148>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d01b      	beq.n	80054a2 <TIM_Base_SetConfig+0xaa>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a35      	ldr	r2, [pc, #212]	; (8005544 <TIM_Base_SetConfig+0x14c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d017      	beq.n	80054a2 <TIM_Base_SetConfig+0xaa>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a34      	ldr	r2, [pc, #208]	; (8005548 <TIM_Base_SetConfig+0x150>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d013      	beq.n	80054a2 <TIM_Base_SetConfig+0xaa>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a33      	ldr	r2, [pc, #204]	; (800554c <TIM_Base_SetConfig+0x154>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d00f      	beq.n	80054a2 <TIM_Base_SetConfig+0xaa>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a33      	ldr	r2, [pc, #204]	; (8005554 <TIM_Base_SetConfig+0x15c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00b      	beq.n	80054a2 <TIM_Base_SetConfig+0xaa>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a32      	ldr	r2, [pc, #200]	; (8005558 <TIM_Base_SetConfig+0x160>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d007      	beq.n	80054a2 <TIM_Base_SetConfig+0xaa>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a31      	ldr	r2, [pc, #196]	; (800555c <TIM_Base_SetConfig+0x164>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d003      	beq.n	80054a2 <TIM_Base_SetConfig+0xaa>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a2c      	ldr	r2, [pc, #176]	; (8005550 <TIM_Base_SetConfig+0x158>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d108      	bne.n	80054b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a18      	ldr	r2, [pc, #96]	; (800553c <TIM_Base_SetConfig+0x144>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <TIM_Base_SetConfig+0x110>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a1a      	ldr	r2, [pc, #104]	; (800554c <TIM_Base_SetConfig+0x154>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00f      	beq.n	8005508 <TIM_Base_SetConfig+0x110>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a1a      	ldr	r2, [pc, #104]	; (8005554 <TIM_Base_SetConfig+0x15c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00b      	beq.n	8005508 <TIM_Base_SetConfig+0x110>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a19      	ldr	r2, [pc, #100]	; (8005558 <TIM_Base_SetConfig+0x160>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <TIM_Base_SetConfig+0x110>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a18      	ldr	r2, [pc, #96]	; (800555c <TIM_Base_SetConfig+0x164>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_Base_SetConfig+0x110>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a13      	ldr	r2, [pc, #76]	; (8005550 <TIM_Base_SetConfig+0x158>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d103      	bne.n	8005510 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b01      	cmp	r3, #1
 8005520:	d105      	bne.n	800552e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f023 0201 	bic.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	611a      	str	r2, [r3, #16]
  }
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40012c00 	.word	0x40012c00
 8005540:	40000400 	.word	0x40000400
 8005544:	40000800 	.word	0x40000800
 8005548:	40000c00 	.word	0x40000c00
 800554c:	40013400 	.word	0x40013400
 8005550:	40015000 	.word	0x40015000
 8005554:	40014000 	.word	0x40014000
 8005558:	40014400 	.word	0x40014400
 800555c:	40014800 	.word	0x40014800

08005560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	f023 0201 	bic.w	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0303 	bic.w	r3, r3, #3
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f023 0302 	bic.w	r3, r3, #2
 80055ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a30      	ldr	r2, [pc, #192]	; (800567c <TIM_OC1_SetConfig+0x11c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d013      	beq.n	80055e8 <TIM_OC1_SetConfig+0x88>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a2f      	ldr	r2, [pc, #188]	; (8005680 <TIM_OC1_SetConfig+0x120>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00f      	beq.n	80055e8 <TIM_OC1_SetConfig+0x88>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a2e      	ldr	r2, [pc, #184]	; (8005684 <TIM_OC1_SetConfig+0x124>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00b      	beq.n	80055e8 <TIM_OC1_SetConfig+0x88>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a2d      	ldr	r2, [pc, #180]	; (8005688 <TIM_OC1_SetConfig+0x128>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d007      	beq.n	80055e8 <TIM_OC1_SetConfig+0x88>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a2c      	ldr	r2, [pc, #176]	; (800568c <TIM_OC1_SetConfig+0x12c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d003      	beq.n	80055e8 <TIM_OC1_SetConfig+0x88>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a2b      	ldr	r2, [pc, #172]	; (8005690 <TIM_OC1_SetConfig+0x130>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d10c      	bne.n	8005602 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f023 0308 	bic.w	r3, r3, #8
 80055ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f023 0304 	bic.w	r3, r3, #4
 8005600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a1d      	ldr	r2, [pc, #116]	; (800567c <TIM_OC1_SetConfig+0x11c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d013      	beq.n	8005632 <TIM_OC1_SetConfig+0xd2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a1c      	ldr	r2, [pc, #112]	; (8005680 <TIM_OC1_SetConfig+0x120>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00f      	beq.n	8005632 <TIM_OC1_SetConfig+0xd2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a1b      	ldr	r2, [pc, #108]	; (8005684 <TIM_OC1_SetConfig+0x124>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00b      	beq.n	8005632 <TIM_OC1_SetConfig+0xd2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a1a      	ldr	r2, [pc, #104]	; (8005688 <TIM_OC1_SetConfig+0x128>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d007      	beq.n	8005632 <TIM_OC1_SetConfig+0xd2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a19      	ldr	r2, [pc, #100]	; (800568c <TIM_OC1_SetConfig+0x12c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d003      	beq.n	8005632 <TIM_OC1_SetConfig+0xd2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a18      	ldr	r2, [pc, #96]	; (8005690 <TIM_OC1_SetConfig+0x130>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d111      	bne.n	8005656 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	621a      	str	r2, [r3, #32]
}
 8005670:	bf00      	nop
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	40012c00 	.word	0x40012c00
 8005680:	40013400 	.word	0x40013400
 8005684:	40014000 	.word	0x40014000
 8005688:	40014400 	.word	0x40014400
 800568c:	40014800 	.word	0x40014800
 8005690:	40015000 	.word	0x40015000

08005694 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	f023 0210 	bic.w	r2, r3, #16
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	021b      	lsls	r3, r3, #8
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f023 0320 	bic.w	r3, r3, #32
 80056e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a2c      	ldr	r2, [pc, #176]	; (80057a4 <TIM_OC2_SetConfig+0x110>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d007      	beq.n	8005708 <TIM_OC2_SetConfig+0x74>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a2b      	ldr	r2, [pc, #172]	; (80057a8 <TIM_OC2_SetConfig+0x114>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <TIM_OC2_SetConfig+0x74>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a2a      	ldr	r2, [pc, #168]	; (80057ac <TIM_OC2_SetConfig+0x118>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d10d      	bne.n	8005724 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800570e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005722:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a1f      	ldr	r2, [pc, #124]	; (80057a4 <TIM_OC2_SetConfig+0x110>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d013      	beq.n	8005754 <TIM_OC2_SetConfig+0xc0>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a1e      	ldr	r2, [pc, #120]	; (80057a8 <TIM_OC2_SetConfig+0x114>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00f      	beq.n	8005754 <TIM_OC2_SetConfig+0xc0>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a1e      	ldr	r2, [pc, #120]	; (80057b0 <TIM_OC2_SetConfig+0x11c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00b      	beq.n	8005754 <TIM_OC2_SetConfig+0xc0>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a1d      	ldr	r2, [pc, #116]	; (80057b4 <TIM_OC2_SetConfig+0x120>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d007      	beq.n	8005754 <TIM_OC2_SetConfig+0xc0>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a1c      	ldr	r2, [pc, #112]	; (80057b8 <TIM_OC2_SetConfig+0x124>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_OC2_SetConfig+0xc0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a17      	ldr	r2, [pc, #92]	; (80057ac <TIM_OC2_SetConfig+0x118>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d113      	bne.n	800577c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800575a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4313      	orrs	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	621a      	str	r2, [r3, #32]
}
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40012c00 	.word	0x40012c00
 80057a8:	40013400 	.word	0x40013400
 80057ac:	40015000 	.word	0x40015000
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40014400 	.word	0x40014400
 80057b8:	40014800 	.word	0x40014800

080057bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a2b      	ldr	r2, [pc, #172]	; (80058c8 <TIM_OC3_SetConfig+0x10c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d007      	beq.n	800582e <TIM_OC3_SetConfig+0x72>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a2a      	ldr	r2, [pc, #168]	; (80058cc <TIM_OC3_SetConfig+0x110>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d003      	beq.n	800582e <TIM_OC3_SetConfig+0x72>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a29      	ldr	r2, [pc, #164]	; (80058d0 <TIM_OC3_SetConfig+0x114>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d10d      	bne.n	800584a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005834:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a1e      	ldr	r2, [pc, #120]	; (80058c8 <TIM_OC3_SetConfig+0x10c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d013      	beq.n	800587a <TIM_OC3_SetConfig+0xbe>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a1d      	ldr	r2, [pc, #116]	; (80058cc <TIM_OC3_SetConfig+0x110>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00f      	beq.n	800587a <TIM_OC3_SetConfig+0xbe>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a1d      	ldr	r2, [pc, #116]	; (80058d4 <TIM_OC3_SetConfig+0x118>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00b      	beq.n	800587a <TIM_OC3_SetConfig+0xbe>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a1c      	ldr	r2, [pc, #112]	; (80058d8 <TIM_OC3_SetConfig+0x11c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d007      	beq.n	800587a <TIM_OC3_SetConfig+0xbe>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a1b      	ldr	r2, [pc, #108]	; (80058dc <TIM_OC3_SetConfig+0x120>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_OC3_SetConfig+0xbe>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a16      	ldr	r2, [pc, #88]	; (80058d0 <TIM_OC3_SetConfig+0x114>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d113      	bne.n	80058a2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	621a      	str	r2, [r3, #32]
}
 80058bc:	bf00      	nop
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40013400 	.word	0x40013400
 80058d0:	40015000 	.word	0x40015000
 80058d4:	40014000 	.word	0x40014000
 80058d8:	40014400 	.word	0x40014400
 80058dc:	40014800 	.word	0x40014800

080058e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800590e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800591a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800592e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	031b      	lsls	r3, r3, #12
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a2c      	ldr	r2, [pc, #176]	; (80059f0 <TIM_OC4_SetConfig+0x110>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d007      	beq.n	8005954 <TIM_OC4_SetConfig+0x74>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a2b      	ldr	r2, [pc, #172]	; (80059f4 <TIM_OC4_SetConfig+0x114>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_OC4_SetConfig+0x74>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a2a      	ldr	r2, [pc, #168]	; (80059f8 <TIM_OC4_SetConfig+0x118>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d10d      	bne.n	8005970 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800595a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	031b      	lsls	r3, r3, #12
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800596e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <TIM_OC4_SetConfig+0x110>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d013      	beq.n	80059a0 <TIM_OC4_SetConfig+0xc0>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a1e      	ldr	r2, [pc, #120]	; (80059f4 <TIM_OC4_SetConfig+0x114>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00f      	beq.n	80059a0 <TIM_OC4_SetConfig+0xc0>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a1e      	ldr	r2, [pc, #120]	; (80059fc <TIM_OC4_SetConfig+0x11c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00b      	beq.n	80059a0 <TIM_OC4_SetConfig+0xc0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a1d      	ldr	r2, [pc, #116]	; (8005a00 <TIM_OC4_SetConfig+0x120>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d007      	beq.n	80059a0 <TIM_OC4_SetConfig+0xc0>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a1c      	ldr	r2, [pc, #112]	; (8005a04 <TIM_OC4_SetConfig+0x124>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <TIM_OC4_SetConfig+0xc0>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a17      	ldr	r2, [pc, #92]	; (80059f8 <TIM_OC4_SetConfig+0x118>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d113      	bne.n	80059c8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	019b      	lsls	r3, r3, #6
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	019b      	lsls	r3, r3, #6
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	621a      	str	r2, [r3, #32]
}
 80059e2:	bf00      	nop
 80059e4:	371c      	adds	r7, #28
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	40012c00 	.word	0x40012c00
 80059f4:	40013400 	.word	0x40013400
 80059f8:	40015000 	.word	0x40015000
 80059fc:	40014000 	.word	0x40014000
 8005a00:	40014400 	.word	0x40014400
 8005a04:	40014800 	.word	0x40014800

08005a08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	041b      	lsls	r3, r3, #16
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a19      	ldr	r2, [pc, #100]	; (8005ac4 <TIM_OC5_SetConfig+0xbc>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <TIM_OC5_SetConfig+0x82>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a18      	ldr	r2, [pc, #96]	; (8005ac8 <TIM_OC5_SetConfig+0xc0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00f      	beq.n	8005a8a <TIM_OC5_SetConfig+0x82>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a17      	ldr	r2, [pc, #92]	; (8005acc <TIM_OC5_SetConfig+0xc4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00b      	beq.n	8005a8a <TIM_OC5_SetConfig+0x82>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a16      	ldr	r2, [pc, #88]	; (8005ad0 <TIM_OC5_SetConfig+0xc8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d007      	beq.n	8005a8a <TIM_OC5_SetConfig+0x82>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a15      	ldr	r2, [pc, #84]	; (8005ad4 <TIM_OC5_SetConfig+0xcc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d003      	beq.n	8005a8a <TIM_OC5_SetConfig+0x82>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a14      	ldr	r2, [pc, #80]	; (8005ad8 <TIM_OC5_SetConfig+0xd0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d109      	bne.n	8005a9e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	621a      	str	r2, [r3, #32]
}
 8005ab8:	bf00      	nop
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	40012c00 	.word	0x40012c00
 8005ac8:	40013400 	.word	0x40013400
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40014400 	.word	0x40014400
 8005ad4:	40014800 	.word	0x40014800
 8005ad8:	40015000 	.word	0x40015000

08005adc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	021b      	lsls	r3, r3, #8
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	051b      	lsls	r3, r3, #20
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a1a      	ldr	r2, [pc, #104]	; (8005b9c <TIM_OC6_SetConfig+0xc0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d013      	beq.n	8005b60 <TIM_OC6_SetConfig+0x84>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a19      	ldr	r2, [pc, #100]	; (8005ba0 <TIM_OC6_SetConfig+0xc4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00f      	beq.n	8005b60 <TIM_OC6_SetConfig+0x84>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <TIM_OC6_SetConfig+0xc8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00b      	beq.n	8005b60 <TIM_OC6_SetConfig+0x84>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a17      	ldr	r2, [pc, #92]	; (8005ba8 <TIM_OC6_SetConfig+0xcc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d007      	beq.n	8005b60 <TIM_OC6_SetConfig+0x84>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a16      	ldr	r2, [pc, #88]	; (8005bac <TIM_OC6_SetConfig+0xd0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d003      	beq.n	8005b60 <TIM_OC6_SetConfig+0x84>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a15      	ldr	r2, [pc, #84]	; (8005bb0 <TIM_OC6_SetConfig+0xd4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d109      	bne.n	8005b74 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	029b      	lsls	r3, r3, #10
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40013400 	.word	0x40013400
 8005ba4:	40014000 	.word	0x40014000
 8005ba8:	40014400 	.word	0x40014400
 8005bac:	40014800 	.word	0x40014800
 8005bb0:	40015000 	.word	0x40015000

08005bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f023 0201 	bic.w	r2, r3, #1
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f023 030a 	bic.w	r3, r3, #10
 8005bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	621a      	str	r2, [r3, #32]
}
 8005c06:	bf00      	nop
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b087      	sub	sp, #28
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	f023 0210 	bic.w	r2, r3, #16
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	031b      	lsls	r3, r3, #12
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f043 0307 	orr.w	r3, r3, #7
 8005c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	609a      	str	r2, [r3, #8]
}
 8005ca0:	bf00      	nop
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	021a      	lsls	r2, r3, #8
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	609a      	str	r2, [r3, #8]
}
 8005ce0:	bf00      	nop
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	2201      	movs	r2, #1
 8005d00:	fa02 f303 	lsl.w	r3, r2, r3
 8005d04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a1a      	ldr	r2, [r3, #32]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	401a      	ands	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a1a      	ldr	r2, [r3, #32]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f003 031f 	and.w	r3, r3, #31
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	fa01 f303 	lsl.w	r3, r1, r3
 8005d24:	431a      	orrs	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
	...

08005d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e074      	b.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a34      	ldr	r2, [pc, #208]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d009      	beq.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a33      	ldr	r2, [pc, #204]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d004      	beq.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a31      	ldr	r2, [pc, #196]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d108      	bne.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a21      	ldr	r2, [pc, #132]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d022      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd0:	d01d      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1f      	ldr	r2, [pc, #124]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d018      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1d      	ldr	r2, [pc, #116]	; (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a1c      	ldr	r2, [pc, #112]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00e      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a15      	ldr	r2, [pc, #84]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d009      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a18      	ldr	r2, [pc, #96]	; (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d004      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a11      	ldr	r2, [pc, #68]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d10c      	bne.n	8005e28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40012c00 	.word	0x40012c00
 8005e4c:	40013400 	.word	0x40013400
 8005e50:	40015000 	.word	0x40015000
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800
 8005e5c:	40000c00 	.word	0x40000c00
 8005e60:	40014000 	.word	0x40014000

08005e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e042      	b.n	8005f88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d106      	bne.n	8005f1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7fa fe41 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2224      	movs	r2, #36	; 0x24
 8005f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0201 	bic.w	r2, r2, #1
 8005f30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fb24 	bl	8006588 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f825 	bl	8005f90 <UART_SetConfig>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e01b      	b.n	8005f88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0201 	orr.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fba3 	bl	80066cc <UART_CheckIdleState>
 8005f86:	4603      	mov	r3, r0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f94:	b08c      	sub	sp, #48	; 0x30
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	4baa      	ldr	r3, [pc, #680]	; (8006268 <UART_SetConfig+0x2d8>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	6812      	ldr	r2, [r2, #0]
 8005fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a9f      	ldr	r2, [pc, #636]	; (800626c <UART_SetConfig+0x2dc>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d004      	beq.n	8005ffc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006006:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	6812      	ldr	r2, [r2, #0]
 800600e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006010:	430b      	orrs	r3, r1
 8006012:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	f023 010f 	bic.w	r1, r3, #15
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a90      	ldr	r2, [pc, #576]	; (8006270 <UART_SetConfig+0x2e0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d125      	bne.n	8006080 <UART_SetConfig+0xf0>
 8006034:	4b8f      	ldr	r3, [pc, #572]	; (8006274 <UART_SetConfig+0x2e4>)
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	2b03      	cmp	r3, #3
 8006040:	d81a      	bhi.n	8006078 <UART_SetConfig+0xe8>
 8006042:	a201      	add	r2, pc, #4	; (adr r2, 8006048 <UART_SetConfig+0xb8>)
 8006044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006048:	08006059 	.word	0x08006059
 800604c:	08006069 	.word	0x08006069
 8006050:	08006061 	.word	0x08006061
 8006054:	08006071 	.word	0x08006071
 8006058:	2301      	movs	r3, #1
 800605a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800605e:	e116      	b.n	800628e <UART_SetConfig+0x2fe>
 8006060:	2302      	movs	r3, #2
 8006062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006066:	e112      	b.n	800628e <UART_SetConfig+0x2fe>
 8006068:	2304      	movs	r3, #4
 800606a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800606e:	e10e      	b.n	800628e <UART_SetConfig+0x2fe>
 8006070:	2308      	movs	r3, #8
 8006072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006076:	e10a      	b.n	800628e <UART_SetConfig+0x2fe>
 8006078:	2310      	movs	r3, #16
 800607a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800607e:	e106      	b.n	800628e <UART_SetConfig+0x2fe>
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a7c      	ldr	r2, [pc, #496]	; (8006278 <UART_SetConfig+0x2e8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d138      	bne.n	80060fc <UART_SetConfig+0x16c>
 800608a:	4b7a      	ldr	r3, [pc, #488]	; (8006274 <UART_SetConfig+0x2e4>)
 800608c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006090:	f003 030c 	and.w	r3, r3, #12
 8006094:	2b0c      	cmp	r3, #12
 8006096:	d82d      	bhi.n	80060f4 <UART_SetConfig+0x164>
 8006098:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <UART_SetConfig+0x110>)
 800609a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609e:	bf00      	nop
 80060a0:	080060d5 	.word	0x080060d5
 80060a4:	080060f5 	.word	0x080060f5
 80060a8:	080060f5 	.word	0x080060f5
 80060ac:	080060f5 	.word	0x080060f5
 80060b0:	080060e5 	.word	0x080060e5
 80060b4:	080060f5 	.word	0x080060f5
 80060b8:	080060f5 	.word	0x080060f5
 80060bc:	080060f5 	.word	0x080060f5
 80060c0:	080060dd 	.word	0x080060dd
 80060c4:	080060f5 	.word	0x080060f5
 80060c8:	080060f5 	.word	0x080060f5
 80060cc:	080060f5 	.word	0x080060f5
 80060d0:	080060ed 	.word	0x080060ed
 80060d4:	2300      	movs	r3, #0
 80060d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060da:	e0d8      	b.n	800628e <UART_SetConfig+0x2fe>
 80060dc:	2302      	movs	r3, #2
 80060de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060e2:	e0d4      	b.n	800628e <UART_SetConfig+0x2fe>
 80060e4:	2304      	movs	r3, #4
 80060e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ea:	e0d0      	b.n	800628e <UART_SetConfig+0x2fe>
 80060ec:	2308      	movs	r3, #8
 80060ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060f2:	e0cc      	b.n	800628e <UART_SetConfig+0x2fe>
 80060f4:	2310      	movs	r3, #16
 80060f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060fa:	e0c8      	b.n	800628e <UART_SetConfig+0x2fe>
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a5e      	ldr	r2, [pc, #376]	; (800627c <UART_SetConfig+0x2ec>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d125      	bne.n	8006152 <UART_SetConfig+0x1c2>
 8006106:	4b5b      	ldr	r3, [pc, #364]	; (8006274 <UART_SetConfig+0x2e4>)
 8006108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006110:	2b30      	cmp	r3, #48	; 0x30
 8006112:	d016      	beq.n	8006142 <UART_SetConfig+0x1b2>
 8006114:	2b30      	cmp	r3, #48	; 0x30
 8006116:	d818      	bhi.n	800614a <UART_SetConfig+0x1ba>
 8006118:	2b20      	cmp	r3, #32
 800611a:	d00a      	beq.n	8006132 <UART_SetConfig+0x1a2>
 800611c:	2b20      	cmp	r3, #32
 800611e:	d814      	bhi.n	800614a <UART_SetConfig+0x1ba>
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <UART_SetConfig+0x19a>
 8006124:	2b10      	cmp	r3, #16
 8006126:	d008      	beq.n	800613a <UART_SetConfig+0x1aa>
 8006128:	e00f      	b.n	800614a <UART_SetConfig+0x1ba>
 800612a:	2300      	movs	r3, #0
 800612c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006130:	e0ad      	b.n	800628e <UART_SetConfig+0x2fe>
 8006132:	2302      	movs	r3, #2
 8006134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006138:	e0a9      	b.n	800628e <UART_SetConfig+0x2fe>
 800613a:	2304      	movs	r3, #4
 800613c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006140:	e0a5      	b.n	800628e <UART_SetConfig+0x2fe>
 8006142:	2308      	movs	r3, #8
 8006144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006148:	e0a1      	b.n	800628e <UART_SetConfig+0x2fe>
 800614a:	2310      	movs	r3, #16
 800614c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006150:	e09d      	b.n	800628e <UART_SetConfig+0x2fe>
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a4a      	ldr	r2, [pc, #296]	; (8006280 <UART_SetConfig+0x2f0>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d125      	bne.n	80061a8 <UART_SetConfig+0x218>
 800615c:	4b45      	ldr	r3, [pc, #276]	; (8006274 <UART_SetConfig+0x2e4>)
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006162:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006166:	2bc0      	cmp	r3, #192	; 0xc0
 8006168:	d016      	beq.n	8006198 <UART_SetConfig+0x208>
 800616a:	2bc0      	cmp	r3, #192	; 0xc0
 800616c:	d818      	bhi.n	80061a0 <UART_SetConfig+0x210>
 800616e:	2b80      	cmp	r3, #128	; 0x80
 8006170:	d00a      	beq.n	8006188 <UART_SetConfig+0x1f8>
 8006172:	2b80      	cmp	r3, #128	; 0x80
 8006174:	d814      	bhi.n	80061a0 <UART_SetConfig+0x210>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <UART_SetConfig+0x1f0>
 800617a:	2b40      	cmp	r3, #64	; 0x40
 800617c:	d008      	beq.n	8006190 <UART_SetConfig+0x200>
 800617e:	e00f      	b.n	80061a0 <UART_SetConfig+0x210>
 8006180:	2300      	movs	r3, #0
 8006182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006186:	e082      	b.n	800628e <UART_SetConfig+0x2fe>
 8006188:	2302      	movs	r3, #2
 800618a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800618e:	e07e      	b.n	800628e <UART_SetConfig+0x2fe>
 8006190:	2304      	movs	r3, #4
 8006192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006196:	e07a      	b.n	800628e <UART_SetConfig+0x2fe>
 8006198:	2308      	movs	r3, #8
 800619a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800619e:	e076      	b.n	800628e <UART_SetConfig+0x2fe>
 80061a0:	2310      	movs	r3, #16
 80061a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061a6:	e072      	b.n	800628e <UART_SetConfig+0x2fe>
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a35      	ldr	r2, [pc, #212]	; (8006284 <UART_SetConfig+0x2f4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d12a      	bne.n	8006208 <UART_SetConfig+0x278>
 80061b2:	4b30      	ldr	r3, [pc, #192]	; (8006274 <UART_SetConfig+0x2e4>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061c0:	d01a      	beq.n	80061f8 <UART_SetConfig+0x268>
 80061c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061c6:	d81b      	bhi.n	8006200 <UART_SetConfig+0x270>
 80061c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061cc:	d00c      	beq.n	80061e8 <UART_SetConfig+0x258>
 80061ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d2:	d815      	bhi.n	8006200 <UART_SetConfig+0x270>
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d003      	beq.n	80061e0 <UART_SetConfig+0x250>
 80061d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061dc:	d008      	beq.n	80061f0 <UART_SetConfig+0x260>
 80061de:	e00f      	b.n	8006200 <UART_SetConfig+0x270>
 80061e0:	2300      	movs	r3, #0
 80061e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061e6:	e052      	b.n	800628e <UART_SetConfig+0x2fe>
 80061e8:	2302      	movs	r3, #2
 80061ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ee:	e04e      	b.n	800628e <UART_SetConfig+0x2fe>
 80061f0:	2304      	movs	r3, #4
 80061f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061f6:	e04a      	b.n	800628e <UART_SetConfig+0x2fe>
 80061f8:	2308      	movs	r3, #8
 80061fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061fe:	e046      	b.n	800628e <UART_SetConfig+0x2fe>
 8006200:	2310      	movs	r3, #16
 8006202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006206:	e042      	b.n	800628e <UART_SetConfig+0x2fe>
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a17      	ldr	r2, [pc, #92]	; (800626c <UART_SetConfig+0x2dc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d13a      	bne.n	8006288 <UART_SetConfig+0x2f8>
 8006212:	4b18      	ldr	r3, [pc, #96]	; (8006274 <UART_SetConfig+0x2e4>)
 8006214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006218:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800621c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006220:	d01a      	beq.n	8006258 <UART_SetConfig+0x2c8>
 8006222:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006226:	d81b      	bhi.n	8006260 <UART_SetConfig+0x2d0>
 8006228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800622c:	d00c      	beq.n	8006248 <UART_SetConfig+0x2b8>
 800622e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006232:	d815      	bhi.n	8006260 <UART_SetConfig+0x2d0>
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <UART_SetConfig+0x2b0>
 8006238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623c:	d008      	beq.n	8006250 <UART_SetConfig+0x2c0>
 800623e:	e00f      	b.n	8006260 <UART_SetConfig+0x2d0>
 8006240:	2300      	movs	r3, #0
 8006242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006246:	e022      	b.n	800628e <UART_SetConfig+0x2fe>
 8006248:	2302      	movs	r3, #2
 800624a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800624e:	e01e      	b.n	800628e <UART_SetConfig+0x2fe>
 8006250:	2304      	movs	r3, #4
 8006252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006256:	e01a      	b.n	800628e <UART_SetConfig+0x2fe>
 8006258:	2308      	movs	r3, #8
 800625a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800625e:	e016      	b.n	800628e <UART_SetConfig+0x2fe>
 8006260:	2310      	movs	r3, #16
 8006262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006266:	e012      	b.n	800628e <UART_SetConfig+0x2fe>
 8006268:	cfff69f3 	.word	0xcfff69f3
 800626c:	40008000 	.word	0x40008000
 8006270:	40013800 	.word	0x40013800
 8006274:	40021000 	.word	0x40021000
 8006278:	40004400 	.word	0x40004400
 800627c:	40004800 	.word	0x40004800
 8006280:	40004c00 	.word	0x40004c00
 8006284:	40005000 	.word	0x40005000
 8006288:	2310      	movs	r3, #16
 800628a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4aae      	ldr	r2, [pc, #696]	; (800654c <UART_SetConfig+0x5bc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	f040 8097 	bne.w	80063c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800629a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d823      	bhi.n	80062ea <UART_SetConfig+0x35a>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <UART_SetConfig+0x318>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062cd 	.word	0x080062cd
 80062ac:	080062eb 	.word	0x080062eb
 80062b0:	080062d5 	.word	0x080062d5
 80062b4:	080062eb 	.word	0x080062eb
 80062b8:	080062db 	.word	0x080062db
 80062bc:	080062eb 	.word	0x080062eb
 80062c0:	080062eb 	.word	0x080062eb
 80062c4:	080062eb 	.word	0x080062eb
 80062c8:	080062e3 	.word	0x080062e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062cc:	f7fd ffec 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 80062d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062d2:	e010      	b.n	80062f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062d4:	4b9e      	ldr	r3, [pc, #632]	; (8006550 <UART_SetConfig+0x5c0>)
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062d8:	e00d      	b.n	80062f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062da:	f7fd ff77 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 80062de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062e0:	e009      	b.n	80062f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062e8:	e005      	b.n	80062f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 8130 	beq.w	800655e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	4a94      	ldr	r2, [pc, #592]	; (8006554 <UART_SetConfig+0x5c4>)
 8006304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006308:	461a      	mov	r2, r3
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006310:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	4413      	add	r3, r2
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	429a      	cmp	r2, r3
 8006320:	d305      	bcc.n	800632e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	429a      	cmp	r2, r3
 800632c:	d903      	bls.n	8006336 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006334:	e113      	b.n	800655e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	2200      	movs	r2, #0
 800633a:	60bb      	str	r3, [r7, #8]
 800633c:	60fa      	str	r2, [r7, #12]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	4a84      	ldr	r2, [pc, #528]	; (8006554 <UART_SetConfig+0x5c4>)
 8006344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006348:	b29b      	uxth	r3, r3
 800634a:	2200      	movs	r2, #0
 800634c:	603b      	str	r3, [r7, #0]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006354:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006358:	f7f9 ff5e 	bl	8000218 <__aeabi_uldivmod>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4610      	mov	r0, r2
 8006362:	4619      	mov	r1, r3
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	020b      	lsls	r3, r1, #8
 800636e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006372:	0202      	lsls	r2, r0, #8
 8006374:	6979      	ldr	r1, [r7, #20]
 8006376:	6849      	ldr	r1, [r1, #4]
 8006378:	0849      	lsrs	r1, r1, #1
 800637a:	2000      	movs	r0, #0
 800637c:	460c      	mov	r4, r1
 800637e:	4605      	mov	r5, r0
 8006380:	eb12 0804 	adds.w	r8, r2, r4
 8006384:	eb43 0905 	adc.w	r9, r3, r5
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	469a      	mov	sl, r3
 8006390:	4693      	mov	fp, r2
 8006392:	4652      	mov	r2, sl
 8006394:	465b      	mov	r3, fp
 8006396:	4640      	mov	r0, r8
 8006398:	4649      	mov	r1, r9
 800639a:	f7f9 ff3d 	bl	8000218 <__aeabi_uldivmod>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4613      	mov	r3, r2
 80063a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ac:	d308      	bcc.n	80063c0 <UART_SetConfig+0x430>
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b4:	d204      	bcs.n	80063c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6a3a      	ldr	r2, [r7, #32]
 80063bc:	60da      	str	r2, [r3, #12]
 80063be:	e0ce      	b.n	800655e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063c6:	e0ca      	b.n	800655e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d0:	d166      	bne.n	80064a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80063d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063d6:	2b08      	cmp	r3, #8
 80063d8:	d827      	bhi.n	800642a <UART_SetConfig+0x49a>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <UART_SetConfig+0x450>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	08006405 	.word	0x08006405
 80063e4:	0800640d 	.word	0x0800640d
 80063e8:	08006415 	.word	0x08006415
 80063ec:	0800642b 	.word	0x0800642b
 80063f0:	0800641b 	.word	0x0800641b
 80063f4:	0800642b 	.word	0x0800642b
 80063f8:	0800642b 	.word	0x0800642b
 80063fc:	0800642b 	.word	0x0800642b
 8006400:	08006423 	.word	0x08006423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006404:	f7fd ff50 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 8006408:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800640a:	e014      	b.n	8006436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800640c:	f7fd ff62 	bl	80042d4 <HAL_RCC_GetPCLK2Freq>
 8006410:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006412:	e010      	b.n	8006436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006414:	4b4e      	ldr	r3, [pc, #312]	; (8006550 <UART_SetConfig+0x5c0>)
 8006416:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006418:	e00d      	b.n	8006436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800641a:	f7fd fed7 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 800641e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006420:	e009      	b.n	8006436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006428:	e005      	b.n	8006436 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 8090 	beq.w	800655e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	4a44      	ldr	r2, [pc, #272]	; (8006554 <UART_SetConfig+0x5c4>)
 8006444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006448:	461a      	mov	r2, r3
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006450:	005a      	lsls	r2, r3, #1
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	085b      	lsrs	r3, r3, #1
 8006458:	441a      	add	r2, r3
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006462:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	2b0f      	cmp	r3, #15
 8006468:	d916      	bls.n	8006498 <UART_SetConfig+0x508>
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006470:	d212      	bcs.n	8006498 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	b29b      	uxth	r3, r3
 8006476:	f023 030f 	bic.w	r3, r3, #15
 800647a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	b29b      	uxth	r3, r3
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	b29a      	uxth	r2, r3
 8006488:	8bfb      	ldrh	r3, [r7, #30]
 800648a:	4313      	orrs	r3, r2
 800648c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	8bfa      	ldrh	r2, [r7, #30]
 8006494:	60da      	str	r2, [r3, #12]
 8006496:	e062      	b.n	800655e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800649e:	e05e      	b.n	800655e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d828      	bhi.n	80064fa <UART_SetConfig+0x56a>
 80064a8:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <UART_SetConfig+0x520>)
 80064aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ae:	bf00      	nop
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064dd 	.word	0x080064dd
 80064b8:	080064e5 	.word	0x080064e5
 80064bc:	080064fb 	.word	0x080064fb
 80064c0:	080064eb 	.word	0x080064eb
 80064c4:	080064fb 	.word	0x080064fb
 80064c8:	080064fb 	.word	0x080064fb
 80064cc:	080064fb 	.word	0x080064fb
 80064d0:	080064f3 	.word	0x080064f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064d4:	f7fd fee8 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 80064d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064da:	e014      	b.n	8006506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064dc:	f7fd fefa 	bl	80042d4 <HAL_RCC_GetPCLK2Freq>
 80064e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064e2:	e010      	b.n	8006506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064e4:	4b1a      	ldr	r3, [pc, #104]	; (8006550 <UART_SetConfig+0x5c0>)
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064e8:	e00d      	b.n	8006506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ea:	f7fd fe6f 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 80064ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064f0:	e009      	b.n	8006506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064f8:	e005      	b.n	8006506 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006504:	bf00      	nop
    }

    if (pclk != 0U)
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	2b00      	cmp	r3, #0
 800650a:	d028      	beq.n	800655e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	4a10      	ldr	r2, [pc, #64]	; (8006554 <UART_SetConfig+0x5c4>)
 8006512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006516:	461a      	mov	r2, r3
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	fbb3 f2f2 	udiv	r2, r3, r2
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	085b      	lsrs	r3, r3, #1
 8006524:	441a      	add	r2, r3
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	fbb2 f3f3 	udiv	r3, r2, r3
 800652e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	2b0f      	cmp	r3, #15
 8006534:	d910      	bls.n	8006558 <UART_SetConfig+0x5c8>
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800653c:	d20c      	bcs.n	8006558 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	b29a      	uxth	r2, r3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60da      	str	r2, [r3, #12]
 8006548:	e009      	b.n	800655e <UART_SetConfig+0x5ce>
 800654a:	bf00      	nop
 800654c:	40008000 	.word	0x40008000
 8006550:	00f42400 	.word	0x00f42400
 8006554:	08006c54 	.word	0x08006c54
      }
      else
      {
        ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2201      	movs	r2, #1
 8006562:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2201      	movs	r2, #1
 800656a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2200      	movs	r2, #0
 8006572:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2200      	movs	r2, #0
 8006578:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800657a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800657e:	4618      	mov	r0, r3
 8006580:	3730      	adds	r7, #48	; 0x30
 8006582:	46bd      	mov	sp, r7
 8006584:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01a      	beq.n	800669e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006686:	d10a      	bne.n	800669e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
  }
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b098      	sub	sp, #96	; 0x60
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066dc:	f7fa fbf2 	bl	8000ec4 <HAL_GetTick>
 80066e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d12f      	bne.n	8006750 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066f8:	2200      	movs	r2, #0
 80066fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f88e 	bl	8006820 <UART_WaitOnFlagUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d022      	beq.n	8006750 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	e853 3f00 	ldrex	r3, [r3]
 8006716:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800671e:	653b      	str	r3, [r7, #80]	; 0x50
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006728:	647b      	str	r3, [r7, #68]	; 0x44
 800672a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800672e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e6      	bne.n	800670a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e063      	b.n	8006818 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b04      	cmp	r3, #4
 800675c:	d149      	bne.n	80067f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800675e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006766:	2200      	movs	r2, #0
 8006768:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f857 	bl	8006820 <UART_WaitOnFlagUntilTimeout>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d03c      	beq.n	80067f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	e853 3f00 	ldrex	r3, [r3]
 8006784:	623b      	str	r3, [r7, #32]
   return(result);
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800678c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006796:	633b      	str	r3, [r7, #48]	; 0x30
 8006798:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800679c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e6      	bne.n	8006778 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3308      	adds	r3, #8
 80067b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f023 0301 	bic.w	r3, r3, #1
 80067c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3308      	adds	r3, #8
 80067c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067ca:	61fa      	str	r2, [r7, #28]
 80067cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	69b9      	ldr	r1, [r7, #24]
 80067d0:	69fa      	ldr	r2, [r7, #28]
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	617b      	str	r3, [r7, #20]
   return(result);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e5      	bne.n	80067aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e012      	b.n	8006818 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3758      	adds	r7, #88	; 0x58
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	4613      	mov	r3, r2
 800682e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006830:	e04f      	b.n	80068d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006838:	d04b      	beq.n	80068d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800683a:	f7fa fb43 	bl	8000ec4 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	429a      	cmp	r2, r3
 8006848:	d302      	bcc.n	8006850 <UART_WaitOnFlagUntilTimeout+0x30>
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e04e      	b.n	80068f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b00      	cmp	r3, #0
 8006860:	d037      	beq.n	80068d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b80      	cmp	r3, #128	; 0x80
 8006866:	d034      	beq.n	80068d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d031      	beq.n	80068d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	f003 0308 	and.w	r3, r3, #8
 8006878:	2b08      	cmp	r3, #8
 800687a:	d110      	bne.n	800689e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2208      	movs	r2, #8
 8006882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 f838 	bl	80068fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2208      	movs	r2, #8
 800688e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e029      	b.n	80068f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ac:	d111      	bne.n	80068d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f81e 	bl	80068fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e00f      	b.n	80068f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4013      	ands	r3, r2
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	429a      	cmp	r2, r3
 80068e0:	bf0c      	ite	eq
 80068e2:	2301      	moveq	r3, #1
 80068e4:	2300      	movne	r3, #0
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	461a      	mov	r2, r3
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d0a0      	beq.n	8006832 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b095      	sub	sp, #84	; 0x54
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690a:	e853 3f00 	ldrex	r3, [r3]
 800690e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	461a      	mov	r2, r3
 800691e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006920:	643b      	str	r3, [r7, #64]	; 0x40
 8006922:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006924:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006926:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006928:	e841 2300 	strex	r3, r2, [r1]
 800692c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1e6      	bne.n	8006902 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3308      	adds	r3, #8
 800693a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	61fb      	str	r3, [r7, #28]
   return(result);
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800694a:	f023 0301 	bic.w	r3, r3, #1
 800694e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3308      	adds	r3, #8
 8006956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006958:	62fa      	str	r2, [r7, #44]	; 0x2c
 800695a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800695e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006960:	e841 2300 	strex	r3, r2, [r1]
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1e3      	bne.n	8006934 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006970:	2b01      	cmp	r3, #1
 8006972:	d118      	bne.n	80069a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	60bb      	str	r3, [r7, #8]
   return(result);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f023 0310 	bic.w	r3, r3, #16
 8006988:	647b      	str	r3, [r7, #68]	; 0x44
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6979      	ldr	r1, [r7, #20]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	613b      	str	r3, [r7, #16]
   return(result);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e6      	bne.n	8006974 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80069ba:	bf00      	nop
 80069bc:	3754      	adds	r7, #84	; 0x54
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d101      	bne.n	80069dc <HAL_UARTEx_DisableFifoMode+0x16>
 80069d8:	2302      	movs	r3, #2
 80069da:	e027      	b.n	8006a2c <HAL_UARTEx_DisableFifoMode+0x66>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2224      	movs	r2, #36	; 0x24
 80069e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0201 	bic.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e02d      	b.n	8006aac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2224      	movs	r2, #36	; 0x24
 8006a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0201 	bic.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f84f 	bl	8006b30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e02d      	b.n	8006b28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2224      	movs	r2, #36	; 0x24
 8006ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 0201 	bic.w	r2, r2, #1
 8006af2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f811 	bl	8006b30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d108      	bne.n	8006b52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b50:	e031      	b.n	8006bb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b52:	2308      	movs	r3, #8
 8006b54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b56:	2308      	movs	r3, #8
 8006b58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	0e5b      	lsrs	r3, r3, #25
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	0f5b      	lsrs	r3, r3, #29
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
 8006b7c:	7b3a      	ldrb	r2, [r7, #12]
 8006b7e:	4911      	ldr	r1, [pc, #68]	; (8006bc4 <UARTEx_SetNbDataToProcess+0x94>)
 8006b80:	5c8a      	ldrb	r2, [r1, r2]
 8006b82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b86:	7b3a      	ldrb	r2, [r7, #12]
 8006b88:	490f      	ldr	r1, [pc, #60]	; (8006bc8 <UARTEx_SetNbDataToProcess+0x98>)
 8006b8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	7b7a      	ldrb	r2, [r7, #13]
 8006b9c:	4909      	ldr	r1, [pc, #36]	; (8006bc4 <UARTEx_SetNbDataToProcess+0x94>)
 8006b9e:	5c8a      	ldrb	r2, [r1, r2]
 8006ba0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ba4:	7b7a      	ldrb	r2, [r7, #13]
 8006ba6:	4908      	ldr	r1, [pc, #32]	; (8006bc8 <UARTEx_SetNbDataToProcess+0x98>)
 8006ba8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006baa:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	08006c6c 	.word	0x08006c6c
 8006bc8:	08006c74 	.word	0x08006c74

08006bcc <memset>:
 8006bcc:	4402      	add	r2, r0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d100      	bne.n	8006bd6 <memset+0xa>
 8006bd4:	4770      	bx	lr
 8006bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bda:	e7f9      	b.n	8006bd0 <memset+0x4>

08006bdc <__libc_init_array>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	4d0d      	ldr	r5, [pc, #52]	; (8006c14 <__libc_init_array+0x38>)
 8006be0:	4c0d      	ldr	r4, [pc, #52]	; (8006c18 <__libc_init_array+0x3c>)
 8006be2:	1b64      	subs	r4, r4, r5
 8006be4:	10a4      	asrs	r4, r4, #2
 8006be6:	2600      	movs	r6, #0
 8006be8:	42a6      	cmp	r6, r4
 8006bea:	d109      	bne.n	8006c00 <__libc_init_array+0x24>
 8006bec:	4d0b      	ldr	r5, [pc, #44]	; (8006c1c <__libc_init_array+0x40>)
 8006bee:	4c0c      	ldr	r4, [pc, #48]	; (8006c20 <__libc_init_array+0x44>)
 8006bf0:	f000 f818 	bl	8006c24 <_init>
 8006bf4:	1b64      	subs	r4, r4, r5
 8006bf6:	10a4      	asrs	r4, r4, #2
 8006bf8:	2600      	movs	r6, #0
 8006bfa:	42a6      	cmp	r6, r4
 8006bfc:	d105      	bne.n	8006c0a <__libc_init_array+0x2e>
 8006bfe:	bd70      	pop	{r4, r5, r6, pc}
 8006c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c04:	4798      	blx	r3
 8006c06:	3601      	adds	r6, #1
 8006c08:	e7ee      	b.n	8006be8 <__libc_init_array+0xc>
 8006c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c0e:	4798      	blx	r3
 8006c10:	3601      	adds	r6, #1
 8006c12:	e7f2      	b.n	8006bfa <__libc_init_array+0x1e>
 8006c14:	08006c84 	.word	0x08006c84
 8006c18:	08006c84 	.word	0x08006c84
 8006c1c:	08006c84 	.word	0x08006c84
 8006c20:	08006c88 	.word	0x08006c88

08006c24 <_init>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	bf00      	nop
 8006c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2a:	bc08      	pop	{r3}
 8006c2c:	469e      	mov	lr, r3
 8006c2e:	4770      	bx	lr

08006c30 <_fini>:
 8006c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c32:	bf00      	nop
 8006c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c36:	bc08      	pop	{r3}
 8006c38:	469e      	mov	lr, r3
 8006c3a:	4770      	bx	lr
