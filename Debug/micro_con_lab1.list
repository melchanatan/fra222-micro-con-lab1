
micro_con_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037dc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080039b4  080039b4  000139b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f4  080039f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080039f4  080039f4  000139f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039fc  080039fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039fc  080039fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000010  08003a10  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003a10  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011e02  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ed  00000000  00000000  00031e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00034070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c40  00000000  00000000  00035010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002567d  00000000  00000000  00035c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a14  00000000  00000000  0005b2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7b95  00000000  00000000  0006cce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042ac  00000000  00000000  00164878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00168b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800399c 	.word	0x0800399c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	0800399c 	.word	0x0800399c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 faad 	bl	8000a76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f824 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f906 	bl	8000730 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f86c 	bl	8000600 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000528:	f000 f8b4 	bl	8000694 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800052c:	480a      	ldr	r0, [pc, #40]	; (8000558 <main+0x44>)
 800052e:	f001 fe69 	bl	8002204 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	timer2Counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <main+0x44>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000538:	4a08      	ldr	r2, [pc, #32]	; (800055c <main+0x48>)
 800053a:	6013      	str	r3, [r2, #0]
	realtime = timer2Counter + interruptCounter * 32-1;
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <main+0x4c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	015a      	lsls	r2, r3, #5
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <main+0x48>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4413      	add	r3, r2
 8000548:	3b01      	subs	r3, #1
 800054a:	2200      	movs	r2, #0
 800054c:	461c      	mov	r4, r3
 800054e:	4615      	mov	r5, r2
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <main+0x50>)
 8000552:	e9c3 4500 	strd	r4, r5, [r3]
	timer2Counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000556:	e7ec      	b.n	8000532 <main+0x1e>
 8000558:	200000c0 	.word	0x200000c0
 800055c:	2000010c 	.word	0x2000010c
 8000560:	20000110 	.word	0x20000110
 8000564:	20000118 	.word	0x20000118

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	2238      	movs	r2, #56	; 0x38
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 f9e4 	bl	8003944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800058a:	2000      	movs	r0, #0
 800058c:	f000 fdb2 	bl	80010f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059a:	2340      	movs	r3, #64	; 0x40
 800059c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005a6:	2304      	movs	r3, #4
 80005a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005aa:	2355      	movs	r3, #85	; 0x55
 80005ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0318 	add.w	r3, r7, #24
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fe4c 	bl	800125c <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ca:	f000 f937 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2303      	movs	r3, #3
 80005d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2104      	movs	r1, #4
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 f94a 	bl	8001880 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005f2:	f000 f923 	bl	800083c <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <MX_LPUART1_UART_Init+0x8c>)
 8000606:	4a22      	ldr	r2, [pc, #136]	; (8000690 <MX_LPUART1_UART_Init+0x90>)
 8000608:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <MX_LPUART1_UART_Init+0x8c>)
 800060c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000610:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_LPUART1_UART_Init+0x8c>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <MX_LPUART1_UART_Init+0x8c>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_LPUART1_UART_Init+0x8c>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_LPUART1_UART_Init+0x8c>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_LPUART1_UART_Init+0x8c>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_LPUART1_UART_Init+0x8c>)
 8000632:	2200      	movs	r2, #0
 8000634:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_LPUART1_UART_Init+0x8c>)
 8000638:	2200      	movs	r2, #0
 800063a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_LPUART1_UART_Init+0x8c>)
 800063e:	2200      	movs	r2, #0
 8000640:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000642:	4812      	ldr	r0, [pc, #72]	; (800068c <MX_LPUART1_UART_Init+0x8c>)
 8000644:	f002 fb10 	bl	8002c68 <HAL_UART_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800064e:	f000 f8f5 	bl	800083c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000652:	2100      	movs	r1, #0
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <MX_LPUART1_UART_Init+0x8c>)
 8000656:	f003 f8ab 	bl	80037b0 <HAL_UARTEx_SetTxFifoThreshold>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000660:	f000 f8ec 	bl	800083c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000664:	2100      	movs	r1, #0
 8000666:	4809      	ldr	r0, [pc, #36]	; (800068c <MX_LPUART1_UART_Init+0x8c>)
 8000668:	f003 f8e0 	bl	800382c <HAL_UARTEx_SetRxFifoThreshold>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000672:	f000 f8e3 	bl	800083c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_LPUART1_UART_Init+0x8c>)
 8000678:	f003 f861 	bl	800373e <HAL_UARTEx_DisableFifoMode>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000682:	f000 f8db 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000002c 	.word	0x2000002c
 8000690:	40008000 	.word	0x40008000

08000694 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006b2:	4b1e      	ldr	r3, [pc, #120]	; (800072c <MX_TIM2_Init+0x98>)
 80006b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_TIM2_Init+0x98>)
 80006bc:	22a9      	movs	r2, #169	; 0xa9
 80006be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_TIM2_Init+0x98>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_TIM2_Init+0x98>)
 80006c8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80006cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_TIM2_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_TIM2_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006da:	4814      	ldr	r0, [pc, #80]	; (800072c <MX_TIM2_Init+0x98>)
 80006dc:	f001 fd3a 	bl	8002154 <HAL_TIM_Base_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80006e6:	f000 f8a9 	bl	800083c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	480d      	ldr	r0, [pc, #52]	; (800072c <MX_TIM2_Init+0x98>)
 80006f8:	f001 ff4c 	bl	8002594 <HAL_TIM_ConfigClockSource>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000702:	f000 f89b 	bl	800083c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_TIM2_Init+0x98>)
 8000714:	f002 f9cc 	bl	8002ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800071e:	f000 f88d 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3720      	adds	r7, #32
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000c0 	.word	0x200000c0

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a2e      	ldr	r2, [pc, #184]	; (8000804 <MX_GPIO_Init+0xd4>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a28      	ldr	r2, [pc, #160]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_GPIO_Init+0xd4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0320 	and.w	r3, r3, #32
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a22      	ldr	r2, [pc, #136]	; (8000804 <MX_GPIO_Init+0xd4>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_GPIO_Init+0xd4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2120      	movs	r1, #32
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f000 fc65 	bl	800107c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	480f      	ldr	r0, [pc, #60]	; (8000808 <MX_GPIO_Init+0xd8>)
 80007ca:	f000 fad5 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ce:	2320      	movs	r3, #32
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f000 fac6 	bl	8000d78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	2028      	movs	r0, #40	; 0x28
 80007f2:	f000 fa8c 	bl	8000d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007f6:	2028      	movs	r0, #40	; 0x28
 80007f8:	f000 faa3 	bl	8000d42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	; 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40021000 	.word	0x40021000
 8000808:	48000800 	.word	0x48000800

0800080c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a07      	ldr	r2, [pc, #28]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d104      	bne.n	8000826 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		interruptCounter = interruptCounter + 1;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000824:	6013      	str	r3, [r2, #0]
	}
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	200000c0 	.word	0x200000c0
 8000838:	20000110 	.word	0x20000110

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x44>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <HAL_MspInit+0x44>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6613      	str	r3, [r2, #96]	; 0x60
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_MspInit+0x44>)
 800085c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_MspInit+0x44>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_MspInit+0x44>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	6593      	str	r3, [r2, #88]	; 0x58
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x44>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800087e:	f000 fcdd 	bl	800123c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b09e      	sub	sp, #120	; 0x78
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	2254      	movs	r2, #84	; 0x54
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 f847 	bl	8003944 <memset>
  if(huart->Instance==LPUART1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a1f      	ldr	r2, [pc, #124]	; (8000938 <HAL_UART_MspInit+0xa8>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d136      	bne.n	800092e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008c0:	2320      	movs	r3, #32
 80008c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 f9f3 	bl	8001cb8 <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008d8:	f7ff ffb0 	bl	800083c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_UART_MspInit+0xac>)
 80008de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008e0:	4a16      	ldr	r2, [pc, #88]	; (800093c <HAL_UART_MspInit+0xac>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_UART_MspInit+0xac>)
 80008ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_UART_MspInit+0xac>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f8:	4a10      	ldr	r2, [pc, #64]	; (800093c <HAL_UART_MspInit+0xac>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_UART_MspInit+0xac>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800090c:	230c      	movs	r3, #12
 800090e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800091c:	230c      	movs	r3, #12
 800091e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000924:	4619      	mov	r1, r3
 8000926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092a:	f000 fa25 	bl	8000d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800092e:	bf00      	nop
 8000930:	3778      	adds	r7, #120	; 0x78
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40008000 	.word	0x40008000
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000950:	d113      	bne.n	800097a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_TIM_Base_MspInit+0x44>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <HAL_TIM_Base_MspInit+0x44>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6593      	str	r3, [r2, #88]	; 0x58
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_TIM_Base_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	201c      	movs	r0, #28
 8000970:	f000 f9cd 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000974:	201c      	movs	r0, #28
 8000976:	f000 f9e4 	bl	8000d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f8a2 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <TIM2_IRQHandler+0x10>)
 80009e2:	f001 fc87 	bl	80022f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200000c0 	.word	0x200000c0

080009f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009f8:	f000 fb58 	bl	80010ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a28:	f7ff ffea 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <LoopForever+0xe>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <LoopForever+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a52:	f002 ff7f 	bl	8003954 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a56:	f7ff fd5d 	bl	8000514 <main>

08000a5a <LoopForever>:

LoopForever:
    b LoopForever
 8000a5a:	e7fe      	b.n	8000a5a <LoopForever>
  ldr   r0, =_estack
 8000a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a68:	08003a04 	.word	0x08003a04
  ldr r2, =_sbss
 8000a6c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a70:	20000124 	.word	0x20000124

08000a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC1_2_IRQHandler>

08000a76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f939 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a86:	2000      	movs	r0, #0
 8000a88:	f000 f80e 	bl	8000aa8 <HAL_InitTick>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	71fb      	strb	r3, [r7, #7]
 8000a96:	e001      	b.n	8000a9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a98:	f7ff fed6 	bl	8000848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]

}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <HAL_InitTick+0x68>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d022      	beq.n	8000b02 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_InitTick+0x6c>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <HAL_InitTick+0x68>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ac8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 f944 	bl	8000d5e <HAL_SYSTICK_Config>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d10f      	bne.n	8000afc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	d809      	bhi.n	8000af6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aea:	f000 f910 	bl	8000d0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_InitTick+0x70>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	e007      	b.n	8000b06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]
 8000afa:	e004      	b.n	8000b06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	e001      	b.n	8000b06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x1c>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_IncTick+0x20>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <HAL_IncTick+0x1c>)
 8000b2c:	6013      	str	r3, [r2, #0]
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	20000120 	.word	0x20000120
 8000b3c:	20000008 	.word	0x20000008

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000120 	.word	0x20000120

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff29 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff40 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff90 	bl	8000c4c <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5f 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff33 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffa4 	bl	8000cb4 <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d86:	e15a      	b.n	800103e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 814c 	beq.w	8001038 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d005      	beq.n	8000db8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d130      	bne.n	8000e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dee:	2201      	movs	r2, #1
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	091b      	lsrs	r3, r3, #4
 8000e04:	f003 0201 	and.w	r2, r3, #1
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d017      	beq.n	8000e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d123      	bne.n	8000eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	6939      	ldr	r1, [r7, #16]
 8000ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0203 	and.w	r2, r3, #3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 80a6 	beq.w	8001038 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eec:	4b5b      	ldr	r3, [pc, #364]	; (800105c <HAL_GPIO_Init+0x2e4>)
 8000eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef0:	4a5a      	ldr	r2, [pc, #360]	; (800105c <HAL_GPIO_Init+0x2e4>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ef8:	4b58      	ldr	r3, [pc, #352]	; (800105c <HAL_GPIO_Init+0x2e4>)
 8000efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f04:	4a56      	ldr	r2, [pc, #344]	; (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f2e:	d01f      	beq.n	8000f70 <HAL_GPIO_Init+0x1f8>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a4c      	ldr	r2, [pc, #304]	; (8001064 <HAL_GPIO_Init+0x2ec>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d019      	beq.n	8000f6c <HAL_GPIO_Init+0x1f4>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a4b      	ldr	r2, [pc, #300]	; (8001068 <HAL_GPIO_Init+0x2f0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d013      	beq.n	8000f68 <HAL_GPIO_Init+0x1f0>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a4a      	ldr	r2, [pc, #296]	; (800106c <HAL_GPIO_Init+0x2f4>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d00d      	beq.n	8000f64 <HAL_GPIO_Init+0x1ec>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a49      	ldr	r2, [pc, #292]	; (8001070 <HAL_GPIO_Init+0x2f8>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d007      	beq.n	8000f60 <HAL_GPIO_Init+0x1e8>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a48      	ldr	r2, [pc, #288]	; (8001074 <HAL_GPIO_Init+0x2fc>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d101      	bne.n	8000f5c <HAL_GPIO_Init+0x1e4>
 8000f58:	2305      	movs	r3, #5
 8000f5a:	e00a      	b.n	8000f72 <HAL_GPIO_Init+0x1fa>
 8000f5c:	2306      	movs	r3, #6
 8000f5e:	e008      	b.n	8000f72 <HAL_GPIO_Init+0x1fa>
 8000f60:	2304      	movs	r3, #4
 8000f62:	e006      	b.n	8000f72 <HAL_GPIO_Init+0x1fa>
 8000f64:	2303      	movs	r3, #3
 8000f66:	e004      	b.n	8000f72 <HAL_GPIO_Init+0x1fa>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e002      	b.n	8000f72 <HAL_GPIO_Init+0x1fa>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <HAL_GPIO_Init+0x1fa>
 8000f70:	2300      	movs	r3, #0
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	f002 0203 	and.w	r2, r2, #3
 8000f78:	0092      	lsls	r2, r2, #2
 8000f7a:	4093      	lsls	r3, r2
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f82:	4937      	ldr	r1, [pc, #220]	; (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	3302      	adds	r3, #2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f90:	4b39      	ldr	r3, [pc, #228]	; (8001078 <HAL_GPIO_Init+0x300>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fb4:	4a30      	ldr	r2, [pc, #192]	; (8001078 <HAL_GPIO_Init+0x300>)
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <HAL_GPIO_Init+0x300>)
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fde:	4a26      	ldr	r2, [pc, #152]	; (8001078 <HAL_GPIO_Init+0x300>)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000fe4:	4b24      	ldr	r3, [pc, #144]	; (8001078 <HAL_GPIO_Init+0x300>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <HAL_GPIO_Init+0x300>)
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_GPIO_Init+0x300>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001032:	4a11      	ldr	r2, [pc, #68]	; (8001078 <HAL_GPIO_Init+0x300>)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3301      	adds	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	fa22 f303 	lsr.w	r3, r2, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	f47f ae9d 	bne.w	8000d88 <HAL_GPIO_Init+0x10>
  }
}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	371c      	adds	r7, #28
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40021000 	.word	0x40021000
 8001060:	40010000 	.word	0x40010000
 8001064:	48000400 	.word	0x48000400
 8001068:	48000800 	.word	0x48000800
 800106c:	48000c00 	.word	0x48000c00
 8001070:	48001000 	.word	0x48001000
 8001074:	48001400 	.word	0x48001400
 8001078:	40010400 	.word	0x40010400

0800107c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]
 8001088:	4613      	mov	r3, r2
 800108a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800108c:	787b      	ldrb	r3, [r7, #1]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001092:	887a      	ldrh	r2, [r7, #2]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800109a:	887a      	ldrh	r2, [r7, #2]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010b8:	695a      	ldr	r2, [r3, #20]
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	4013      	ands	r3, r2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d006      	beq.n	80010d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f806 	bl	80010dc <HAL_GPIO_EXTI_Callback>
  }
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40010400 	.word	0x40010400

080010dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d141      	bne.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001102:	4b4b      	ldr	r3, [pc, #300]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800110a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110e:	d131      	bne.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001110:	4b47      	ldr	r3, [pc, #284]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001116:	4a46      	ldr	r2, [pc, #280]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800111c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001120:	4b43      	ldr	r3, [pc, #268]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001128:	4a41      	ldr	r2, [pc, #260]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001130:	4b40      	ldr	r3, [pc, #256]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2232      	movs	r2, #50	; 0x32
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	4a3f      	ldr	r2, [pc, #252]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	0c9b      	lsrs	r3, r3, #18
 8001142:	3301      	adds	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001146:	e002      	b.n	800114e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3b01      	subs	r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800114e:	4b38      	ldr	r3, [pc, #224]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115a:	d102      	bne.n	8001162 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f2      	bne.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001162:	4b33      	ldr	r3, [pc, #204]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800116e:	d158      	bne.n	8001222 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e057      	b.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001174:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800117a:	4a2d      	ldr	r2, [pc, #180]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001180:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001184:	e04d      	b.n	8001222 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800118c:	d141      	bne.n	8001212 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800119a:	d131      	bne.n	8001200 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800119e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011a2:	4a23      	ldr	r2, [pc, #140]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ac:	4b20      	ldr	r3, [pc, #128]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011b4:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2232      	movs	r2, #50	; 0x32
 80011c2:	fb02 f303 	mul.w	r3, r2, r3
 80011c6:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011c8:	fba2 2303 	umull	r2, r3, r2, r3
 80011cc:	0c9b      	lsrs	r3, r3, #18
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d2:	e002      	b.n	80011da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e6:	d102      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f2      	bne.n	80011d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fa:	d112      	bne.n	8001222 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e011      	b.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001210:	e007      	b.n	8001222 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001220:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40007000 	.word	0x40007000
 8001234:	20000000 	.word	0x20000000
 8001238:	431bde83 	.word	0x431bde83

0800123c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124a:	6093      	str	r3, [r2, #8]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40007000 	.word	0x40007000

0800125c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e2fe      	b.n	800186c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d075      	beq.n	8001366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800127a:	4b97      	ldr	r3, [pc, #604]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001284:	4b94      	ldr	r3, [pc, #592]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	2b0c      	cmp	r3, #12
 8001292:	d102      	bne.n	800129a <HAL_RCC_OscConfig+0x3e>
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	2b03      	cmp	r3, #3
 8001298:	d002      	beq.n	80012a0 <HAL_RCC_OscConfig+0x44>
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b08      	cmp	r3, #8
 800129e:	d10b      	bne.n	80012b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	4b8d      	ldr	r3, [pc, #564]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d05b      	beq.n	8001364 <HAL_RCC_OscConfig+0x108>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d157      	bne.n	8001364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e2d9      	b.n	800186c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c0:	d106      	bne.n	80012d0 <HAL_RCC_OscConfig+0x74>
 80012c2:	4b85      	ldr	r3, [pc, #532]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a84      	ldr	r2, [pc, #528]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e01d      	b.n	800130c <HAL_RCC_OscConfig+0xb0>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d8:	d10c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x98>
 80012da:	4b7f      	ldr	r3, [pc, #508]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a7e      	ldr	r2, [pc, #504]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 80012e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	4b7c      	ldr	r3, [pc, #496]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a7b      	ldr	r2, [pc, #492]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e00b      	b.n	800130c <HAL_RCC_OscConfig+0xb0>
 80012f4:	4b78      	ldr	r3, [pc, #480]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a77      	ldr	r2, [pc, #476]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 80012fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b75      	ldr	r3, [pc, #468]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a74      	ldr	r2, [pc, #464]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 8001306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d013      	beq.n	800133c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001314:	f7ff fc14 	bl	8000b40 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fc10 	bl	8000b40 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e29e      	b.n	800186c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800132e:	4b6a      	ldr	r3, [pc, #424]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0xc0>
 800133a:	e014      	b.n	8001366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133c:	f7ff fc00 	bl	8000b40 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fbfc 	bl	8000b40 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	; 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e28a      	b.n	800186c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001356:	4b60      	ldr	r3, [pc, #384]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0xe8>
 8001362:	e000      	b.n	8001366 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d075      	beq.n	800145e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001372:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800137c:	4b56      	ldr	r3, [pc, #344]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	2b0c      	cmp	r3, #12
 800138a:	d102      	bne.n	8001392 <HAL_RCC_OscConfig+0x136>
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d002      	beq.n	8001398 <HAL_RCC_OscConfig+0x13c>
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	2b04      	cmp	r3, #4
 8001396:	d11f      	bne.n	80013d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001398:	4b4f      	ldr	r3, [pc, #316]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <HAL_RCC_OscConfig+0x154>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e25d      	b.n	800186c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	061b      	lsls	r3, r3, #24
 80013be:	4946      	ldr	r1, [pc, #280]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013c4:	4b45      	ldr	r3, [pc, #276]	; (80014dc <HAL_RCC_OscConfig+0x280>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fb6d 	bl	8000aa8 <HAL_InitTick>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d043      	beq.n	800145c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e249      	b.n	800186c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d023      	beq.n	8001428 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e0:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a3c      	ldr	r2, [pc, #240]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 80013e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fba8 	bl	8000b40 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff fba4 	bl	8000b40 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e232      	b.n	800186c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001406:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	061b      	lsls	r3, r3, #24
 8001420:	492d      	ldr	r1, [pc, #180]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
 8001426:	e01a      	b.n	800145e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a2a      	ldr	r2, [pc, #168]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 800142e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fb84 	bl	8000b40 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fb80 	bl	8000b40 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e20e      	b.n	800186c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x1e0>
 800145a:	e000      	b.n	800145e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800145c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d041      	beq.n	80014ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d01c      	beq.n	80014ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 8001474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001478:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001482:	f7ff fb5d 	bl	8000b40 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800148a:	f7ff fb59 	bl	8000b40 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e1e7      	b.n	800186c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 800149e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0ef      	beq.n	800148a <HAL_RCC_OscConfig+0x22e>
 80014aa:	e020      	b.n	80014ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 80014ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <HAL_RCC_OscConfig+0x27c>)
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fb40 	bl	8000b40 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014c2:	e00d      	b.n	80014e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fb3c 	bl	8000b40 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d906      	bls.n	80014e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e1ca      	b.n	800186c <HAL_RCC_OscConfig+0x610>
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e0:	4b8c      	ldr	r3, [pc, #560]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 80014e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ea      	bne.n	80014c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80a6 	beq.w	8001648 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001500:	4b84      	ldr	r3, [pc, #528]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_RCC_OscConfig+0x2b4>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x2b6>
 8001510:	2300      	movs	r3, #0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00d      	beq.n	8001532 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b7f      	ldr	r3, [pc, #508]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	4a7e      	ldr	r2, [pc, #504]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6593      	str	r3, [r2, #88]	; 0x58
 8001522:	4b7c      	ldr	r3, [pc, #496]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800152e:	2301      	movs	r3, #1
 8001530:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001532:	4b79      	ldr	r3, [pc, #484]	; (8001718 <HAL_RCC_OscConfig+0x4bc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153a:	2b00      	cmp	r3, #0
 800153c:	d118      	bne.n	8001570 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800153e:	4b76      	ldr	r3, [pc, #472]	; (8001718 <HAL_RCC_OscConfig+0x4bc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a75      	ldr	r2, [pc, #468]	; (8001718 <HAL_RCC_OscConfig+0x4bc>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154a:	f7ff faf9 	bl	8000b40 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001552:	f7ff faf5 	bl	8000b40 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e183      	b.n	800186c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001564:	4b6c      	ldr	r3, [pc, #432]	; (8001718 <HAL_RCC_OscConfig+0x4bc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d108      	bne.n	800158a <HAL_RCC_OscConfig+0x32e>
 8001578:	4b66      	ldr	r3, [pc, #408]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 800157a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157e:	4a65      	ldr	r2, [pc, #404]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001588:	e024      	b.n	80015d4 <HAL_RCC_OscConfig+0x378>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b05      	cmp	r3, #5
 8001590:	d110      	bne.n	80015b4 <HAL_RCC_OscConfig+0x358>
 8001592:	4b60      	ldr	r3, [pc, #384]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 8001594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001598:	4a5e      	ldr	r2, [pc, #376]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015a2:	4b5c      	ldr	r3, [pc, #368]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 80015a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a8:	4a5a      	ldr	r2, [pc, #360]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015b2:	e00f      	b.n	80015d4 <HAL_RCC_OscConfig+0x378>
 80015b4:	4b57      	ldr	r3, [pc, #348]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 80015b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ba:	4a56      	ldr	r2, [pc, #344]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 80015c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ca:	4a52      	ldr	r2, [pc, #328]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d016      	beq.n	800160a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015dc:	f7ff fab0 	bl	8000b40 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015e2:	e00a      	b.n	80015fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e4:	f7ff faac 	bl	8000b40 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e138      	b.n	800186c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015fa:	4b46      	ldr	r3, [pc, #280]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 80015fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0ed      	beq.n	80015e4 <HAL_RCC_OscConfig+0x388>
 8001608:	e015      	b.n	8001636 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff fa99 	bl	8000b40 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001610:	e00a      	b.n	8001628 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001612:	f7ff fa95 	bl	8000b40 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001620:	4293      	cmp	r3, r2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e121      	b.n	800186c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001628:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ed      	bne.n	8001612 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001636:	7ffb      	ldrb	r3, [r7, #31]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163c:	4b35      	ldr	r3, [pc, #212]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	4a34      	ldr	r2, [pc, #208]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 8001642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001646:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0320 	and.w	r3, r3, #32
 8001650:	2b00      	cmp	r3, #0
 8001652:	d03c      	beq.n	80016ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d01c      	beq.n	8001696 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 800165e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001662:	4a2c      	ldr	r2, [pc, #176]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7ff fa68 	bl	8000b40 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001674:	f7ff fa64 	bl	8000b40 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e0f2      	b.n	800186c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 8001688:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0ef      	beq.n	8001674 <HAL_RCC_OscConfig+0x418>
 8001694:	e01b      	b.n	80016ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001696:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 8001698:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800169c:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a6:	f7ff fa4b 	bl	8000b40 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ae:	f7ff fa47 	bl	8000b40 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e0d5      	b.n	800186c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 80016c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ef      	bne.n	80016ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 80c9 	beq.w	800186a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b0c      	cmp	r3, #12
 80016e2:	f000 8083 	beq.w	80017ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d15e      	bne.n	80017ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_RCC_OscConfig+0x4b8>)
 80016f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fa:	f7ff fa21 	bl	8000b40 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001700:	e00c      	b.n	800171c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff fa1d 	bl	8000b40 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d905      	bls.n	800171c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e0ab      	b.n	800186c <HAL_RCC_OscConfig+0x610>
 8001714:	40021000 	.word	0x40021000
 8001718:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800171c:	4b55      	ldr	r3, [pc, #340]	; (8001874 <HAL_RCC_OscConfig+0x618>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1ec      	bne.n	8001702 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001728:	4b52      	ldr	r3, [pc, #328]	; (8001874 <HAL_RCC_OscConfig+0x618>)
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	4b52      	ldr	r3, [pc, #328]	; (8001878 <HAL_RCC_OscConfig+0x61c>)
 800172e:	4013      	ands	r3, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6a11      	ldr	r1, [r2, #32]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001738:	3a01      	subs	r2, #1
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	4311      	orrs	r1, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001742:	0212      	lsls	r2, r2, #8
 8001744:	4311      	orrs	r1, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800174a:	0852      	lsrs	r2, r2, #1
 800174c:	3a01      	subs	r2, #1
 800174e:	0552      	lsls	r2, r2, #21
 8001750:	4311      	orrs	r1, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001756:	0852      	lsrs	r2, r2, #1
 8001758:	3a01      	subs	r2, #1
 800175a:	0652      	lsls	r2, r2, #25
 800175c:	4311      	orrs	r1, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001762:	06d2      	lsls	r2, r2, #27
 8001764:	430a      	orrs	r2, r1
 8001766:	4943      	ldr	r1, [pc, #268]	; (8001874 <HAL_RCC_OscConfig+0x618>)
 8001768:	4313      	orrs	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800176c:	4b41      	ldr	r3, [pc, #260]	; (8001874 <HAL_RCC_OscConfig+0x618>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a40      	ldr	r2, [pc, #256]	; (8001874 <HAL_RCC_OscConfig+0x618>)
 8001772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001776:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001778:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <HAL_RCC_OscConfig+0x618>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	4a3d      	ldr	r2, [pc, #244]	; (8001874 <HAL_RCC_OscConfig+0x618>)
 800177e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001782:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff f9dc 	bl	8000b40 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff f9d8 	bl	8000b40 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e066      	b.n	800186c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179e:	4b35      	ldr	r3, [pc, #212]	; (8001874 <HAL_RCC_OscConfig+0x618>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x530>
 80017aa:	e05e      	b.n	800186a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ac:	4b31      	ldr	r3, [pc, #196]	; (8001874 <HAL_RCC_OscConfig+0x618>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a30      	ldr	r2, [pc, #192]	; (8001874 <HAL_RCC_OscConfig+0x618>)
 80017b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff f9c2 	bl	8000b40 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff f9be 	bl	8000b40 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e04c      	b.n	800186c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d2:	4b28      	ldr	r3, [pc, #160]	; (8001874 <HAL_RCC_OscConfig+0x618>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80017de:	4b25      	ldr	r3, [pc, #148]	; (8001874 <HAL_RCC_OscConfig+0x618>)
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	4924      	ldr	r1, [pc, #144]	; (8001874 <HAL_RCC_OscConfig+0x618>)
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_RCC_OscConfig+0x620>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	60cb      	str	r3, [r1, #12]
 80017ea:	e03e      	b.n	800186a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e039      	b.n	800186c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80017f8:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <HAL_RCC_OscConfig+0x618>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f003 0203 	and.w	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	429a      	cmp	r2, r3
 800180a:	d12c      	bne.n	8001866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	3b01      	subs	r3, #1
 8001818:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181a:	429a      	cmp	r2, r3
 800181c:	d123      	bne.n	8001866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d11b      	bne.n	8001866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d113      	bne.n	8001866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	085b      	lsrs	r3, r3, #1
 800184a:	3b01      	subs	r3, #1
 800184c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d109      	bne.n	8001866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185c:	085b      	lsrs	r3, r3, #1
 800185e:	3b01      	subs	r3, #1
 8001860:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	019f800c 	.word	0x019f800c
 800187c:	feeefffc 	.word	0xfeeefffc

08001880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e11e      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001898:	4b91      	ldr	r3, [pc, #580]	; (8001ae0 <HAL_RCC_ClockConfig+0x260>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d910      	bls.n	80018c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b8e      	ldr	r3, [pc, #568]	; (8001ae0 <HAL_RCC_ClockConfig+0x260>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 020f 	bic.w	r2, r3, #15
 80018ae:	498c      	ldr	r1, [pc, #560]	; (8001ae0 <HAL_RCC_ClockConfig+0x260>)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b8a      	ldr	r3, [pc, #552]	; (8001ae0 <HAL_RCC_ClockConfig+0x260>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e106      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d073      	beq.n	80019bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d129      	bne.n	8001930 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018dc:	4b81      	ldr	r3, [pc, #516]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0f4      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80018ec:	f000 f99e 	bl	8001c2c <RCC_GetSysClockFreqFromPLLSource>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4a7c      	ldr	r2, [pc, #496]	; (8001ae8 <HAL_RCC_ClockConfig+0x268>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d93f      	bls.n	800197a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018fa:	4b7a      	ldr	r3, [pc, #488]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800190e:	2b00      	cmp	r3, #0
 8001910:	d033      	beq.n	800197a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001916:	2b00      	cmp	r3, #0
 8001918:	d12f      	bne.n	800197a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800191a:	4b72      	ldr	r3, [pc, #456]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001922:	4a70      	ldr	r2, [pc, #448]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 8001924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001928:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e024      	b.n	800197a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d107      	bne.n	8001948 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001938:	4b6a      	ldr	r3, [pc, #424]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d109      	bne.n	8001958 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0c6      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001948:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0be      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001958:	f000 f8ce 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 800195c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4a61      	ldr	r2, [pc, #388]	; (8001ae8 <HAL_RCC_ClockConfig+0x268>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d909      	bls.n	800197a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001966:	4b5f      	ldr	r3, [pc, #380]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800196e:	4a5d      	ldr	r2, [pc, #372]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 8001970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001974:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800197a:	4b5a      	ldr	r3, [pc, #360]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f023 0203 	bic.w	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4957      	ldr	r1, [pc, #348]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800198c:	f7ff f8d8 	bl	8000b40 <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	e00a      	b.n	80019aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001994:	f7ff f8d4 	bl	8000b40 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e095      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	4b4e      	ldr	r3, [pc, #312]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 020c 	and.w	r2, r3, #12
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1eb      	bne.n	8001994 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d023      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d4:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a42      	ldr	r2, [pc, #264]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 80019da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d007      	beq.n	80019fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80019ec:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80019f4:	4a3b      	ldr	r2, [pc, #236]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 80019f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019fc:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4936      	ldr	r1, [pc, #216]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2b80      	cmp	r3, #128	; 0x80
 8001a14:	d105      	bne.n	8001a22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a16:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	4a32      	ldr	r2, [pc, #200]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 8001a1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a22:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <HAL_RCC_ClockConfig+0x260>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d21d      	bcs.n	8001a6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a30:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <HAL_RCC_ClockConfig+0x260>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f023 020f 	bic.w	r2, r3, #15
 8001a38:	4929      	ldr	r1, [pc, #164]	; (8001ae0 <HAL_RCC_ClockConfig+0x260>)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a40:	f7ff f87e 	bl	8000b40 <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7ff f87a 	bl	8000b40 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e03b      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_RCC_ClockConfig+0x260>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1ed      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4917      	ldr	r1, [pc, #92]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	490f      	ldr	r1, [pc, #60]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aaa:	f000 f825 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_RCC_ClockConfig+0x264>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	490c      	ldr	r1, [pc, #48]	; (8001aec <HAL_RCC_ClockConfig+0x26c>)
 8001abc:	5ccb      	ldrb	r3, [r1, r3]
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_RCC_ClockConfig+0x270>)
 8001ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_RCC_ClockConfig+0x274>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe ffea 	bl	8000aa8 <HAL_InitTick>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	04c4b400 	.word	0x04c4b400
 8001aec:	080039b4 	.word	0x080039b4
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000004 	.word	0x20000004

08001af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001afe:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d102      	bne.n	8001b10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b0a:	4b2a      	ldr	r3, [pc, #168]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	e047      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b10:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d102      	bne.n	8001b22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b1c:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	e03e      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	d136      	bne.n	8001b9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	3301      	adds	r3, #1
 8001b44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d10c      	bne.n	8001b66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b4c:	4a1a      	ldr	r2, [pc, #104]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b54:	4a16      	ldr	r2, [pc, #88]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b56:	68d2      	ldr	r2, [r2, #12]
 8001b58:	0a12      	lsrs	r2, r2, #8
 8001b5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
      break;
 8001b64:	e00c      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b66:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6e:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b70:	68d2      	ldr	r2, [r2, #12]
 8001b72:	0a12      	lsrs	r2, r2, #8
 8001b74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b78:	fb02 f303 	mul.w	r3, r2, r3
 8001b7c:	617b      	str	r3, [r7, #20]
      break;
 8001b7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0e5b      	lsrs	r3, r3, #25
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	e001      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ba0:	693b      	ldr	r3, [r7, #16]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	00f42400 	.word	0x00f42400
 8001bb8:	016e3600 	.word	0x016e3600

08001bbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bd8:	f7ff fff0 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4904      	ldr	r1, [pc, #16]	; (8001bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	080039c4 	.word	0x080039c4

08001c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c04:	f7ff ffda 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	0adb      	lsrs	r3, r3, #11
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	4904      	ldr	r1, [pc, #16]	; (8001c28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c16:	5ccb      	ldrb	r3, [r1, r3]
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	080039c4 	.word	0x080039c4

08001c2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3301      	adds	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d10c      	bne.n	8001c6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c50:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	4a14      	ldr	r2, [pc, #80]	; (8001cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c5a:	68d2      	ldr	r2, [r2, #12]
 8001c5c:	0a12      	lsrs	r2, r2, #8
 8001c5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
    break;
 8001c68:	e00c      	b.n	8001c84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c74:	68d2      	ldr	r2, [r2, #12]
 8001c76:	0a12      	lsrs	r2, r2, #8
 8001c78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c7c:	fb02 f303 	mul.w	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
    break;
 8001c82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0e5b      	lsrs	r3, r3, #25
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001c9e:	687b      	ldr	r3, [r7, #4]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	016e3600 	.word	0x016e3600
 8001cb4:	00f42400 	.word	0x00f42400

08001cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 8098 	beq.w	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10d      	bne.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	4a3f      	ldr	r2, [pc, #252]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a39      	ldr	r2, [pc, #228]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d0e:	f7fe ff17 	bl	8000b40 <HAL_GetTick>
 8001d12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d14:	e009      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d16:	f7fe ff13 	bl	8000b40 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d902      	bls.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	74fb      	strb	r3, [r7, #19]
        break;
 8001d28:	e005      	b.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d2a:	4b30      	ldr	r3, [pc, #192]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0ef      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001d36:	7cfb      	ldrb	r3, [r7, #19]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d159      	bne.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d01e      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d019      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d58:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6a:	4a1f      	ldr	r2, [pc, #124]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7a:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d84:	4a18      	ldr	r2, [pc, #96]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d016      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d96:	f7fe fed3 	bl	8000b40 <HAL_GetTick>
 8001d9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9c:	e00b      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7fe fecf 	bl	8000b40 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d902      	bls.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	74fb      	strb	r3, [r7, #19]
            break;
 8001db4:	e006      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ec      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001dc4:	7cfb      	ldrb	r3, [r7, #19]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10b      	bne.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd8:	4903      	ldr	r1, [pc, #12]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001de0:	e008      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001de2:	7cfb      	ldrb	r3, [r7, #19]
 8001de4:	74bb      	strb	r3, [r7, #18]
 8001de6:	e005      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001df4:	7c7b      	ldrb	r3, [r7, #17]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d105      	bne.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfa:	4ba7      	ldr	r3, [pc, #668]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	4aa6      	ldr	r2, [pc, #664]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00a      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e12:	4ba1      	ldr	r3, [pc, #644]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e18:	f023 0203 	bic.w	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	499d      	ldr	r1, [pc, #628]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00a      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e34:	4b98      	ldr	r3, [pc, #608]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3a:	f023 020c 	bic.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	4995      	ldr	r1, [pc, #596]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00a      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e56:	4b90      	ldr	r3, [pc, #576]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	498c      	ldr	r1, [pc, #560]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00a      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e78:	4b87      	ldr	r3, [pc, #540]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	4984      	ldr	r1, [pc, #528]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00a      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e9a:	4b7f      	ldr	r3, [pc, #508]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	497b      	ldr	r1, [pc, #492]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00a      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ebc:	4b76      	ldr	r3, [pc, #472]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	4973      	ldr	r1, [pc, #460]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00a      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ede:	4b6e      	ldr	r3, [pc, #440]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	496a      	ldr	r1, [pc, #424]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00a      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f00:	4b65      	ldr	r3, [pc, #404]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4962      	ldr	r1, [pc, #392]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f22:	4b5d      	ldr	r3, [pc, #372]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	4959      	ldr	r1, [pc, #356]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00a      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f44:	4b54      	ldr	r3, [pc, #336]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f4a:	f023 0203 	bic.w	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	4951      	ldr	r1, [pc, #324]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00a      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f66:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	4948      	ldr	r1, [pc, #288]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d015      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f88:	4b43      	ldr	r3, [pc, #268]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4940      	ldr	r1, [pc, #256]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fa6:	d105      	bne.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fa8:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4a3a      	ldr	r2, [pc, #232]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d015      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fc0:	4b35      	ldr	r3, [pc, #212]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	4932      	ldr	r1, [pc, #200]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fde:	d105      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fe0:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4a2c      	ldr	r2, [pc, #176]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d015      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001ff8:	4b27      	ldr	r3, [pc, #156]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	4924      	ldr	r1, [pc, #144]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002016:	d105      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002018:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002022:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d015      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	4916      	ldr	r1, [pc, #88]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800204e:	d105      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4a10      	ldr	r2, [pc, #64]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800205a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d019      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4908      	ldr	r1, [pc, #32]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002086:	d109      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4a02      	ldr	r2, [pc, #8]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002092:	60d3      	str	r3, [r2, #12]
 8002094:	e002      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d015      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80020a8:	4b29      	ldr	r3, [pc, #164]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	4926      	ldr	r1, [pc, #152]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020c6:	d105      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80020c8:	4b21      	ldr	r3, [pc, #132]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4a20      	ldr	r2, [pc, #128]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d015      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ee:	4918      	ldr	r1, [pc, #96]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fe:	d105      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4a12      	ldr	r2, [pc, #72]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d015      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800211a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800211e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002126:	490a      	ldr	r1, [pc, #40]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002136:	d105      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800213e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002142:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002144:	7cbb      	ldrb	r3, [r7, #18]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000

08002154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e049      	b.n	80021fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fbe0 	bl	8000940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3304      	adds	r3, #4
 8002190:	4619      	mov	r1, r3
 8002192:	4610      	mov	r0, r2
 8002194:	f000 fb3c 	bl	8002810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d001      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e054      	b.n	80022c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a26      	ldr	r2, [pc, #152]	; (80022d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d022      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x80>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002246:	d01d      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x80>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d018      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x80>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a21      	ldr	r2, [pc, #132]	; (80022dc <HAL_TIM_Base_Start_IT+0xd8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d013      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x80>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1f      	ldr	r2, [pc, #124]	; (80022e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00e      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x80>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d009      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x80>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a1c      	ldr	r2, [pc, #112]	; (80022e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d004      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x80>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1b      	ldr	r2, [pc, #108]	; (80022ec <HAL_TIM_Base_Start_IT+0xe8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d115      	bne.n	80022b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_TIM_Base_Start_IT+0xec>)
 800228c:	4013      	ands	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b06      	cmp	r3, #6
 8002294:	d015      	beq.n	80022c2 <HAL_TIM_Base_Start_IT+0xbe>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229c:	d011      	beq.n	80022c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ae:	e008      	b.n	80022c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e000      	b.n	80022c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40012c00 	.word	0x40012c00
 80022d8:	40000400 	.word	0x40000400
 80022dc:	40000800 	.word	0x40000800
 80022e0:	40000c00 	.word	0x40000c00
 80022e4:	40013400 	.word	0x40013400
 80022e8:	40014000 	.word	0x40014000
 80022ec:	40015000 	.word	0x40015000
 80022f0:	00010007 	.word	0x00010007

080022f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d020      	beq.n	8002358 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01b      	beq.n	8002358 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0202 	mvn.w	r2, #2
 8002328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fa48 	bl	80027d4 <HAL_TIM_IC_CaptureCallback>
 8002344:	e005      	b.n	8002352 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fa3a 	bl	80027c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fa4b 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	d020      	beq.n	80023a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01b      	beq.n	80023a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0204 	mvn.w	r2, #4
 8002374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2202      	movs	r2, #2
 800237a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fa22 	bl	80027d4 <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fa14 	bl	80027c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fa25 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d020      	beq.n	80023f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01b      	beq.n	80023f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0208 	mvn.w	r2, #8
 80023c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2204      	movs	r2, #4
 80023c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f9fc 	bl	80027d4 <HAL_TIM_IC_CaptureCallback>
 80023dc:	e005      	b.n	80023ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f9ee 	bl	80027c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f9ff 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d020      	beq.n	800243c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01b      	beq.n	800243c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0210 	mvn.w	r2, #16
 800240c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2208      	movs	r2, #8
 8002412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f9d6 	bl	80027d4 <HAL_TIM_IC_CaptureCallback>
 8002428:	e005      	b.n	8002436 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f9c8 	bl	80027c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f9d9 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00c      	beq.n	8002460 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0201 	mvn.w	r2, #1
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe f9d6 	bl	800080c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002466:	2b00      	cmp	r3, #0
 8002468:	d104      	bne.n	8002474 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00c      	beq.n	800248e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8002486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fbb1 	bl	8002bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00c      	beq.n	80024b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fba9 	bl	8002c04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00c      	beq.n	80024d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f993 	bl	80027fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00c      	beq.n	80024fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d007      	beq.n	80024fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f06f 0220 	mvn.w	r2, #32
 80024f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fb71 	bl	8002bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00c      	beq.n	800251e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fb7d 	bl	8002c18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00c      	beq.n	8002542 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800253a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fb75 	bl	8002c2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00c      	beq.n	8002566 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800255e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fb6d 	bl	8002c40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00c      	beq.n	800258a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fb65 	bl	8002c54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_TIM_ConfigClockSource+0x1c>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e0f6      	b.n	800279e <HAL_TIM_ConfigClockSource+0x20a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80025ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a6f      	ldr	r2, [pc, #444]	; (80027a8 <HAL_TIM_ConfigClockSource+0x214>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	f000 80c1 	beq.w	8002772 <HAL_TIM_ConfigClockSource+0x1de>
 80025f0:	4a6d      	ldr	r2, [pc, #436]	; (80027a8 <HAL_TIM_ConfigClockSource+0x214>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	f200 80c6 	bhi.w	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 80025f8:	4a6c      	ldr	r2, [pc, #432]	; (80027ac <HAL_TIM_ConfigClockSource+0x218>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	f000 80b9 	beq.w	8002772 <HAL_TIM_ConfigClockSource+0x1de>
 8002600:	4a6a      	ldr	r2, [pc, #424]	; (80027ac <HAL_TIM_ConfigClockSource+0x218>)
 8002602:	4293      	cmp	r3, r2
 8002604:	f200 80be 	bhi.w	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 8002608:	4a69      	ldr	r2, [pc, #420]	; (80027b0 <HAL_TIM_ConfigClockSource+0x21c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	f000 80b1 	beq.w	8002772 <HAL_TIM_ConfigClockSource+0x1de>
 8002610:	4a67      	ldr	r2, [pc, #412]	; (80027b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	f200 80b6 	bhi.w	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 8002618:	4a66      	ldr	r2, [pc, #408]	; (80027b4 <HAL_TIM_ConfigClockSource+0x220>)
 800261a:	4293      	cmp	r3, r2
 800261c:	f000 80a9 	beq.w	8002772 <HAL_TIM_ConfigClockSource+0x1de>
 8002620:	4a64      	ldr	r2, [pc, #400]	; (80027b4 <HAL_TIM_ConfigClockSource+0x220>)
 8002622:	4293      	cmp	r3, r2
 8002624:	f200 80ae 	bhi.w	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 8002628:	4a63      	ldr	r2, [pc, #396]	; (80027b8 <HAL_TIM_ConfigClockSource+0x224>)
 800262a:	4293      	cmp	r3, r2
 800262c:	f000 80a1 	beq.w	8002772 <HAL_TIM_ConfigClockSource+0x1de>
 8002630:	4a61      	ldr	r2, [pc, #388]	; (80027b8 <HAL_TIM_ConfigClockSource+0x224>)
 8002632:	4293      	cmp	r3, r2
 8002634:	f200 80a6 	bhi.w	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 8002638:	4a60      	ldr	r2, [pc, #384]	; (80027bc <HAL_TIM_ConfigClockSource+0x228>)
 800263a:	4293      	cmp	r3, r2
 800263c:	f000 8099 	beq.w	8002772 <HAL_TIM_ConfigClockSource+0x1de>
 8002640:	4a5e      	ldr	r2, [pc, #376]	; (80027bc <HAL_TIM_ConfigClockSource+0x228>)
 8002642:	4293      	cmp	r3, r2
 8002644:	f200 809e 	bhi.w	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 8002648:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800264c:	f000 8091 	beq.w	8002772 <HAL_TIM_ConfigClockSource+0x1de>
 8002650:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002654:	f200 8096 	bhi.w	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 8002658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800265c:	f000 8089 	beq.w	8002772 <HAL_TIM_ConfigClockSource+0x1de>
 8002660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002664:	f200 808e 	bhi.w	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 8002668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800266c:	d03e      	beq.n	80026ec <HAL_TIM_ConfigClockSource+0x158>
 800266e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002672:	f200 8087 	bhi.w	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 8002676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800267a:	f000 8086 	beq.w	800278a <HAL_TIM_ConfigClockSource+0x1f6>
 800267e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002682:	d87f      	bhi.n	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 8002684:	2b70      	cmp	r3, #112	; 0x70
 8002686:	d01a      	beq.n	80026be <HAL_TIM_ConfigClockSource+0x12a>
 8002688:	2b70      	cmp	r3, #112	; 0x70
 800268a:	d87b      	bhi.n	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 800268c:	2b60      	cmp	r3, #96	; 0x60
 800268e:	d050      	beq.n	8002732 <HAL_TIM_ConfigClockSource+0x19e>
 8002690:	2b60      	cmp	r3, #96	; 0x60
 8002692:	d877      	bhi.n	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 8002694:	2b50      	cmp	r3, #80	; 0x50
 8002696:	d03c      	beq.n	8002712 <HAL_TIM_ConfigClockSource+0x17e>
 8002698:	2b50      	cmp	r3, #80	; 0x50
 800269a:	d873      	bhi.n	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d058      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0x1be>
 80026a0:	2b40      	cmp	r3, #64	; 0x40
 80026a2:	d86f      	bhi.n	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 80026a4:	2b30      	cmp	r3, #48	; 0x30
 80026a6:	d064      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x1de>
 80026a8:	2b30      	cmp	r3, #48	; 0x30
 80026aa:	d86b      	bhi.n	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d060      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x1de>
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d867      	bhi.n	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d05c      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x1de>
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	d05a      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x1de>
 80026bc:	e062      	b.n	8002784 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026ce:	f000 f9cf 	bl	8002a70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	609a      	str	r2, [r3, #8]
      break;
 80026ea:	e04f      	b.n	800278c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026fc:	f000 f9b8 	bl	8002a70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800270e:	609a      	str	r2, [r3, #8]
      break;
 8002710:	e03c      	b.n	800278c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800271e:	461a      	mov	r2, r3
 8002720:	f000 f92a 	bl	8002978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2150      	movs	r1, #80	; 0x50
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f983 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 8002730:	e02c      	b.n	800278c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800273e:	461a      	mov	r2, r3
 8002740:	f000 f949 	bl	80029d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2160      	movs	r1, #96	; 0x60
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f973 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 8002750:	e01c      	b.n	800278c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800275e:	461a      	mov	r2, r3
 8002760:	f000 f90a 	bl	8002978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2140      	movs	r1, #64	; 0x40
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f963 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 8002770:	e00c      	b.n	800278c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4619      	mov	r1, r3
 800277c:	4610      	mov	r0, r2
 800277e:	f000 f95a 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 8002782:	e003      	b.n	800278c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      break;
 8002788:	e000      	b.n	800278c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800278a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	00100070 	.word	0x00100070
 80027ac:	00100060 	.word	0x00100060
 80027b0:	00100050 	.word	0x00100050
 80027b4:	00100040 	.word	0x00100040
 80027b8:	00100030 	.word	0x00100030
 80027bc:	00100020 	.word	0x00100020

080027c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a4c      	ldr	r2, [pc, #304]	; (8002954 <TIM_Base_SetConfig+0x144>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d017      	beq.n	8002858 <TIM_Base_SetConfig+0x48>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282e:	d013      	beq.n	8002858 <TIM_Base_SetConfig+0x48>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a49      	ldr	r2, [pc, #292]	; (8002958 <TIM_Base_SetConfig+0x148>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00f      	beq.n	8002858 <TIM_Base_SetConfig+0x48>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a48      	ldr	r2, [pc, #288]	; (800295c <TIM_Base_SetConfig+0x14c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00b      	beq.n	8002858 <TIM_Base_SetConfig+0x48>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a47      	ldr	r2, [pc, #284]	; (8002960 <TIM_Base_SetConfig+0x150>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <TIM_Base_SetConfig+0x48>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a46      	ldr	r2, [pc, #280]	; (8002964 <TIM_Base_SetConfig+0x154>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d003      	beq.n	8002858 <TIM_Base_SetConfig+0x48>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a45      	ldr	r2, [pc, #276]	; (8002968 <TIM_Base_SetConfig+0x158>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d108      	bne.n	800286a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a39      	ldr	r2, [pc, #228]	; (8002954 <TIM_Base_SetConfig+0x144>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d023      	beq.n	80028ba <TIM_Base_SetConfig+0xaa>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002878:	d01f      	beq.n	80028ba <TIM_Base_SetConfig+0xaa>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a36      	ldr	r2, [pc, #216]	; (8002958 <TIM_Base_SetConfig+0x148>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d01b      	beq.n	80028ba <TIM_Base_SetConfig+0xaa>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a35      	ldr	r2, [pc, #212]	; (800295c <TIM_Base_SetConfig+0x14c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d017      	beq.n	80028ba <TIM_Base_SetConfig+0xaa>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a34      	ldr	r2, [pc, #208]	; (8002960 <TIM_Base_SetConfig+0x150>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <TIM_Base_SetConfig+0xaa>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a33      	ldr	r2, [pc, #204]	; (8002964 <TIM_Base_SetConfig+0x154>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00f      	beq.n	80028ba <TIM_Base_SetConfig+0xaa>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a33      	ldr	r2, [pc, #204]	; (800296c <TIM_Base_SetConfig+0x15c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00b      	beq.n	80028ba <TIM_Base_SetConfig+0xaa>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a32      	ldr	r2, [pc, #200]	; (8002970 <TIM_Base_SetConfig+0x160>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <TIM_Base_SetConfig+0xaa>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a31      	ldr	r2, [pc, #196]	; (8002974 <TIM_Base_SetConfig+0x164>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d003      	beq.n	80028ba <TIM_Base_SetConfig+0xaa>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a2c      	ldr	r2, [pc, #176]	; (8002968 <TIM_Base_SetConfig+0x158>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d108      	bne.n	80028cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a18      	ldr	r2, [pc, #96]	; (8002954 <TIM_Base_SetConfig+0x144>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d013      	beq.n	8002920 <TIM_Base_SetConfig+0x110>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a1a      	ldr	r2, [pc, #104]	; (8002964 <TIM_Base_SetConfig+0x154>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00f      	beq.n	8002920 <TIM_Base_SetConfig+0x110>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a1a      	ldr	r2, [pc, #104]	; (800296c <TIM_Base_SetConfig+0x15c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00b      	beq.n	8002920 <TIM_Base_SetConfig+0x110>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a19      	ldr	r2, [pc, #100]	; (8002970 <TIM_Base_SetConfig+0x160>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d007      	beq.n	8002920 <TIM_Base_SetConfig+0x110>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a18      	ldr	r2, [pc, #96]	; (8002974 <TIM_Base_SetConfig+0x164>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d003      	beq.n	8002920 <TIM_Base_SetConfig+0x110>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a13      	ldr	r2, [pc, #76]	; (8002968 <TIM_Base_SetConfig+0x158>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d105      	bne.n	8002946 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f023 0201 	bic.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	611a      	str	r2, [r3, #16]
  }
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40000400 	.word	0x40000400
 800295c:	40000800 	.word	0x40000800
 8002960:	40000c00 	.word	0x40000c00
 8002964:	40013400 	.word	0x40013400
 8002968:	40015000 	.word	0x40015000
 800296c:	40014000 	.word	0x40014000
 8002970:	40014400 	.word	0x40014400
 8002974:	40014800 	.word	0x40014800

08002978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	f023 0201 	bic.w	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f023 030a 	bic.w	r3, r3, #10
 80029b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	621a      	str	r2, [r3, #32]
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b087      	sub	sp, #28
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f023 0210 	bic.w	r2, r3, #16
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	031b      	lsls	r3, r3, #12
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f043 0307 	orr.w	r3, r3, #7
 8002a5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	609a      	str	r2, [r3, #8]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	021a      	lsls	r2, r3, #8
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e074      	b.n	8002bb2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a34      	ldr	r2, [pc, #208]	; (8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d009      	beq.n	8002b06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a33      	ldr	r2, [pc, #204]	; (8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d004      	beq.n	8002b06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a31      	ldr	r2, [pc, #196]	; (8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d108      	bne.n	8002b18 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a21      	ldr	r2, [pc, #132]	; (8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d022      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b48:	d01d      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d018      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1d      	ldr	r2, [pc, #116]	; (8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a15      	ldr	r2, [pc, #84]	; (8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a11      	ldr	r2, [pc, #68]	; (8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10c      	bne.n	8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40012c00 	.word	0x40012c00
 8002bc4:	40013400 	.word	0x40013400
 8002bc8:	40015000 	.word	0x40015000
 8002bcc:	40000400 	.word	0x40000400
 8002bd0:	40000800 	.word	0x40000800
 8002bd4:	40000c00 	.word	0x40000c00
 8002bd8:	40014000 	.word	0x40014000

08002bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e042      	b.n	8002d00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d106      	bne.n	8002c92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7fd fdff 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2224      	movs	r2, #36	; 0x24
 8002c96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fb24 	bl	8003300 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f825 	bl	8002d08 <UART_SetConfig>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e01b      	b.n	8002d00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ce6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fba3 	bl	8003444 <UART_CheckIdleState>
 8002cfe:	4603      	mov	r3, r0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d0c:	b08c      	sub	sp, #48	; 0x30
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4baa      	ldr	r3, [pc, #680]	; (8002fe0 <UART_SetConfig+0x2d8>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a9f      	ldr	r2, [pc, #636]	; (8002fe4 <UART_SetConfig+0x2dc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d004      	beq.n	8002d74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d70:	4313      	orrs	r3, r2
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002d7e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	f023 010f 	bic.w	r1, r3, #15
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a90      	ldr	r2, [pc, #576]	; (8002fe8 <UART_SetConfig+0x2e0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d125      	bne.n	8002df8 <UART_SetConfig+0xf0>
 8002dac:	4b8f      	ldr	r3, [pc, #572]	; (8002fec <UART_SetConfig+0x2e4>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d81a      	bhi.n	8002df0 <UART_SetConfig+0xe8>
 8002dba:	a201      	add	r2, pc, #4	; (adr r2, 8002dc0 <UART_SetConfig+0xb8>)
 8002dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc0:	08002dd1 	.word	0x08002dd1
 8002dc4:	08002de1 	.word	0x08002de1
 8002dc8:	08002dd9 	.word	0x08002dd9
 8002dcc:	08002de9 	.word	0x08002de9
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dd6:	e116      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dde:	e112      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002de0:	2304      	movs	r3, #4
 8002de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002de6:	e10e      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002de8:	2308      	movs	r3, #8
 8002dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dee:	e10a      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002df0:	2310      	movs	r3, #16
 8002df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002df6:	e106      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a7c      	ldr	r2, [pc, #496]	; (8002ff0 <UART_SetConfig+0x2e8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d138      	bne.n	8002e74 <UART_SetConfig+0x16c>
 8002e02:	4b7a      	ldr	r3, [pc, #488]	; (8002fec <UART_SetConfig+0x2e4>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b0c      	cmp	r3, #12
 8002e0e:	d82d      	bhi.n	8002e6c <UART_SetConfig+0x164>
 8002e10:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <UART_SetConfig+0x110>)
 8002e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e16:	bf00      	nop
 8002e18:	08002e4d 	.word	0x08002e4d
 8002e1c:	08002e6d 	.word	0x08002e6d
 8002e20:	08002e6d 	.word	0x08002e6d
 8002e24:	08002e6d 	.word	0x08002e6d
 8002e28:	08002e5d 	.word	0x08002e5d
 8002e2c:	08002e6d 	.word	0x08002e6d
 8002e30:	08002e6d 	.word	0x08002e6d
 8002e34:	08002e6d 	.word	0x08002e6d
 8002e38:	08002e55 	.word	0x08002e55
 8002e3c:	08002e6d 	.word	0x08002e6d
 8002e40:	08002e6d 	.word	0x08002e6d
 8002e44:	08002e6d 	.word	0x08002e6d
 8002e48:	08002e65 	.word	0x08002e65
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e52:	e0d8      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002e54:	2302      	movs	r3, #2
 8002e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e5a:	e0d4      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e62:	e0d0      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002e64:	2308      	movs	r3, #8
 8002e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e6a:	e0cc      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002e6c:	2310      	movs	r3, #16
 8002e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e72:	e0c8      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a5e      	ldr	r2, [pc, #376]	; (8002ff4 <UART_SetConfig+0x2ec>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d125      	bne.n	8002eca <UART_SetConfig+0x1c2>
 8002e7e:	4b5b      	ldr	r3, [pc, #364]	; (8002fec <UART_SetConfig+0x2e4>)
 8002e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e88:	2b30      	cmp	r3, #48	; 0x30
 8002e8a:	d016      	beq.n	8002eba <UART_SetConfig+0x1b2>
 8002e8c:	2b30      	cmp	r3, #48	; 0x30
 8002e8e:	d818      	bhi.n	8002ec2 <UART_SetConfig+0x1ba>
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d00a      	beq.n	8002eaa <UART_SetConfig+0x1a2>
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d814      	bhi.n	8002ec2 <UART_SetConfig+0x1ba>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <UART_SetConfig+0x19a>
 8002e9c:	2b10      	cmp	r3, #16
 8002e9e:	d008      	beq.n	8002eb2 <UART_SetConfig+0x1aa>
 8002ea0:	e00f      	b.n	8002ec2 <UART_SetConfig+0x1ba>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ea8:	e0ad      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eb0:	e0a9      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eb8:	e0a5      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002eba:	2308      	movs	r3, #8
 8002ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ec0:	e0a1      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002ec2:	2310      	movs	r3, #16
 8002ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ec8:	e09d      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a4a      	ldr	r2, [pc, #296]	; (8002ff8 <UART_SetConfig+0x2f0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d125      	bne.n	8002f20 <UART_SetConfig+0x218>
 8002ed4:	4b45      	ldr	r3, [pc, #276]	; (8002fec <UART_SetConfig+0x2e4>)
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ede:	2bc0      	cmp	r3, #192	; 0xc0
 8002ee0:	d016      	beq.n	8002f10 <UART_SetConfig+0x208>
 8002ee2:	2bc0      	cmp	r3, #192	; 0xc0
 8002ee4:	d818      	bhi.n	8002f18 <UART_SetConfig+0x210>
 8002ee6:	2b80      	cmp	r3, #128	; 0x80
 8002ee8:	d00a      	beq.n	8002f00 <UART_SetConfig+0x1f8>
 8002eea:	2b80      	cmp	r3, #128	; 0x80
 8002eec:	d814      	bhi.n	8002f18 <UART_SetConfig+0x210>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <UART_SetConfig+0x1f0>
 8002ef2:	2b40      	cmp	r3, #64	; 0x40
 8002ef4:	d008      	beq.n	8002f08 <UART_SetConfig+0x200>
 8002ef6:	e00f      	b.n	8002f18 <UART_SetConfig+0x210>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002efe:	e082      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002f00:	2302      	movs	r3, #2
 8002f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f06:	e07e      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002f08:	2304      	movs	r3, #4
 8002f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f0e:	e07a      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002f10:	2308      	movs	r3, #8
 8002f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f16:	e076      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002f18:	2310      	movs	r3, #16
 8002f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f1e:	e072      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a35      	ldr	r2, [pc, #212]	; (8002ffc <UART_SetConfig+0x2f4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d12a      	bne.n	8002f80 <UART_SetConfig+0x278>
 8002f2a:	4b30      	ldr	r3, [pc, #192]	; (8002fec <UART_SetConfig+0x2e4>)
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f38:	d01a      	beq.n	8002f70 <UART_SetConfig+0x268>
 8002f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f3e:	d81b      	bhi.n	8002f78 <UART_SetConfig+0x270>
 8002f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f44:	d00c      	beq.n	8002f60 <UART_SetConfig+0x258>
 8002f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f4a:	d815      	bhi.n	8002f78 <UART_SetConfig+0x270>
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <UART_SetConfig+0x250>
 8002f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f54:	d008      	beq.n	8002f68 <UART_SetConfig+0x260>
 8002f56:	e00f      	b.n	8002f78 <UART_SetConfig+0x270>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f5e:	e052      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002f60:	2302      	movs	r3, #2
 8002f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f66:	e04e      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f6e:	e04a      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002f70:	2308      	movs	r3, #8
 8002f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f76:	e046      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f7e:	e042      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <UART_SetConfig+0x2dc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d13a      	bne.n	8003000 <UART_SetConfig+0x2f8>
 8002f8a:	4b18      	ldr	r3, [pc, #96]	; (8002fec <UART_SetConfig+0x2e4>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f98:	d01a      	beq.n	8002fd0 <UART_SetConfig+0x2c8>
 8002f9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f9e:	d81b      	bhi.n	8002fd8 <UART_SetConfig+0x2d0>
 8002fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fa4:	d00c      	beq.n	8002fc0 <UART_SetConfig+0x2b8>
 8002fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002faa:	d815      	bhi.n	8002fd8 <UART_SetConfig+0x2d0>
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <UART_SetConfig+0x2b0>
 8002fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb4:	d008      	beq.n	8002fc8 <UART_SetConfig+0x2c0>
 8002fb6:	e00f      	b.n	8002fd8 <UART_SetConfig+0x2d0>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fbe:	e022      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fc6:	e01e      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002fc8:	2304      	movs	r3, #4
 8002fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fce:	e01a      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fd6:	e016      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fde:	e012      	b.n	8003006 <UART_SetConfig+0x2fe>
 8002fe0:	cfff69f3 	.word	0xcfff69f3
 8002fe4:	40008000 	.word	0x40008000
 8002fe8:	40013800 	.word	0x40013800
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40004400 	.word	0x40004400
 8002ff4:	40004800 	.word	0x40004800
 8002ff8:	40004c00 	.word	0x40004c00
 8002ffc:	40005000 	.word	0x40005000
 8003000:	2310      	movs	r3, #16
 8003002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4aae      	ldr	r2, [pc, #696]	; (80032c4 <UART_SetConfig+0x5bc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	f040 8097 	bne.w	8003140 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003012:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003016:	2b08      	cmp	r3, #8
 8003018:	d823      	bhi.n	8003062 <UART_SetConfig+0x35a>
 800301a:	a201      	add	r2, pc, #4	; (adr r2, 8003020 <UART_SetConfig+0x318>)
 800301c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003020:	08003045 	.word	0x08003045
 8003024:	08003063 	.word	0x08003063
 8003028:	0800304d 	.word	0x0800304d
 800302c:	08003063 	.word	0x08003063
 8003030:	08003053 	.word	0x08003053
 8003034:	08003063 	.word	0x08003063
 8003038:	08003063 	.word	0x08003063
 800303c:	08003063 	.word	0x08003063
 8003040:	0800305b 	.word	0x0800305b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003044:	f7fe fdc6 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8003048:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800304a:	e010      	b.n	800306e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800304c:	4b9e      	ldr	r3, [pc, #632]	; (80032c8 <UART_SetConfig+0x5c0>)
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003050:	e00d      	b.n	800306e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003052:	f7fe fd51 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8003056:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003058:	e009      	b.n	800306e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800305a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003060:	e005      	b.n	800306e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800306c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8130 	beq.w	80032d6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	4a94      	ldr	r2, [pc, #592]	; (80032cc <UART_SetConfig+0x5c4>)
 800307c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003080:	461a      	mov	r2, r3
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	fbb3 f3f2 	udiv	r3, r3, r2
 8003088:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	429a      	cmp	r2, r3
 8003098:	d305      	bcc.n	80030a6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d903      	bls.n	80030ae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80030ac:	e113      	b.n	80032d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	2200      	movs	r2, #0
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	60fa      	str	r2, [r7, #12]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	4a84      	ldr	r2, [pc, #528]	; (80032cc <UART_SetConfig+0x5c4>)
 80030bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2200      	movs	r2, #0
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030d0:	f7fd f8a2 	bl	8000218 <__aeabi_uldivmod>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	020b      	lsls	r3, r1, #8
 80030e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030ea:	0202      	lsls	r2, r0, #8
 80030ec:	6979      	ldr	r1, [r7, #20]
 80030ee:	6849      	ldr	r1, [r1, #4]
 80030f0:	0849      	lsrs	r1, r1, #1
 80030f2:	2000      	movs	r0, #0
 80030f4:	460c      	mov	r4, r1
 80030f6:	4605      	mov	r5, r0
 80030f8:	eb12 0804 	adds.w	r8, r2, r4
 80030fc:	eb43 0905 	adc.w	r9, r3, r5
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	469a      	mov	sl, r3
 8003108:	4693      	mov	fp, r2
 800310a:	4652      	mov	r2, sl
 800310c:	465b      	mov	r3, fp
 800310e:	4640      	mov	r0, r8
 8003110:	4649      	mov	r1, r9
 8003112:	f7fd f881 	bl	8000218 <__aeabi_uldivmod>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4613      	mov	r3, r2
 800311c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003124:	d308      	bcc.n	8003138 <UART_SetConfig+0x430>
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800312c:	d204      	bcs.n	8003138 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6a3a      	ldr	r2, [r7, #32]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	e0ce      	b.n	80032d6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800313e:	e0ca      	b.n	80032d6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003148:	d166      	bne.n	8003218 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800314a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800314e:	2b08      	cmp	r3, #8
 8003150:	d827      	bhi.n	80031a2 <UART_SetConfig+0x49a>
 8003152:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <UART_SetConfig+0x450>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	0800317d 	.word	0x0800317d
 800315c:	08003185 	.word	0x08003185
 8003160:	0800318d 	.word	0x0800318d
 8003164:	080031a3 	.word	0x080031a3
 8003168:	08003193 	.word	0x08003193
 800316c:	080031a3 	.word	0x080031a3
 8003170:	080031a3 	.word	0x080031a3
 8003174:	080031a3 	.word	0x080031a3
 8003178:	0800319b 	.word	0x0800319b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800317c:	f7fe fd2a 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8003180:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003182:	e014      	b.n	80031ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003184:	f7fe fd3c 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 8003188:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800318a:	e010      	b.n	80031ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800318c:	4b4e      	ldr	r3, [pc, #312]	; (80032c8 <UART_SetConfig+0x5c0>)
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003190:	e00d      	b.n	80031ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003192:	f7fe fcb1 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8003196:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003198:	e009      	b.n	80031ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800319a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80031a0:	e005      	b.n	80031ae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80031ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8090 	beq.w	80032d6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	4a44      	ldr	r2, [pc, #272]	; (80032cc <UART_SetConfig+0x5c4>)
 80031bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031c0:	461a      	mov	r2, r3
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80031c8:	005a      	lsls	r2, r3, #1
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	085b      	lsrs	r3, r3, #1
 80031d0:	441a      	add	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	2b0f      	cmp	r3, #15
 80031e0:	d916      	bls.n	8003210 <UART_SetConfig+0x508>
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e8:	d212      	bcs.n	8003210 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	f023 030f 	bic.w	r3, r3, #15
 80031f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	b29a      	uxth	r2, r3
 8003200:	8bfb      	ldrh	r3, [r7, #30]
 8003202:	4313      	orrs	r3, r2
 8003204:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	8bfa      	ldrh	r2, [r7, #30]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	e062      	b.n	80032d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003216:	e05e      	b.n	80032d6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003218:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800321c:	2b08      	cmp	r3, #8
 800321e:	d828      	bhi.n	8003272 <UART_SetConfig+0x56a>
 8003220:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <UART_SetConfig+0x520>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	0800324d 	.word	0x0800324d
 800322c:	08003255 	.word	0x08003255
 8003230:	0800325d 	.word	0x0800325d
 8003234:	08003273 	.word	0x08003273
 8003238:	08003263 	.word	0x08003263
 800323c:	08003273 	.word	0x08003273
 8003240:	08003273 	.word	0x08003273
 8003244:	08003273 	.word	0x08003273
 8003248:	0800326b 	.word	0x0800326b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800324c:	f7fe fcc2 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8003250:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003252:	e014      	b.n	800327e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003254:	f7fe fcd4 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 8003258:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800325a:	e010      	b.n	800327e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800325c:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <UART_SetConfig+0x5c0>)
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003260:	e00d      	b.n	800327e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003262:	f7fe fc49 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8003266:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003268:	e009      	b.n	800327e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800326a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003270:	e005      	b.n	800327e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800327c:	bf00      	nop
    }

    if (pclk != 0U)
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	2b00      	cmp	r3, #0
 8003282:	d028      	beq.n	80032d6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	4a10      	ldr	r2, [pc, #64]	; (80032cc <UART_SetConfig+0x5c4>)
 800328a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800328e:	461a      	mov	r2, r3
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	fbb3 f2f2 	udiv	r2, r3, r2
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	441a      	add	r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	2b0f      	cmp	r3, #15
 80032ac:	d910      	bls.n	80032d0 <UART_SetConfig+0x5c8>
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b4:	d20c      	bcs.n	80032d0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60da      	str	r2, [r3, #12]
 80032c0:	e009      	b.n	80032d6 <UART_SetConfig+0x5ce>
 80032c2:	bf00      	nop
 80032c4:	40008000 	.word	0x40008000
 80032c8:	00f42400 	.word	0x00f42400
 80032cc:	080039cc 	.word	0x080039cc
      }
      else
      {
        ret = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2201      	movs	r2, #1
 80032da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2200      	movs	r2, #0
 80032ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2200      	movs	r2, #0
 80032f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80032f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3730      	adds	r7, #48	; 0x30
 80032fa:	46bd      	mov	sp, r7
 80032fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01a      	beq.n	8003416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033fe:	d10a      	bne.n	8003416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
  }
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b098      	sub	sp, #96	; 0x60
 8003448:	af02      	add	r7, sp, #8
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003454:	f7fd fb74 	bl	8000b40 <HAL_GetTick>
 8003458:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b08      	cmp	r3, #8
 8003466:	d12f      	bne.n	80034c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003468:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003470:	2200      	movs	r2, #0
 8003472:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f88e 	bl	8003598 <UART_WaitOnFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d022      	beq.n	80034c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003496:	653b      	str	r3, [r7, #80]	; 0x50
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a0:	647b      	str	r3, [r7, #68]	; 0x44
 80034a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034a8:	e841 2300 	strex	r3, r2, [r1]
 80034ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e6      	bne.n	8003482 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e063      	b.n	8003590 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d149      	bne.n	800356a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034de:	2200      	movs	r2, #0
 80034e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f857 	bl	8003598 <UART_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d03c      	beq.n	800356a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	623b      	str	r3, [r7, #32]
   return(result);
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003504:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800350e:	633b      	str	r3, [r7, #48]	; 0x30
 8003510:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003516:	e841 2300 	strex	r3, r2, [r1]
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1e6      	bne.n	80034f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3308      	adds	r3, #8
 8003528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	e853 3f00 	ldrex	r3, [r3]
 8003530:	60fb      	str	r3, [r7, #12]
   return(result);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	64bb      	str	r3, [r7, #72]	; 0x48
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3308      	adds	r3, #8
 8003540:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003542:	61fa      	str	r2, [r7, #28]
 8003544:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003546:	69b9      	ldr	r1, [r7, #24]
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	e841 2300 	strex	r3, r2, [r1]
 800354e:	617b      	str	r3, [r7, #20]
   return(result);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e5      	bne.n	8003522 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e012      	b.n	8003590 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3758      	adds	r7, #88	; 0x58
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a8:	e04f      	b.n	800364a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035b0:	d04b      	beq.n	800364a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7fd fac5 	bl	8000b40 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e04e      	b.n	800366a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d037      	beq.n	800364a <UART_WaitOnFlagUntilTimeout+0xb2>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b80      	cmp	r3, #128	; 0x80
 80035de:	d034      	beq.n	800364a <UART_WaitOnFlagUntilTimeout+0xb2>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d031      	beq.n	800364a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d110      	bne.n	8003616 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2208      	movs	r2, #8
 80035fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f838 	bl	8003672 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2208      	movs	r2, #8
 8003606:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e029      	b.n	800366a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003624:	d111      	bne.n	800364a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800362e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f81e 	bl	8003672 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2220      	movs	r2, #32
 800363a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e00f      	b.n	800366a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4013      	ands	r3, r2
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	429a      	cmp	r2, r3
 8003658:	bf0c      	ite	eq
 800365a:	2301      	moveq	r3, #1
 800365c:	2300      	movne	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	429a      	cmp	r2, r3
 8003666:	d0a0      	beq.n	80035aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003672:	b480      	push	{r7}
 8003674:	b095      	sub	sp, #84	; 0x54
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003682:	e853 3f00 	ldrex	r3, [r3]
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003698:	643b      	str	r3, [r7, #64]	; 0x40
 800369a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800369e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e6      	bne.n	800367a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3308      	adds	r3, #8
 80036b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	e853 3f00 	ldrex	r3, [r3]
 80036ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3308      	adds	r3, #8
 80036ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d8:	e841 2300 	strex	r3, r2, [r1]
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e3      	bne.n	80036ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d118      	bne.n	800371e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f023 0310 	bic.w	r3, r3, #16
 8003700:	647b      	str	r3, [r7, #68]	; 0x44
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370a:	61bb      	str	r3, [r7, #24]
 800370c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	6979      	ldr	r1, [r7, #20]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	613b      	str	r3, [r7, #16]
   return(result);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e6      	bne.n	80036ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003732:	bf00      	nop
 8003734:	3754      	adds	r7, #84	; 0x54
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_UARTEx_DisableFifoMode+0x16>
 8003750:	2302      	movs	r3, #2
 8003752:	e027      	b.n	80037a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2224      	movs	r2, #36	; 0x24
 8003760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003782:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e02d      	b.n	8003824 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2224      	movs	r2, #36	; 0x24
 80037d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f84f 	bl	80038a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003840:	2302      	movs	r3, #2
 8003842:	e02d      	b.n	80038a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2224      	movs	r2, #36	; 0x24
 8003850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f811 	bl	80038a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d108      	bne.n	80038ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80038c8:	e031      	b.n	800392e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80038ca:	2308      	movs	r3, #8
 80038cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80038ce:	2308      	movs	r3, #8
 80038d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	0e5b      	lsrs	r3, r3, #25
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	0f5b      	lsrs	r3, r3, #29
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038f2:	7bbb      	ldrb	r3, [r7, #14]
 80038f4:	7b3a      	ldrb	r2, [r7, #12]
 80038f6:	4911      	ldr	r1, [pc, #68]	; (800393c <UARTEx_SetNbDataToProcess+0x94>)
 80038f8:	5c8a      	ldrb	r2, [r1, r2]
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038fe:	7b3a      	ldrb	r2, [r7, #12]
 8003900:	490f      	ldr	r1, [pc, #60]	; (8003940 <UARTEx_SetNbDataToProcess+0x98>)
 8003902:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003904:	fb93 f3f2 	sdiv	r3, r3, r2
 8003908:	b29a      	uxth	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	7b7a      	ldrb	r2, [r7, #13]
 8003914:	4909      	ldr	r1, [pc, #36]	; (800393c <UARTEx_SetNbDataToProcess+0x94>)
 8003916:	5c8a      	ldrb	r2, [r1, r2]
 8003918:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800391c:	7b7a      	ldrb	r2, [r7, #13]
 800391e:	4908      	ldr	r1, [pc, #32]	; (8003940 <UARTEx_SetNbDataToProcess+0x98>)
 8003920:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003922:	fb93 f3f2 	sdiv	r3, r3, r2
 8003926:	b29a      	uxth	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	080039e4 	.word	0x080039e4
 8003940:	080039ec 	.word	0x080039ec

08003944 <memset>:
 8003944:	4402      	add	r2, r0
 8003946:	4603      	mov	r3, r0
 8003948:	4293      	cmp	r3, r2
 800394a:	d100      	bne.n	800394e <memset+0xa>
 800394c:	4770      	bx	lr
 800394e:	f803 1b01 	strb.w	r1, [r3], #1
 8003952:	e7f9      	b.n	8003948 <memset+0x4>

08003954 <__libc_init_array>:
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	4d0d      	ldr	r5, [pc, #52]	; (800398c <__libc_init_array+0x38>)
 8003958:	4c0d      	ldr	r4, [pc, #52]	; (8003990 <__libc_init_array+0x3c>)
 800395a:	1b64      	subs	r4, r4, r5
 800395c:	10a4      	asrs	r4, r4, #2
 800395e:	2600      	movs	r6, #0
 8003960:	42a6      	cmp	r6, r4
 8003962:	d109      	bne.n	8003978 <__libc_init_array+0x24>
 8003964:	4d0b      	ldr	r5, [pc, #44]	; (8003994 <__libc_init_array+0x40>)
 8003966:	4c0c      	ldr	r4, [pc, #48]	; (8003998 <__libc_init_array+0x44>)
 8003968:	f000 f818 	bl	800399c <_init>
 800396c:	1b64      	subs	r4, r4, r5
 800396e:	10a4      	asrs	r4, r4, #2
 8003970:	2600      	movs	r6, #0
 8003972:	42a6      	cmp	r6, r4
 8003974:	d105      	bne.n	8003982 <__libc_init_array+0x2e>
 8003976:	bd70      	pop	{r4, r5, r6, pc}
 8003978:	f855 3b04 	ldr.w	r3, [r5], #4
 800397c:	4798      	blx	r3
 800397e:	3601      	adds	r6, #1
 8003980:	e7ee      	b.n	8003960 <__libc_init_array+0xc>
 8003982:	f855 3b04 	ldr.w	r3, [r5], #4
 8003986:	4798      	blx	r3
 8003988:	3601      	adds	r6, #1
 800398a:	e7f2      	b.n	8003972 <__libc_init_array+0x1e>
 800398c:	080039fc 	.word	0x080039fc
 8003990:	080039fc 	.word	0x080039fc
 8003994:	080039fc 	.word	0x080039fc
 8003998:	08003a00 	.word	0x08003a00

0800399c <_init>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	bf00      	nop
 80039a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a2:	bc08      	pop	{r3}
 80039a4:	469e      	mov	lr, r3
 80039a6:	4770      	bx	lr

080039a8 <_fini>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	bf00      	nop
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr
